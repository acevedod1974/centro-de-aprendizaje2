This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.bolt/config.json
.bolt/prompt
.gitattributes
.gitignore
DEVELOPER_MANUAL.md
diagram.puml
eslint.config.js
FORJADO_SUPABASE_SCHEMA.sql
index.css
index.html
package.json
PLANNING.md
postcss.config.js
README.md
src/App.tsx
src/components/AuthTestPage.tsx
src/components/EvaluationSection.tsx
src/components/fallbackQuizzes.ts
src/components/Footer.tsx
src/components/Header.tsx
src/components/Home.tsx
src/components/LoginTest.tsx
src/components/processes_supabase.csv
src/components/ProcessSection.tsx
src/components/ProgressTracker.tsx
src/components/QuizCard.tsx
src/components/RegisterTest.tsx
src/components/resourcesData.ts
src/components/ResourcesSection.tsx
src/components/ScrollToTop.tsx
src/components/StudyPlanner.tsx
src/components/tools/CalidadInspector.tsx
src/components/tools/EngranajCalculator.tsx
src/components/tools/ForjadoSimulator.tsx
src/components/tools/MaterialesCalculator.tsx
src/components/tools/MecanizadoSimulator.tsx
src/components/tools/SoldaduraQuiz.tsx
src/components/tools/ToleranciaCalculator.tsx
src/components/tools/VelocidadCorteCalculator.tsx
src/components/ToolsSection.tsx
src/contexts/AchievementsContext.tsx
src/contexts/ActivityLogContext.tsx
src/contexts/AuthTestContext.tsx
src/contexts/AuthTestContextContext.ts
src/contexts/QuizProgressContext.tsx
src/contexts/TasksContext.tsx
src/contexts/ThemeContext.tsx
src/contexts/ToastContext.tsx
src/contexts/useAchievements.ts
src/contexts/useAuthTest.ts
src/contexts/useQuizProgress.ts
src/contexts/useTasks.ts
src/contexts/useToast.ts
src/index.css
src/main.tsx
src/supabaseClient.ts
src/vite-env.d.ts
tailwind.config.js
TODO.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".bolt/config.json">
{
  "template": "bolt-vite-react-ts"
}
</file>

<file path=".bolt/prompt">
For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.
</file>

<file path=".gitattributes">
DEVELOPER_MANUAL.md merge=ours
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.env
</file>

<file path="eslint.config.js">
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);
</file>

<file path="FORJADO_SUPABASE_SCHEMA.sql">
-- Table: forging_materials
CREATE TABLE IF NOT EXISTS forging_materials (
  id SERIAL PRIMARY KEY,
  name VARCHAR(64) NOT NULL,
  key VARCHAR(32) NOT NULL UNIQUE,
  temp_min INTEGER NOT NULL,
  temp_max INTEGER NOT NULL,
  resistance FLOAT NOT NULL
);

INSERT INTO forging_materials (name, key, temp_min, temp_max, resistance) VALUES
  ('Acero al Carbono', 'acero', 1000, 1300, 1.0),
  ('Aluminio', 'aluminio', 400, 600, 0.3),
  ('Cobre', 'cobre', 700, 1000, 0.5),
  ('Titanio', 'titanio', 900, 1200, 1.5),
  ('Latón', 'laton', 600, 900, 0.4),
  ('Níquel', 'niquel', 900, 1200, 1.2);

-- Table: forging_processes
CREATE TABLE IF NOT EXISTS forging_processes (
  id SERIAL PRIMARY KEY,
  name VARCHAR(64) NOT NULL,
  key VARCHAR(32) NOT NULL UNIQUE,
  efficiency FLOAT NOT NULL,
  uniformity FLOAT NOT NULL
);

INSERT INTO forging_processes (name, key, efficiency, uniformity) VALUES
  ('Forjado Libre', 'libre', 0.7, 0.6),
  ('Forjado en Matriz', 'matriz', 0.9, 0.9),
  ('Estampado', 'estampado', 0.95, 0.95),
  ('Forjado Isotérmico', 'isotermico', 0.85, 0.8);

-- You can run this file in Supabase SQL editor to create and populate the tables.
</file>

<file path="index.css">
@media (max-width: 640px) {
  .accent-gradient {
    font-size: 1.1rem;
    padding: 0.5rem 1rem;
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="src/components/AuthTestPage.tsx">
import React from "react";
import { AuthTestProvider } from "../contexts/AuthTestContext";
import LoginTest from "./LoginTest";
import RegisterTest from "./RegisterTest";

const AuthTestPage: React.FC = () => {
  const [tab, setTab] = React.useState<"login" | "register">("login");
  return (
    <AuthTestProvider>
      <div className="max-w-lg mx-auto mt-12">
        <div className="flex justify-center mb-4 gap-2">
          <button
            className={`px-4 py-2 rounded-l-lg font-semibold ${
              tab === "login"
                ? "bg-blue-600 text-white"
                : "bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200"
            }`}
            onClick={() => setTab("login")}
          >
            Iniciar Sesión
          </button>
          <button
            className={`px-4 py-2 rounded-r-lg font-semibold ${
              tab === "register"
                ? "bg-green-600 text-white"
                : "bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200"
            }`}
            onClick={() => setTab("register")}
          >
            Registrarse
          </button>
        </div>
        {tab === "login" ? <LoginTest /> : <RegisterTest />}
      </div>
    </AuthTestProvider>
  );
};

export default AuthTestPage;
</file>

<file path="src/components/processes_supabase.csv">
id,category,name,description,applications,parameters,advantages,disadvantages,materials,tools,image,simulator
1,remocion,Torneado,"Proceso de mecanizado que utiliza una herramienta de corte para remover material de una pieza en rotación, creando superficies cilíndricas, cónicas y planas.","Ejes de transmisión;Cilindros hidráulicos;Conos de precisión;Roscas métricas y especiales","Velocidad de corte (Vc);Avance por revolución (f);Profundidad de pasada (ap);Ángulo de ataque","Alta precisión dimensional (±0.01mm);Excelente acabado superficial (Ra 0.8-3.2μm);Versatilidad en geometrías;Productividad elevada","Limitado a piezas de revolución;Requiere sujeción rígida;Desgaste de herramientas","Aceros al carbono;Aceros inoxidables;Aleaciones de aluminio;Latón y bronce","Plaquitas de carburo;Herramientas de acero rápido;Cerámicas;Diamante PCD",🔄,mecanizado-simulator
2,remocion,Fresado,"Proceso de mecanizado con herramienta rotativa multifilosa que remueve material mediante movimientos de avance, permitiendo crear formas complejas.","Superficies planas y perfiladas;Ranuras y chaveteros;Engranajes;Moldes y matrices","Velocidad de husillo (n);Avance por diente (fz);Profundidad axial (ap);Profundidad radial (ae)","Formas geométricas complejas;Alta productividad;Precisión dimensional excelente;Acabados diversos","Mayor complejidad de sujeción;Vibraciones en voladizo;Costo de herramientas","Aceros templados;Aleaciones ligeras;Materiales compuestos;Polímeros técnicos","Fresas de carburo;Fresas de acero rápido;Fresas de diamante;Fresas cerámicas",⚙️,mecanizado-simulator
3,remocion,Taladrado,"Proceso para crear agujeros cilíndricos mediante una herramienta rotativa con movimiento de avance axial.","Agujeros pasantes y ciegos;Avellanados y escariados;Roscado interior;Perforaciones de precisión","Velocidad de corte;Avance por revolución;Refrigeración;Ángulo de punta","Simplicidad operativa;Rapidez de ejecución;Precisión en diámetros;Bajo costo","Limitado a geometrías circulares;Evacuación de viruta;Desgaste en punta","Aceros de construcción;Fundiciones;Aleaciones no ferrosas;Materiales compuestos","Brocas helicoidales;Brocas de centrar;Escariadores;Machos de roscar",🕳️,
4,remocion,Rectificado,"Proceso de acabado que utiliza granos abrasivos para obtener tolerancias muy estrechas y acabados superficiales excepcionales.","Superficies de precisión;Rodamientos;Herramientas de corte;Calibres y patrones","Velocidad de muela;Avance de mesa;Profundidad de pasada;Refrigeración","Tolerancias muy estrechas (±0.002mm);Acabado superficial superior (Ra 0.1-0.8μm);Materiales duros;Corrección geométrica","Baja velocidad de remoción;Costo elevado;Requiere balanceado;Desgaste de muela","Aceros templados;Carburos cementados;Cerámicas técnicas;Materiales endurecidos","Muelas de óxido de aluminio;Muelas de carburo de silicio;Muelas de diamante;Muelas CBN",💎,
5,conformado,Forjado,"Proceso de deformación plástica que mejora las propiedades mecánicas del material mediante aplicación de fuerzas compresivas.","Bielas de motor;Cigüeñales;Herramientas manuales;Componentes aeroespaciales","Temperatura de forja;Fuerza aplicada;Velocidad de deformación;Reducción por pasada","Resistencia mecánica superior;Fibra metálica continua;Propiedades isotrópicas;Eliminación de porosidad","Requiere altas temperaturas;Equipos de gran potencia;Limitaciones geométricas;Oxidación superficial","Aceros al carbono;Aceros aleados;Aleaciones de aluminio;Superaleaciones","Matrices cerradas;Estampas;Yunques;Prensas hidráulicas",🔨,forjado-simulator
6,conformado,Estampado,"Proceso de conformado de láminas metálicas mediante matriz y punzón para obtener formas tridimensionales.","Carrocerías automotrices;Envases metálicos;Componentes electrónicos;Utensilios domésticos","Fuerza de prensado;Velocidad de conformado;Lubricación;Radio de curvatura","Alta productividad;Precisión dimensional;Acabado superficial;Automatización","Costo de herramental;Limitaciones de espesor;Retorno elástico;Defectos superficiales","Aceros de bajo carbono;Aleaciones de aluminio;Latón;Aceros inoxidables","Matrices progresivas;Punzones;Prensas mecánicas;Sistemas de alimentación",📋,
7,conformado,Laminado,"Reducción de espesor mediante compresión entre rodillos, proceso fundamental en la industria siderúrgica.","Láminas y chapas;Perfiles estructurales;Barras y varillas;Alambre","Reducción por pasada;Temperatura de laminado;Velocidad de laminado;Tensión de bobinado","Producción continua;Control dimensional;Propiedades mejoradas;Economía de escala","Inversión inicial alta;Limitaciones geométricas;Defectos superficiales;Tensiones residuales","Aceros al carbono;Aceros inoxidables;Aleaciones de aluminio;Cobre y aleaciones","Rodillos de trabajo;Rodillos de apoyo;Guías laterales;Sistemas de refrigeración",📏,
8,conformado,Extrusión,"Proceso de conformado que fuerza el material a través de una matriz para obtener perfiles de sección constante.","Perfiles arquitectónicos;Tubos y conductos;Barras de sección especial;Componentes automotrices","Presión de extrusión;Temperatura del tocho;Velocidad de extrusión;Relación de extrusión","Perfiles complejos;Tolerancias estrechas;Acabado superficial;Propiedades uniformes","Costo de matrices;Limitaciones de longitud;Defectos internos;Residuos de proceso","Aleaciones de aluminio;Aleaciones de magnesio;Polímeros termoplásticos;Aleaciones de cobre","Matrices de extrusión;Contenedores;Prensas hidráulicas;Sistemas de calentamiento",🔀,
</file>

<file path="src/components/ScrollToTop.tsx">
import { useEffect } from "react";
import { useLocation } from "react-router-dom";

const ScrollToTop: React.FC = () => {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({ top: 0, left: 0, behavior: "smooth" });
  }, [pathname]);

  return null;
};

export default ScrollToTop;
</file>

<file path="src/components/tools/CalidadInspector.tsx">
import React, { useState } from 'react';
import { Search, CheckCircle, XCircle, AlertTriangle, Ruler } from 'lucide-react';

const CalidadInspector: React.FC = () => {
  const [selectedPart, setSelectedPart] = useState<string>('eje');
  const [measurements, setMeasurements] = useState({
    diameter: 25.02,
    length: 100.15,
    roughness: 1.6,
    roundness: 0.008
  });
  const [tolerances, setTolerances] = useState({
    diameter: { nominal: 25, upper: 0.05, lower: -0.05 },
    length: { nominal: 100, upper: 0.2, lower: -0.2 },
    roughness: { max: 3.2 },
    roundness: { max: 0.01 }
  });

  const parts = {
    eje: { name: 'Eje de Transmisión', icon: '🔧' },
    engranaje: { name: 'Engranaje Cilíndrico', icon: '⚙️' },
    rodamiento: { name: 'Rodamiento de Bolas', icon: '🔵' },
    brida: { name: 'Brida de Conexión', icon: '🔗' }
  };

  const checkTolerance = (measurement: number, tolerance: any) => {
    if (tolerance.max) {
      return measurement <= tolerance.max;
    }
    const upperLimit = tolerance.nominal + tolerance.upper;
    const lowerLimit = tolerance.nominal + tolerance.lower;
    return measurement >= lowerLimit && measurement <= upperLimit;
  };

  const getStatusIcon = (measurement: number, tolerance: any) => {
    const isWithinTolerance = checkTolerance(measurement, tolerance);
    if (isWithinTolerance) {
      return <CheckCircle className="text-green-500" size={20} />;
    }
    return <XCircle className="text-red-500" size={20} />;
  };

  const getStatusColor = (measurement: number, tolerance: any) => {
    const isWithinTolerance = checkTolerance(measurement, tolerance);
    return isWithinTolerance ? 'text-green-600' : 'text-red-600';
  };

  const generateReport = () => {
    const results = [
      { param: 'Diámetro', value: measurements.diameter, tolerance: tolerances.diameter, unit: 'mm' },
      { param: 'Longitud', value: measurements.length, tolerance: tolerances.length, unit: 'mm' },
      { param: 'Rugosidad', value: measurements.roughness, tolerance: tolerances.roughness, unit: 'μm' },
      { param: 'Redondez', value: measurements.roundness, tolerance: tolerances.roundness, unit: 'mm' }
    ];

    const passedTests = results.filter(r => checkTolerance(r.value, r.tolerance)).length;
    const totalTests = results.length;
    const passRate = (passedTests / totalTests) * 100;

    return { results, passedTests, totalTests, passRate };
  };

  const report = generateReport();

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-green-600 to-teal-600 p-6 text-white">
          <div className="flex items-center space-x-3">
            <span className="text-3xl">🔍</span>
            <div>
              <h2 className="text-2xl font-bold">Inspector de Control de Calidad</h2>
              <p className="opacity-90">Verificación dimensional y geométrica de componentes</p>
            </div>
          </div>
        </div>

        <div className="p-8">
          <div className="grid lg:grid-cols-3 gap-8">
            {/* Part Selection */}
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Componente a Inspeccionar
                </label>
                <select
                  value={selectedPart}
                  onChange={(e) => setSelectedPart(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-green-500"
                >
                  {Object.entries(parts).map(([key, part]) => (
                    <option key={key} value={key}>{part.name}</option>
                  ))}
                </select>
              </div>

              {/* Measurement Inputs */}
              <div className="space-y-4">
                <h3 className="font-semibold text-gray-900 dark:text-white">Mediciones</h3>
                
                <div>
                  <label className="block text-sm text-gray-600 dark:text-gray-400 mb-1">
                    Diámetro (mm)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={measurements.diameter}
                    onChange={(e) => setMeasurements({...measurements, diameter: Number(e.target.value)})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-green-500"
                  />
                </div>

                <div>
                  <label className="block text-sm text-gray-600 dark:text-gray-400 mb-1">
                    Longitud (mm)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={measurements.length}
                    onChange={(e) => setMeasurements({...measurements, length: Number(e.target.value)})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-green-500"
                  />
                </div>

                <div>
                  <label className="block text-sm text-gray-600 dark:text-gray-400 mb-1">
                    Rugosidad Ra (μm)
                  </label>
                  <input
                    type="number"
                    step="0.1"
                    value={measurements.roughness}
                    onChange={(e) => setMeasurements({...measurements, roughness: Number(e.target.value)})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-green-500"
                  />
                </div>

                <div>
                  <label className="block text-sm text-gray-600 dark:text-gray-400 mb-1">
                    Redondez (mm)
                  </label>
                  <input
                    type="number"
                    step="0.001"
                    value={measurements.roundness}
                    onChange={(e) => setMeasurements({...measurements, roundness: Number(e.target.value)})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-green-500"
                  />
                </div>
              </div>
            </div>

            {/* Inspection Results */}
            <div className="lg:col-span-2 space-y-6">
              {/* Summary Card */}
              <div className={`p-6 rounded-lg ${
                report.passRate === 100 
                  ? 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800' 
                  : report.passRate >= 75
                  ? 'bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800'
                  : 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800'
              }`}>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">Resultado de Inspección</h3>
                  <div className="flex items-center space-x-2">
                    {report.passRate === 100 ? (
                      <CheckCircle className="text-green-500" size={24} />
                    ) : report.passRate >= 75 ? (
                      <AlertTriangle className="text-yellow-500" size={24} />
                    ) : (
                      <XCircle className="text-red-500" size={24} />
                    )}
                    <span className={`text-2xl font-bold ${
                      report.passRate === 100 ? 'text-green-600' :
                      report.passRate >= 75 ? 'text-yellow-600' : 'text-red-600'
                    }`}>
                      {Math.round(report.passRate)}%
                    </span>
                  </div>
                </div>
                <p className="text-gray-600 dark:text-gray-300">
                  {report.passedTests} de {report.totalTests} parámetros dentro de tolerancia
                </p>
              </div>

              {/* Detailed Results */}
              <div className="bg-white dark:bg-gray-700 rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4 flex items-center">
                  <Ruler className="mr-2" size={20} />
                  Análisis Dimensional
                </h3>
                
                <div className="space-y-4">
                  {report.results.map((result, index) => (
                    <div key={index} className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-600 rounded-lg">
                      <div className="flex items-center space-x-3">
                        {getStatusIcon(result.value, result.tolerance)}
                        <div>
                          <div className="font-medium">{result.param}</div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            {result.tolerance.max ? 
                              `Máximo: ${result.tolerance.max} ${result.unit}` :
                              `${result.tolerance.nominal}${result.tolerance.upper > 0 ? '+' : ''}${result.tolerance.upper}/${result.tolerance.lower} ${result.unit}`
                            }
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={`text-lg font-bold ${getStatusColor(result.value, result.tolerance)}`}>
                          {result.value} {result.unit}
                        </div>
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          {checkTolerance(result.value, result.tolerance) ? 'PASA' : 'FALLA'}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Visual Representation */}
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4">Representación Visual</h3>
                
                <div className="relative mx-auto mb-6" style={{ width: '300px', height: '150px' }}>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-6xl">
                      {parts[selectedPart as keyof typeof parts].icon}
                    </div>
                  </div>
                  
                  {/* Measurement indicators */}
                  <div className="absolute top-2 left-2 bg-white dark:bg-gray-800 p-2 rounded text-xs">
                    ⌀ {measurements.diameter}mm
                  </div>
                  <div className="absolute top-2 right-2 bg-white dark:bg-gray-800 p-2 rounded text-xs">
                    L: {measurements.length}mm
                  </div>
                  <div className="absolute bottom-2 left-2 bg-white dark:bg-gray-800 p-2 rounded text-xs">
                    Ra: {measurements.roughness}μm
                  </div>
                  <div className="absolute bottom-2 right-2 bg-white dark:bg-gray-800 p-2 rounded text-xs">
                    ○: {measurements.roundness}mm
                  </div>
                </div>
              </div>

              {/* Recommendations */}
              <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
                <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">
                  📋 Recomendaciones
                </h4>
                <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                  {report.passRate < 100 && (
                    <>
                      <li>• Revisar proceso de fabricación</li>
                      <li>• Verificar calibración de instrumentos</li>
                      <li>• Analizar causas de variación dimensional</li>
                    </>
                  )}
                  {measurements.roughness > tolerances.roughness.max && (
                    <li>• Mejorar acabado superficial - ajustar parámetros de corte</li>
                  )}
                  {!checkTolerance(measurements.roundness, tolerances.roundness) && (
                    <li>• Verificar rigidez del sistema de sujeción</li>
                  )}
                  <li>• Documentar resultados en registro de calidad</li>
                  <li>• Realizar seguimiento estadístico del proceso</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CalidadInspector;
</file>

<file path="src/contexts/AuthTestContext.tsx">
import React, { useEffect, useState } from "react";
import { supabase } from "../supabaseClient";
import { AuthTestContext, AuthUser } from "./AuthTestContextContext";

export const AuthTestProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<AuthUser | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const getSession = async () => {
      const { data } = await supabase.auth.getSession();
      if (data.session?.user) {
        setUser({
          id: data.session.user.id,
          email: data.session.user.email ?? "",
        });
      } else {
        setUser(null);
      }
      setLoading(false);
    };
    getSession();
    const { data: listener } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        if (session?.user) {
          setUser({ id: session.user.id, email: session.user.email ?? "" });
        } else {
          setUser(null);
        }
      }
    );
    return () => {
      listener.subscription.unsubscribe();
    };
  }, []);

  const login = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) return { error: error.message };
    return {};
  };

  const register = async (email: string, password: string) => {
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return { error: error.message };
    return {};
  };

  const logout = async () => {
    await supabase.auth.signOut();
  };

  return (
    <AuthTestContext.Provider
      value={{ user, loading, login, register, logout }}
    >
      {children}
    </AuthTestContext.Provider>
  );
};
</file>

<file path="src/contexts/AuthTestContextContext.ts">
import { createContext } from "react";

export interface AuthUser {
  id: string;
  email: string;
}

export interface AuthContextType {
  user: AuthUser | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<{ error?: string }>;
  register: (email: string, password: string) => Promise<{ error?: string }>;
  logout: () => Promise<void>;
}

export const AuthTestContext = createContext<AuthContextType | undefined>(
  undefined
);
</file>

<file path="src/contexts/ToastContext.tsx">
import React, { createContext, useState } from "react";

interface Toast {
  id: number;
  message: string;
  type?: "success" | "error" | "info";
}

interface ToastContextType {
  toasts: Toast[];
  showToast: (message: string, type?: "success" | "error" | "info") => void;
}

const ToastContext = createContext<ToastContextType | undefined>(undefined);

export const ToastProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [toasts, setToasts] = useState<Toast[]>([]);

  const showToast = (
    message: string,
    type: "success" | "error" | "info" = "info"
  ) => {
    const id = Date.now();
    setToasts((prev) => [...prev, { id, message, type }]);
    setTimeout(() => {
      setToasts((prev) => prev.filter((t) => t.id !== id));
    }, 3500);
  };

  return (
    <ToastContext.Provider value={{ toasts, showToast }}>
      {children}
      <div className="fixed bottom-20 right-6 z-50 flex flex-col items-end space-y-2">
        {toasts.map((toast) => (
          <div
            key={toast.id}
            className={`px-4 py-2 rounded shadow-lg text-white text-sm animate-fade-in-up ${
              toast.type === "success"
                ? "bg-green-600"
                : toast.type === "error"
                ? "bg-red-600"
                : "bg-blue-600"
            }`}
            role="alert"
          >
            {toast.message}
          </div>
        ))}
      </div>
    </ToastContext.Provider>
  );
};

// Remove useToast export from this file. Use useToast from './useToast' instead.

// Add fade-in-up animation
// In your global CSS (index.css), add:
// @keyframes fade-in-up {
//   from { opacity: 0; transform: translateY(20px); }
//   to { opacity: 1; transform: translateY(0); }
// }
// .animate-fade-in-up { animation: fade-in-up 0.4s ease; }
</file>

<file path="src/contexts/useAchievements.ts">
import { useContext } from "react";
import { AchievementsContext } from "./AchievementsContext";

export const useAchievements = () => {
  const ctx = useContext(AchievementsContext);
  if (!ctx)
    throw new Error("useAchievements must be used within AchievementsProvider");
  return ctx;
};
</file>

<file path="src/contexts/useQuizProgress.ts">
import { useContext } from "react";
import { QuizProgressContext } from "./QuizProgressContext";

export const useQuizProgress = () => {
  const ctx = useContext(QuizProgressContext);
  if (!ctx)
    throw new Error("useQuizProgress must be used within QuizProgressProvider");
  return ctx;
};
</file>

<file path="src/contexts/useTasks.ts">
import { useContext } from "react";
import { TasksContext } from "./TasksContext";

export const useTasks = () => {
  const ctx = useContext(TasksContext);
  if (!ctx) throw new Error("useTasks must be used within TasksProvider");
  return ctx;
};
</file>

<file path="src/contexts/useToast.ts">
import { useContext } from "react";
import { ToastContext } from "./ToastContext";

export const useToast = () => {
  const context = useContext(ToastContext);
  if (!context) {
    throw new Error("useToast must be used within a ToastProvider");
  }
  return context;
};
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});
</file>

<file path="diagram.puml">
@startuml Diagrama-de-Aprendizaje
' Centro de Aprendizaje - Arquitectura General

package "Frontend (React/Vite)" {
  [App.tsx] --> [Home.tsx]
  [App.tsx] --> [ProcessSection.tsx]
  [App.tsx] --> [ToolsSection.tsx]
  [App.tsx] --> [ResourcesSection.tsx]
  [App.tsx] --> [EvaluationSection.tsx]
  [App.tsx] --> [ProgressTracker.tsx]
  [App.tsx] --> [StudyPlanner.tsx]
  [ToolsSection.tsx] --> [tools/MaterialesCalculator.tsx]
  [ToolsSection.tsx] --> [tools/MecanizadoSimulator.tsx]
  [ToolsSection.tsx] --> [tools/ForjadoSimulator.tsx]
  [ToolsSection.tsx] --> [tools/EngranajCalculator.tsx]
  [ToolsSection.tsx] --> [tools/VelocidadCorteCalculator.tsx]
  [ToolsSection.tsx] --> [tools/SoldaduraQuiz.tsx]
  [ToolsSection.tsx] --> [tools/ToleranciaCalculator.tsx]
  [ToolsSection.tsx] --> [tools/CalidadInspector.tsx]
  [App.tsx] --> [contexts/ThemeContext.tsx]
  [App.tsx] --> [contexts/ToastContext.tsx]
  [App.tsx] --> [contexts/QuizProgressContext.tsx]
  [App.tsx] --> [contexts/TasksContext.tsx]
  [App.tsx] --> [contexts/AchievementsContext.tsx]
  [App.tsx] --> [contexts/ActivityLogContext.tsx]
}

package "Backend (Supabase)" {
  database "Supabase DB" as DB
  DB -- "materials"
  DB -- "gear_applications"
  DB -- "resources"
  DB -- "quizzes"
  DB -- "machining_tools"
  DB -- "machining_machines"
}

[tools/MaterialesCalculator.tsx] ..> DB : fetch materials
[tools/EngranajCalculator.tsx] ..> DB : fetch materials, gear_applications
[tools/MecanizadoSimulator.tsx] ..> DB : fetch materials, machining_tools, machining_machines
[ResourcesSection.tsx] ..> DB : fetch resources
[ProcessSection.tsx] ..> DB : fetch processes
[EvaluationSection.tsx] ..> DB : fetch quizzes

@enduml
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Centro de Aprendizaje de Ingeniería Mecánica</title>
    <meta
      name="description"
      content="Centro de Aprendizaje de Ingeniería Mecánica: recursos, herramientas y evaluaciones para estudiantes y profesionales."
    />
    <meta
      property="og:title"
      content="Centro de Aprendizaje de Ingeniería Mecánica"
    />
    <meta
      property="og:description"
      content="Recursos, herramientas y evaluaciones para estudiantes y profesionales de ingeniería mecánica."
    />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/vite.svg" />
    <meta property="og:url" content="https://ingenieriacentro.edu.ve" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta
      name="twitter:title"
      content="Centro de Aprendizaje de Ingeniería Mecánica"
    />
    <meta
      name="twitter:description"
      content="Recursos, herramientas y evaluaciones para estudiantes y profesionales de ingeniería mecánica."
    />
    <meta name="twitter:image" content="/vite.svg" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="src/components/fallbackQuizzes.ts">
import { Quiz } from "./QuizCard";

export const fallbackQuizzes: Quiz[] = [
  {
    id: "mecanizado",
    title: "Mecanizado",
    description: "Próximamente: Evaluación sobre procesos de mecanizado.",
    icon: "🛠️",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Ingeniería Fundamental",
  },
  {
    id: "conformado",
    title: "Conformado",
    description: "Próximamente: Evaluación sobre procesos de conformado.",
    icon: "🔩",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Ingeniería Fundamental",
  },
  {
    id: "fundicion",
    title: "Fundición",
    description: "Próximamente: Evaluación sobre procesos de fundición.",
    icon: "🏭",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Ingeniería Fundamental",
  },
  {
    id: "calidad",
    title: "Calidad",
    description: "Próximamente: Evaluación sobre control de calidad.",
    icon: "📏",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Tecnologías Avanzadas",
  },
  {
    id: "materiales",
    title: "Materiales",
    description: "Próximamente: Evaluación sobre ciencia de materiales.",
    icon: "🧪",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Tecnologías Avanzadas",
  },
  {
    id: "automatizacion",
    title: "Automatización",
    description: "Próximamente: Evaluación sobre automatización industrial.",
    icon: "🤖",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Tecnologías Avanzadas",
  },
  {
    id: "diseno",
    title: "Diseño",
    description: "Próximamente: Evaluación sobre diseño industrial.",
    icon: "📐",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Tecnologías Avanzadas",
  },
  {
    id: "seguridad",
    title: "Seguridad",
    description: "Próximamente: Evaluación sobre seguridad industrial.",
    icon: "🦺",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Ciencias Aplicadas",
  },
  {
    id: "mantenimiento",
    title: "Mantenimiento",
    description: "Próximamente: Evaluación sobre mantenimiento industrial.",
    icon: "🔧",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Ciencias Aplicadas",
  },
  {
    id: "termodinamica",
    title: "Termodinámica",
    description: "Próximamente: Evaluación sobre termodinámica.",
    icon: "🔥",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Ciencias Aplicadas",
  },
  {
    id: "fluidos",
    title: "Fluidos",
    description: "Próximamente: Evaluación sobre dinámica de fluidos.",
    icon: "💧",
    color: "from-gray-400 to-gray-600",
    available: false,
    category: "Ciencias Aplicadas",
  },
  {
    id: "soldadura",
    title: "Soldadura",
    description: "Evaluación sobre procesos de soldadura.",
    icon: "⚡",
    color: "from-yellow-400 to-orange-500",
    available: true,
    category: "Ingeniería Fundamental",
    process_id: 1,
  },
];
</file>

<file path="src/components/LoginTest.tsx">
import React, { useState } from "react";
import { useAuthTest } from "../contexts/useAuthTest";

const LoginTest: React.FC = () => {
  const { login, user, loading, logout } = useAuthTest();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [pending, setPending] = useState(false);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setPending(true);
    setError(null);
    const res = await login(email, password);
    if (res.error) setError(res.error);
    setPending(false);
  };

  if (loading) return <div className="py-8 text-center">Cargando...</div>;
  if (user)
    return (
      <div className="max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg mt-8 text-center">
        <h2 className="text-xl font-bold mb-2">¡Sesión iniciada!</h2>
        <p className="mb-4">Bienvenido, {user.email}</p>
        <button
          onClick={logout}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg"
        >
          Cerrar sesión
        </button>
      </div>
    );

  return (
    <form
      onSubmit={handleLogin}
      className="max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg mt-8"
    >
      <h2 className="text-xl font-bold mb-4">Iniciar Sesión (Test)</h2>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        className="w-full mb-3 px-4 py-2 border rounded-lg"
        required
      />
      <input
        type="password"
        placeholder="Contraseña"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        className="w-full mb-3 px-4 py-2 border rounded-lg"
        required
      />
      {error && <div className="text-red-600 mb-2">{error}</div>}
      <button
        type="submit"
        className="w-full bg-blue-600 text-white py-2 rounded-lg font-semibold"
        disabled={pending}
      >
        {pending ? "Ingresando..." : "Ingresar"}
      </button>
    </form>
  );
};

export default LoginTest;
</file>

<file path="src/components/RegisterTest.tsx">
import React, { useState } from "react";
import { useAuthTest } from "../contexts/useAuthTest";

const RegisterTest: React.FC = () => {
  const { register, user, loading, logout } = useAuthTest();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [pending, setPending] = useState(false);

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setPending(true);
    setError(null);
    setSuccess(false);
    const res = await register(email, password);
    if (res.error) setError(res.error);
    else setSuccess(true);
    setPending(false);
  };

  if (loading) return <div className="py-8 text-center">Cargando...</div>;
  if (user)
    return (
      <div className="max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg mt-8 text-center">
        <h2 className="text-xl font-bold mb-2">¡Ya tienes sesión iniciada!</h2>
        <p className="mb-4">{user.email}</p>
        <button
          onClick={logout}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg"
        >
          Cerrar sesión
        </button>
      </div>
    );

  return (
    <form
      onSubmit={handleRegister}
      className="max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg mt-8"
    >
      <h2 className="text-xl font-bold mb-4">Registro (Test)</h2>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        className="w-full mb-3 px-4 py-2 border rounded-lg"
        required
      />
      <input
        type="password"
        placeholder="Contraseña"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        className="w-full mb-3 px-4 py-2 border rounded-lg"
        required
      />
      {error && <div className="text-red-600 mb-2">{error}</div>}
      {success && (
        <div className="text-green-600 mb-2">
          Registro exitoso. Revisa tu email para confirmar la cuenta.
        </div>
      )}
      <button
        type="submit"
        className="w-full bg-green-600 text-white py-2 rounded-lg font-semibold"
        disabled={pending}
      >
        {pending ? "Registrando..." : "Registrarse"}
      </button>
    </form>
  );
};

export default RegisterTest;
</file>

<file path="src/components/resourcesData.ts">
// Resource type definition for maintainability
export interface Resource {
  id: number;
  title: string;
  description: string;
  type: string;
  category: string;
  size?: string;
  pages?: number;
  items?: number;
  duration?: string;
  updated: string;
  download_url?: string;
  view_url?: string;
}

// Remove hardcoded categories; will fetch from Supabase now
</file>

<file path="src/components/tools/ToleranciaCalculator.tsx">
import React, { useState } from "react";
import {
  Ruler,
  Calculator,
  Info,
  RotateCcw,
  AlertTriangle,
} from "lucide-react";

const ToleranciaCalculator: React.FC = () => {
  const [nominalDimension, setNominalDimension] = useState<number>(50);
  const [toleranceGrade, setToleranceGrade] = useState<string>("IT7");
  const [fundamentalDeviation, setFundamentalDeviation] = useState<string>("h");
  const [shaftDimension, setShaftDimension] = useState<number>(50);
  const [shaftTolerance, setShaftTolerance] = useState<string>("g6");

  const toleranceGrades = {
    IT5: { factor: 7, description: "Precisión muy alta" },
    IT6: { factor: 10, description: "Precisión alta" },
    IT7: { factor: 16, description: "Precisión media" },
    IT8: { factor: 25, description: "Precisión normal" },
    IT9: { factor: 40, description: "Precisión baja" },
    IT10: { factor: 64, description: "Precisión muy baja" },
    IT11: { factor: 100, description: "Trabajo en bruto" },
  };

  const fundamentalDeviations = {
    H: { upper: 0, description: "Agujero base superior" },
    h: { upper: 0, description: "Eje base superior" },
    G: { upper: -5, description: "Agujero con interferencia" },
    g: { upper: -5, description: "Eje con holgura" },
    F: { upper: -10, description: "Agujero con holgura" },
    f: { upper: -10, description: "Eje con holgura media" },
    E: { upper: -20, description: "Agujero con holgura grande" },
    e: { upper: -20, description: "Eje con holgura grande" },
  };

  const calculateToleranceUnit = (dimension: number): number => {
    if (dimension <= 3) return 0.55;
    if (dimension <= 6) return 0.73;
    if (dimension <= 10) return 0.9;
    if (dimension <= 18) return 1.08;
    if (dimension <= 30) return 1.31;
    if (dimension <= 50) return 1.56;
    if (dimension <= 80) return 1.86;
    if (dimension <= 120) return 2.17;
    if (dimension <= 180) return 2.52;
    if (dimension <= 250) return 2.89;
    if (dimension <= 315) return 3.22;
    if (dimension <= 400) return 3.54;
    return 3.89;
  };

  const calculateTolerance = (dimension: number, grade: string): number => {
    const toleranceUnit = calculateToleranceUnit(dimension);
    const gradeFactor =
      toleranceGrades[grade as keyof typeof toleranceGrades]?.factor || 16;
    return (toleranceUnit * gradeFactor) / 1000; // Convert to mm
  };

  const calculateLimits = (
    dimension: number,
    grade: string,
    deviation: string
  ) => {
    const tolerance = calculateTolerance(dimension, grade);
    const deviationValue =
      (fundamentalDeviations[deviation as keyof typeof fundamentalDeviations]
        ?.upper || 0) / 1000;

    const upperLimit = dimension + deviationValue;
    const lowerLimit = upperLimit - tolerance;

    return { upperLimit, lowerLimit, tolerance };
  };

  const holeLimits = calculateLimits(
    nominalDimension,
    toleranceGrade,
    fundamentalDeviation
  );
  const shaftLimits = calculateLimits(
    shaftDimension,
    shaftTolerance.slice(1),
    shaftTolerance.charAt(0)
  );

  const calculateFit = () => {
    const maxClearance = holeLimits.upperLimit - shaftLimits.lowerLimit;
    const minClearance = holeLimits.lowerLimit - shaftLimits.upperLimit;

    let fitType = "";
    if (minClearance > 0) {
      fitType = "Ajuste con holgura";
    } else if (maxClearance < 0) {
      fitType = "Ajuste con interferencia";
    } else {
      fitType = "Ajuste de transición";
    }

    return { maxClearance, minClearance, fitType };
  };

  const fit = calculateFit();

  const resetCalculator = () => {
    setNominalDimension(50);
    setToleranceGrade("IT7");
    setFundamentalDeviation("h");
    setShaftDimension(50);
    setShaftTolerance("g6");
  };

  return (
    <div className="max-w-lg w-full mx-auto p-4 sm:p-8 bg-white dark:bg-gray-900 rounded-xl shadow-lg">
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 p-6 text-white">
        <div className="flex items-center space-x-3">
          <Ruler size={28} />
          <div>
            <h2 className="text-2xl font-bold">
              Calculadora de Tolerancias ISO
            </h2>
            <p className="opacity-90">
              Sistema de tolerancias y ajustes según norma ISO 286
            </p>
          </div>
        </div>
      </div>

      <div className="p-8">
        <div className="grid lg:grid-cols-2 gap-8">
          {/* Input Panel */}
          <div className="space-y-6">
            <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
              <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-4">
                🔧 Configuración del Agujero
              </h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Dimensión Nominal (mm)
                  </label>
                  <input
                    type="number"
                    value={nominalDimension}
                    onChange={(e) =>
                      setNominalDimension(Number(e.target.value))
                    }
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-indigo-500"
                    min="1"
                    max="500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Grado de Tolerancia
                  </label>
                  <select
                    value={toleranceGrade}
                    onChange={(e) => setToleranceGrade(e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-indigo-500"
                  >
                    {Object.entries(toleranceGrades).map(([grade, info]) => (
                      <option key={grade} value={grade}>
                        {grade} - {info.description}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Desviación Fundamental
                  </label>
                  <select
                    value={fundamentalDeviation}
                    onChange={(e) => setFundamentalDeviation(e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-indigo-500"
                  >
                    {Object.entries(fundamentalDeviations).map(
                      ([dev, info]) => (
                        <option key={dev} value={dev}>
                          {dev} - {info.description}
                        </option>
                      )
                    )}
                  </select>
                </div>
              </div>
            </div>

            <div className="bg-green-50 dark:bg-green-900/20 p-6 rounded-lg">
              <h3 className="text-lg font-semibold text-green-800 dark:text-green-200 mb-4">
                ⚙️ Configuración del Eje
              </h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Dimensión Nominal (mm)
                  </label>
                  <input
                    type="number"
                    value={shaftDimension}
                    onChange={(e) => setShaftDimension(Number(e.target.value))}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-green-500"
                    min="1"
                    max="500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Tolerancia del Eje
                  </label>
                  <select
                    value={shaftTolerance}
                    onChange={(e) => setShaftTolerance(e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-green-500"
                  >
                    <option value="h6">h6 - Eje base, precisión alta</option>
                    <option value="g6">g6 - Eje con holgura pequeña</option>
                    <option value="f7">f7 - Eje con holgura media</option>
                    <option value="e8">e8 - Eje con holgura grande</option>
                    <option value="d9">d9 - Eje con holgura muy grande</option>
                    <option value="s6">
                      s6 - Eje con interferencia pequeña
                    </option>
                    <option value="r6">r6 - Eje con interferencia media</option>
                  </select>
                </div>
              </div>
            </div>

            <button
              onClick={resetCalculator}
              className="flex items-center space-x-2 px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
            >
              <RotateCcw size={18} />
              <span>Reiniciar</span>
            </button>
          </div>

          {/* Results Panel */}
          <div className="space-y-6">
            {/* Hole Results */}
            <div className="bg-white dark:bg-gray-700 rounded-lg p-6 border border-blue-200 dark:border-blue-700">
              <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-4 flex items-center">
                <Calculator size={20} className="mr-2" />
                Resultados del Agujero
              </h3>

              <div className="space-y-3">
                <div className="flex justify-between items-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                  <span className="font-medium">Límite Superior:</span>
                  <span className="text-lg font-bold text-blue-600">
                    {holeLimits.upperLimit.toFixed(4)} mm
                  </span>
                </div>

                <div className="flex justify-between items-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                  <span className="font-medium">Límite Inferior:</span>
                  <span className="text-lg font-bold text-blue-600">
                    {holeLimits.lowerLimit.toFixed(4)} mm
                  </span>
                </div>

                <div className="flex justify-between items-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                  <span className="font-medium">Tolerancia:</span>
                  <span className="text-lg font-bold text-blue-600">
                    ±{(holeLimits.tolerance / 2).toFixed(4)} mm
                  </span>
                </div>
              </div>
            </div>

            {/* Shaft Results */}
            <div className="bg-white dark:bg-gray-700 rounded-lg p-6 border border-green-200 dark:border-green-700">
              <h3 className="text-lg font-semibold text-green-800 dark:text-green-200 mb-4 flex items-center">
                <Calculator size={20} className="mr-2" />
                Resultados del Eje
              </h3>

              <div className="space-y-3">
                <div className="flex justify-between items-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                  <span className="font-medium">Límite Superior:</span>
                  <span className="text-lg font-bold text-green-600">
                    {shaftLimits.upperLimit.toFixed(4)} mm
                  </span>
                </div>

                <div className="flex justify-between items-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                  <span className="font-medium">Límite Inferior:</span>
                  <span className="text-lg font-bold text-green-600">
                    {shaftLimits.lowerLimit.toFixed(4)} mm
                  </span>
                </div>

                <div className="flex justify-between items-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                  <span className="font-medium">Tolerancia:</span>
                  <span className="text-lg font-bold text-green-600">
                    ±{(shaftLimits.tolerance / 2).toFixed(4)} mm
                  </span>
                </div>
              </div>
            </div>

            {/* Fit Analysis */}
            <div className="bg-white dark:bg-gray-700 rounded-lg p-6 border border-purple-200 dark:border-purple-700">
              <h3 className="text-lg font-semibold text-purple-800 dark:text-purple-200 mb-4 flex items-center">
                <Info size={20} className="mr-2" />
                Análisis del Ajuste
              </h3>

              <div className="space-y-4">
                <div className="p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                  <div className="text-center mb-3">
                    <span className="text-2xl font-bold text-purple-600">
                      {fit.fitType}
                    </span>
                  </div>

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-600 dark:text-gray-400">
                        Holgura Máxima:
                      </span>
                      <div className="font-bold text-purple-600">
                        {fit.maxClearance > 0 ? "+" : ""}
                        {fit.maxClearance.toFixed(4)} mm
                      </div>
                    </div>
                    <div>
                      <span className="text-gray-600 dark:text-gray-400">
                        Holgura Mínima:
                      </span>
                      <div className="font-bold text-purple-600">
                        {fit.minClearance > 0 ? "+" : ""}
                        {fit.minClearance.toFixed(4)} mm
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Visual Representation */}
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
              <h3 className="text-lg font-semibold mb-4">
                Representación Visual
              </h3>

              <div className="space-y-4">
                {/* Hole visualization */}
                <div className="relative">
                  <div className="text-sm text-blue-600 mb-2">Agujero</div>
                  <div className="h-8 bg-blue-200 dark:bg-blue-800 rounded relative">
                    <div className="absolute inset-0 flex items-center justify-center text-xs font-medium">
                      {nominalDimension} {fundamentalDeviation}
                      {toleranceGrade}
                    </div>
                  </div>
                </div>

                {/* Shaft visualization */}
                <div className="relative">
                  <div className="text-sm text-green-600 mb-2">Eje</div>
                  <div className="h-8 bg-green-200 dark:bg-green-800 rounded relative">
                    <div className="absolute inset-0 flex items-center justify-center text-xs font-medium">
                      {shaftDimension} {shaftTolerance}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Recommendations */}
            <div className="bg-yellow-50 dark:bg-yellow-900/20 p-6 rounded-lg">
              <div className="flex items-start space-x-3">
                <AlertTriangle size={20} className="text-yellow-600 mt-1" />
                <div>
                  <h4 className="font-semibold text-yellow-800 dark:text-yellow-200">
                    Recomendaciones de Aplicación
                  </h4>
                  <ul className="text-sm text-yellow-700 dark:text-yellow-300 mt-2 space-y-1">
                    <li>• Verificar capacidad del proceso de fabricación</li>
                    <li>• Considerar el método de medición y calibración</li>
                    <li>• Evaluar el costo vs precisión requerida</li>
                    <li>• Documentar tolerancias en planos técnicos</li>
                    <li>
                      • Realizar estudios de capacidad del proceso (Cp, Cpk)
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ToleranciaCalculator;
</file>

<file path="src/contexts/ActivityLogContext.tsx">
import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from "react";

interface ActivityLogContextType {
  activityLog: Record<string, number>;
  logActivity: () => void;
}

const ACTIVITY_LOG_KEY = "activityLog";

const ActivityLogContext = createContext<ActivityLogContextType | undefined>(
  undefined
);

export const useActivityLog = () => {
  const ctx = useContext(ActivityLogContext);
  if (!ctx)
    throw new Error("useActivityLog must be used within ActivityLogProvider");
  return ctx;
};

const getInitialActivityLog = () => {
  const stored = localStorage.getItem(ACTIVITY_LOG_KEY);
  if (stored) {
    try {
      return JSON.parse(stored);
    } catch {
      // fallback to empty log if corrupted
      return {};
    }
  }
  return {};
};

export const ActivityLogProvider = ({ children }: { children: ReactNode }) => {
  const [activityLog, setActivityLog] = useState<Record<string, number>>(
    getInitialActivityLog()
  );

  const logActivity = () => {
    const today = new Date().toISOString().split("T")[0];
    setActivityLog((prev) => ({
      ...prev,
      [today]: (prev[today] || 0) + 1,
    }));
  };

  useEffect(() => {
    localStorage.setItem(ACTIVITY_LOG_KEY, JSON.stringify(activityLog));
  }, [activityLog]);

  return (
    <ActivityLogContext.Provider value={{ activityLog, logActivity }}>
      {children}
    </ActivityLogContext.Provider>
  );
};
</file>

<file path="src/contexts/QuizProgressContext.tsx">
import React, { createContext, useState, useEffect, ReactNode } from "react";

export interface QuizProgress {
  completed: boolean;
  bestScore?: number;
}

interface QuizProgressContextType {
  userProgress: Record<string, QuizProgress>;
  setUserProgress: React.Dispatch<
    React.SetStateAction<Record<string, QuizProgress>>
  >;
}

const LOCAL_STORAGE_KEY = "quizUserProgress";

const QuizProgressContext = createContext<QuizProgressContextType | undefined>(
  undefined
);

const getInitialUserProgress = () => {
  const stored = localStorage.getItem(LOCAL_STORAGE_KEY);
  if (stored) {
    try {
      return JSON.parse(stored);
    } catch {
      // fallback to default if corrupted
      return {
        soldadura: { completed: false },
        mecanizado: { completed: false },
        conformado: { completed: false },
        fundicion: { completed: false },
        calidad: { completed: false },
        materiales: { completed: false },
        automatizacion: { completed: false },
        seguridad: { completed: false },
        mantenimiento: { completed: false },
        termodinamica: { completed: false },
        diseno: { completed: false },
        fluidos: { completed: false },
      };
    }
  }
  return {
    soldadura: { completed: false },
    mecanizado: { completed: false },
    conformado: { completed: false },
    fundicion: { completed: false },
    calidad: { completed: false },
    materiales: { completed: false },
    automatizacion: { completed: false },
    seguridad: { completed: false },
    mantenimiento: { completed: false },
    termodinamica: { completed: false },
    diseno: { completed: false },
    fluidos: { completed: false },
  };
};

export const QuizProgressProvider = ({ children }: { children: ReactNode }) => {
  const [userProgress, setUserProgress] = useState<
    Record<string, QuizProgress>
  >(getInitialUserProgress());

  useEffect(() => {
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(userProgress));
  }, [userProgress]);

  return (
    <QuizProgressContext.Provider value={{ userProgress, setUserProgress }}>
      {children}
    </QuizProgressContext.Provider>
  );
};

export { QuizProgressContext };
</file>

<file path="src/contexts/ThemeContext.tsx">
import React, { createContext, useContext, useState, useEffect } from 'react';

interface ThemeContextType {
  isDark: boolean;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isDark, setIsDark] = useState(() => {
    // Check if we're in the browser
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('theme');
      if (saved) {
        return saved === 'dark';
      }
      // Default to system preference
      return window.matchMedia('(prefers-color-scheme: dark)').matches;
    }
    return false;
  });

  useEffect(() => {
    // Only run in browser
    if (typeof window !== 'undefined') {
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
      
      // Apply theme to document
      const root = document.documentElement;
      if (isDark) {
        root.classList.add('dark');
      } else {
        root.classList.remove('dark');
      }
    }
  }, [isDark]);

  // Listen for system theme changes
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      const handleChange = (e: MediaQueryListEvent) => {
        // Only update if no manual preference is saved
        const saved = localStorage.getItem('theme');
        if (!saved) {
          setIsDark(e.matches);
        }
      };

      mediaQuery.addEventListener('change', handleChange);
      return () => mediaQuery.removeEventListener('change', handleChange);
    }
  }, []);

  const toggleTheme = () => {
    setIsDark(prev => !prev);
  };

  return (
    <ThemeContext.Provider value={{ isDark, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};
</file>

<file path="src/contexts/useAuthTest.ts">
import { useContext } from "react";
import { AuthTestContext } from "./AuthTestContextContext";

export const useAuthTest = () => {
  const ctx = useContext(AuthTestContext);
  if (!ctx) throw new Error("useAuthTest must be used within AuthTestProvider");
  return ctx;
};
</file>

<file path="src/supabaseClient.ts">
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseKey);
</file>

<file path="src/components/tools/ForjadoSimulator.tsx">
import React, { useState, useEffect } from "react";
import {
  Play,
  Pause,
  RotateCcw,
  Thermometer,
  Gauge,
  Timer,
} from "lucide-react";
import { supabase } from "../../supabaseClient";
import { Line } from "react-chartjs-2"; // If chart.js is available, otherwise fallback to SVG
import {
  Chart,
  LineElement,
  PointElement,
  LineController,
  CategoryScale,
  LinearScale,
  Title,
  Tooltip,
  Legend,
  Filler,
} from "chart.js";

Chart.register(
  LineElement,
  PointElement,
  LineController,
  CategoryScale,
  LinearScale,
  Title,
  Tooltip,
  Legend,
  Filler
);

interface ForgingMaterial {
  id: number;
  name: string;
  key: string;
  temp_min: number;
  temp_max: number;
  resistance: number;
}

interface ForgingProcess {
  id: number;
  name: string;
  key: string;
  efficiency: number;
  uniformity: number;
}

const ForjadoSimulator: React.FC = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [temperature, setTemperature] = useState(1200);
  const [force, setForce] = useState(500);
  const [time, setTime] = useState(0);
  const [deformation, setDeformation] = useState(0);
  const [materialType, setMaterialType] = useState<string>("acero");
  const [forgeType, setForgeType] = useState<string>("libre");
  const [simulationSpeed, setSimulationSpeed] = useState(1);
  const [materials, setMaterials] = useState<ForgingMaterial[]>([]);
  const [forgeTypes, setForgeTypes] = useState<ForgingProcess[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [history, setHistory] = useState<
    {
      time: number;
      deformation: number;
      temperature: number;
    }[]
  >([]);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const { data: matData, error: matError } = await supabase
          .from("materials")
          .select("*");
        const { data: procData, error: procError } = await supabase
          .from("forging_processes")
          .select("*");
        if (matError || !matData) throw matError;
        if (procError || !procData) throw procError;
        setMaterials(matData);
        setForgeTypes(procData);
        // Set defaults if not set
        if (!materialType && matData.length > 0)
          setMaterialType(matData[0].key);
        if (!forgeType && procData.length > 0) setForgeType(procData[0].key);
      } catch (err) {
        setError("Error al cargar datos de Supabase.");
        console.error("Supabase fetch error:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
    // eslint-disable-next-line
  }, []);

  useEffect(() => {
    if (isRunning && materials.length > 0 && forgeTypes.length > 0) {
      const interval = setInterval(() => {
        setTime((prev) => prev + simulationSpeed);
        const material = materials.find((m) => m.key === materialType);
        const forge = forgeTypes.find((f) => f.key === forgeType);
        if (!material || !forge) return;
        const tempFactor = Math.max(
          0,
          Math.min(
            1,
            (temperature - material.temp_min) /
              (material.temp_max - material.temp_min)
          )
        );
        const effectiveForce =
          (force * tempFactor * forge.efficiency) / material.resistance;
        setDeformation((prev) => {
          const newDeformation = prev + effectiveForce * simulationSpeed * 0.01;
          return Math.min(newDeformation, 100);
        });
        setTemperature((prev) => Math.max(20, prev - simulationSpeed * 2));
        setHistory((prev) => [
          ...prev,
          {
            time: time + simulationSpeed,
            deformation: Math.min(
              deformation + effectiveForce * simulationSpeed * 0.01,
              100
            ),
            temperature: Math.max(20, temperature - simulationSpeed * 2),
          },
        ]);
      }, 100);
      return () => clearInterval(interval);
    }
  }, [
    isRunning,
    temperature,
    force,
    materialType,
    forgeType,
    simulationSpeed,
    materials,
    forgeTypes,
    time,
    deformation,
  ]);

  const resetSimulation = () => {
    setIsRunning(false);
    setTime(0);
    setDeformation(0);
    setTemperature(1200);
  };

  const getTemperatureColor = () => {
    if (temperature > 1000) return "text-red-500";
    if (temperature > 700) return "text-orange-500";
    if (temperature > 400) return "text-yellow-500";
    return "text-blue-500";
  };

  const getDeformationStage = () => {
    if (deformation < 20) return { stage: "Inicio", color: "bg-blue-500" };
    if (deformation < 50)
      return { stage: "Deformación", color: "bg-yellow-500" };
    if (deformation < 80)
      return { stage: "Conformado", color: "bg-orange-500" };
    return { stage: "Terminado", color: "bg-green-500" };
  };

  const deformationStage = getDeformationStage();

  // Warnings
  const material = materials.find((m) => m.key === materialType);
  let warning = "";
  if (material) {
    if (temperature < material.temp_min)
      warning = "¡Temperatura demasiado baja para forjar este material!";
    if (temperature > material.temp_max)
      warning = "¡Temperatura demasiado alta para forjar este material!";
    if (force < 200) warning = "¡Fuerza aplicada muy baja!";
    if (force > 1800) warning = "¡Fuerza aplicada muy alta!";
  }

  // At the end of simulation, show summary analysis
  let summary = "";
  if (deformation >= 100) {
    if (
      material &&
      temperature >= material.temp_min &&
      temperature <= material.temp_max &&
      force >= 200 &&
      force <= 1800
    ) {
      summary = "Forjado exitoso: Parámetros dentro de rango recomendado.";
    } else {
      summary =
        "Forjado completado, pero algunos parámetros estaban fuera de rango recomendado.";
    }
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <span className="text-lg text-gray-600 dark:text-gray-300">
          Cargando datos de forjado...
        </span>
      </div>
    );
  }
  if (error) {
    return (
      <div className="flex justify-center items-center h-64">
        <span className="text-lg text-red-600 dark:text-red-400">{error}</span>
      </div>
    );
  }
  if (materials.length === 0 || forgeTypes.length === 0) {
    return (
      <div className="flex justify-center items-center h-64">
        <span className="text-lg text-gray-600 dark:text-gray-300">
          No hay materiales o procesos disponibles.
        </span>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-red-600 to-orange-600 p-6 text-white">
          <div className="flex items-center space-x-3">
            <span className="text-3xl">🔨</span>
            <div>
              <h2 className="text-2xl font-bold">Simulador de Forjado</h2>
              <p className="opacity-90">
                Experimenta con diferentes parámetros de forjado
              </p>
            </div>
          </div>
        </div>

        <div className="p-8">
          <div className="grid lg:grid-cols-3 gap-8">
            {/* Control Panel */}
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Material
                </label>
                <select
                  value={materialType}
                  onChange={(e) => setMaterialType(e.target.value)}
                  disabled={isRunning}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-red-500"
                >
                  {materials.map((material) => (
                    <option key={material.key} value={material.key}>
                      {material.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Tipo de Forjado
                </label>
                <select
                  value={forgeType}
                  onChange={(e) => setForgeType(e.target.value)}
                  disabled={isRunning}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-red-500"
                >
                  {forgeTypes.map((forge) => (
                    <option key={forge.key} value={forge.key}>
                      {forge.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Temperatura Inicial (°C): {temperature}
                </label>
                <input
                  type="range"
                  min="20"
                  max="1500"
                  value={temperature}
                  onChange={(e) => setTemperature(Number(e.target.value))}
                  disabled={isRunning}
                  className="w-full"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Fuerza Aplicada (kN): {force}
                </label>
                <input
                  type="range"
                  min="100"
                  max="2000"
                  value={force}
                  onChange={(e) => setForce(Number(e.target.value))}
                  disabled={isRunning}
                  className="w-full"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Velocidad de Simulación: {simulationSpeed}x
                </label>
                <input
                  type="range"
                  min="0.5"
                  max="3"
                  step="0.5"
                  value={simulationSpeed}
                  onChange={(e) => setSimulationSpeed(Number(e.target.value))}
                  className="w-full"
                />
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={() => setIsRunning(!isRunning)}
                  className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-colors ${
                    isRunning
                      ? "bg-red-600 hover:bg-red-700 text-white"
                      : "bg-green-600 hover:bg-green-700 text-white"
                  }`}
                >
                  {isRunning ? <Pause size={18} /> : <Play size={18} />}
                  <span>{isRunning ? "Pausar" : "Iniciar"}</span>
                </button>

                <button
                  onClick={resetSimulation}
                  className="flex items-center space-x-2 px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
                >
                  <RotateCcw size={18} />
                  <span>Reiniciar</span>
                </button>
              </div>
            </div>

            {/* Simulation Display */}
            <div className="lg:col-span-2 space-y-6">
              {/* Status Indicators */}
              <div className="grid grid-cols-3 gap-4">
                <div className="bg-gradient-to-r from-red-50 to-red-100 dark:from-red-900/20 dark:to-red-800/20 p-4 rounded-lg">
                  <div className="flex items-center space-x-2 mb-2">
                    <Thermometer size={20} className={getTemperatureColor()} />
                    <span className="font-medium">Temperatura</span>
                  </div>
                  <div
                    className={`text-2xl font-bold ${getTemperatureColor()}`}
                  >
                    {Math.round(temperature)}°C
                  </div>
                </div>

                <div className="bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 p-4 rounded-lg">
                  <div className="flex items-center space-x-2 mb-2">
                    <Gauge size={20} className="text-blue-600" />
                    <span className="font-medium">Fuerza</span>
                  </div>
                  <div className="text-2xl font-bold text-blue-600">
                    {force} kN
                  </div>
                </div>

                <div className="bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 p-4 rounded-lg">
                  <div className="flex items-center space-x-2 mb-2">
                    <Timer size={20} className="text-green-600" />
                    <span className="font-medium">Tiempo</span>
                  </div>
                  <div className="text-2xl font-bold text-green-600">
                    {Math.round(time)}s
                  </div>
                </div>
              </div>

              {/* Visual Simulation */}
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-8 text-center">
                <h3 className="text-lg font-semibold mb-6">
                  Estado del Material
                </h3>

                {/* Material Representation */}
                <div
                  className="relative mx-auto mb-6"
                  style={{ width: "200px", height: "120px" }}
                >
                  <div
                    className={`absolute top-0 left-1/2 transform -translate-x-1/2 ${deformationStage.color} rounded-lg transition-all duration-500`}
                    style={{
                      width: `${80 + deformation * 0.4}px`,
                      height: `${120 - deformation * 0.8}px`,
                      borderRadius: `${Math.max(8, 20 - deformation * 0.2)}px`,
                    }}
                  ></div>

                  {/* Force arrows */}
                  {isRunning && (
                    <>
                      <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-8">
                        <div className="text-2xl animate-bounce">⬇️</div>
                      </div>
                      <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-8">
                        <div className="text-2xl animate-bounce">⬆️</div>
                      </div>
                    </>
                  )}
                </div>

                <div className="space-y-2">
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    Estado:{" "}
                    <span className="font-medium">
                      {deformationStage.stage}
                    </span>
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    Deformación:{" "}
                    <span className="font-medium">
                      {Math.round(deformation)}%
                    </span>
                  </div>
                </div>

                {/* Progress Bar */}
                <div className="mt-4">
                  <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-3">
                    <div
                      className={`${deformationStage.color} h-3 rounded-full transition-all duration-300`}
                      style={{ width: `${deformation}%` }}
                    ></div>
                  </div>
                </div>
              </div>

              {/* Process Information */}
              <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
                <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">
                  📊 Información del Proceso
                </h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Material:
                    </span>
                    <span className="font-medium ml-2">
                      {materials.find((m) => m.key === materialType)?.name}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Proceso:
                    </span>
                    <span className="font-medium ml-2">
                      {forgeTypes.find((f) => f.key === forgeType)?.name}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Eficiencia:
                    </span>
                    <span className="font-medium ml-2">
                      {Math.round(
                        (forgeTypes.find((f) => f.key === forgeType)
                          ?.efficiency ?? 0) * 100
                      )}
                      %
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Uniformidad:
                    </span>
                    <span className="font-medium ml-2">
                      {Math.round(
                        (forgeTypes.find((f) => f.key === forgeType)
                          ?.uniformity ?? 0) * 100
                      )}
                      %
                    </span>
                  </div>
                </div>
              </div>

              {/* History Chart */}
              <div className="bg-white dark:bg-gray-800 rounded-lg p-6">
                <h4 className="font-semibold text-gray-800 dark:text-gray-200 mb-4">
                  📈 Historial de Deformación y Temperatura
                </h4>
                <div className="grid grid-cols-1 gap-4">
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                    <Line
                      data={{
                        labels: history.map((h) => `${h.time}s`),
                        datasets: [
                          {
                            label: "Deformación (%)",
                            data: history.map((h) => h.deformation),
                            borderColor: "rgb(34, 197, 94)",
                            backgroundColor: "rgba(34, 197, 94, 0.2)",
                            fill: true,
                          },
                          {
                            label: "Temperatura (°C)",
                            data: history.map((h) => h.temperature),
                            borderColor: "rgb(239, 68, 68)",
                            backgroundColor: "rgba(239, 68, 68, 0.2)",
                            fill: true,
                          },
                        ],
                      }}
                      options={{
                        responsive: true,
                        plugins: {
                          legend: {
                            position: "top" as const,
                          },
                          tooltip: {
                            mode: "index" as const,
                            intersect: false,
                          },
                        },
                        interaction: {
                          mode: "index" as const,
                          intersect: false,
                        },
                        scales: {
                          x: {
                            title: {
                              display: true,
                              text: "Tiempo (s)",
                              color: "rgb(156, 163, 175)",
                              font: {
                                family: "Inter",
                                size: 14,
                                weight: "medium",
                              },
                            },
                            y: {
                              title: {
                                display: true,
                                text: "Valor",
                                color: "rgb(156, 163, 175)",
                                font: {
                                  family: "Inter",
                                  size: 14,
                                  weight: "medium",
                                },
                              },
                              min: 0,
                              max: 100,
                              ticks: {
                                stepSize: 10,
                                color: "rgb(156, 163, 175)",
                                font: {
                                  family: "Inter",
                                  size: 12,
                                },
                              },
                            },
                          },
                        },
                      }}
                    />
                  </div>
                </div>
              </div>

              {/* Real-time Graphs */}
              <div className="bg-white dark:bg-gray-800 rounded-lg p-4 mb-6">
                <h4 className="font-semibold mb-2">
                  Gráfica de Deformación y Temperatura
                </h4>
                <svg width="100%" height="120" viewBox="0 0 400 120">
                  {/* Deformation Line */}
                  <polyline
                    fill="none"
                    stroke="#f59e42"
                    strokeWidth="2"
                    points={history
                      .map((h, i) => `${i * 4},${120 - h.deformation}`)
                      .join(" ")}
                  />
                  {/* Temperature Line */}
                  <polyline
                    fill="none"
                    stroke="#3b82f6"
                    strokeWidth="2"
                    points={history
                      .map((h, i) => `${i * 4},${120 - h.temperature / 15}`)
                      .join(" ")}
                  />
                </svg>
                <div className="flex justify-between text-xs mt-1">
                  <span className="text-orange-600">Deformación</span>
                  <span className="text-blue-600">Temperatura</span>
                </div>
              </div>
            </div>
          </div>

          {warning && (
            <div
              className="mb-4 p-3 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-800 rounded"
              role="alert"
            >
              <strong>Advertencia:</strong> {warning}
            </div>
          )}

          {summary && (
            <div
              className="mt-4 p-4 bg-green-100 border-l-4 border-green-500 text-green-800 rounded"
              role="status"
            >
              <strong>Resumen:</strong> {summary}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ForjadoSimulator;
</file>

<file path="src/components/tools/MaterialesCalculator.tsx">
import React, { useEffect, useState } from "react";
import {
  Atom,
  Calculator,
  Info,
  RotateCcw,
  // Zap, // Removed unused import
} from "lucide-react";
import { supabase } from "../../supabaseClient";

interface Material {
  id: string;
  name: string;
  category: string;
  density?: number;
  young_modulus?: number;
  yield_strength?: number;
  ultimate_strength?: number;
  elongation?: number;
  hardness?: number;
  thermal_conductivity?: number;
  specific_heat?: number;
  melting_point?: number;
  cost?: number;
  applications?: string[];
  advantages?: string[];
  disadvantages?: string[];
}

const MaterialesCalculator: React.FC = () => {
  const [materials, setMaterials] = useState<Material[]>([]);
  const [selectedMaterial1, setSelectedMaterial1] =
    useState<string>("acero-1045");
  const [selectedMaterial2, setSelectedMaterial2] =
    useState<string>("aluminio-6061");
  const [volume, setVolume] = useState<number>(1000); // cm³
  const [temperature, setTemperature] = useState<number>(20); // °C
  const [loadType, setLoadType] = useState<string>("tension");

  useEffect(() => {
    const fetchMaterials = async () => {
      console.log("Connecting to Supabase to fetch materials...");
      const { data, error } = await supabase.from("materials").select("*");
      if (error) {
        console.error("Supabase materials fetch error:", error);
      } else {
        console.log("Supabase connection OK. Materials:", data);
        setMaterials(data || []);
      }
    };
    fetchMaterials();
  }, []);

  const material1 = materials.find(
    (material) => material.id === selectedMaterial1
  );
  const material2 = materials.find(
    (material) => material.id === selectedMaterial2
  );

  // Prevent calculations if materials are not loaded yet
  if (!material1 || !material2) {
    return (
      <div className="max-w-7xl mx-auto p-6">
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden p-8 text-center">
          <p className="text-lg text-gray-700 dark:text-gray-200">
            {materials.length === 0
              ? "Cargando materiales desde la base de datos..."
              : "Selecciona materiales válidos para comparar."}
          </p>
        </div>
      </div>
    );
  }

  const calculateWeight = (material: Material) => {
    return (volume * (material.density || 0)) / 1000; // kg
  };

  const calculateCost = (material: Material) => {
    return calculateWeight(material) * (material.cost || 0);
  };

  const getStrengthToWeightRatio = (material: Material) => {
    return (material.ultimate_strength || 0) / (material.density || 1);
  };

  const getCostEffectiveness = (material: Material) => {
    return (material.ultimate_strength || 0) / (material.cost || 1);
  };

  const getThermalExpansion = (material: Material, deltaT: number) => {
    // Approximate thermal expansion coefficients (per °C)
    const expansionCoeffs: Record<string, number> = {
      "acero-1045": 11.7e-6,
      "acero-304": 17.3e-6,
      "aluminio-6061": 23.6e-6,
      "titanio-gr2": 8.6e-6,
      "cobre-c101": 16.5e-6,
      "magnesio-az31": 26.0e-6,
    };

    const coeff = expansionCoeffs[selectedMaterial1] || 12e-6;
    return coeff * deltaT * 1000; // mm/m
  };

  const resetCalculator = () => {
    setSelectedMaterial1("acero-1045");
    setSelectedMaterial2("aluminio-6061");
    setVolume(1000);
    setTemperature(20);
    setLoadType("tension");
  };

  const getComparisonColor = (
    value1: number,
    value2: number,
    higherIsBetter: boolean = true
  ) => {
    if (higherIsBetter) {
      return value1 > value2
        ? "text-green-600"
        : value1 < value2
        ? "text-red-600"
        : "text-gray-600";
    } else {
      return value1 < value2
        ? "text-green-600"
        : value1 > value2
        ? "text-red-600"
        : "text-gray-600";
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-4 sm:p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg">
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 p-6 rounded-t-xl">
        <div className="flex items-center space-x-3">
          <Atom size={28} className="text-white" />
          <div>
            <h2 className="text-2xl font-bold text-white">
              Calculadora de Propiedades de Materiales
            </h2>
            <p className="opacity-90 text-white">
              Análisis comparativo y selección de materiales de ingeniería
            </p>
          </div>
        </div>
      </div>

      <div className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Material selection and input form */}
          <div className="col-span-1">
            <div className="space-y-6">
              <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
                <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-4">
                  🔧 Parámetros de Análisis
                </h3>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Material Principal
                    </label>
                    <select
                      value={selectedMaterial1}
                      onChange={(e) => setSelectedMaterial1(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                    >
                      {materials.map((material) => (
                        <option key={material.id} value={material.id}>
                          {material.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Material de Comparación
                    </label>
                    <select
                      value={selectedMaterial2}
                      onChange={(e) => setSelectedMaterial2(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                    >
                      {materials.map((material) => (
                        <option key={material.id} value={material.id}>
                          {material.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Volumen de la Pieza (cm³): {volume}
                    </label>
                    <input
                      type="range"
                      min="100"
                      max="10000"
                      value={volume}
                      onChange={(e) => setVolume(Number(e.target.value))}
                      className="w-full"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Temperatura de Trabajo (°C): {temperature}
                    </label>
                    <input
                      type="range"
                      min="-50"
                      max="500"
                      value={temperature}
                      onChange={(e) => setTemperature(Number(e.target.value))}
                      className="w-full"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Tipo de Carga
                    </label>
                    <select
                      value={loadType}
                      onChange={(e) => setLoadType(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="tension">Tracción</option>
                      <option value="compression">Compresión</option>
                      <option value="bending">Flexión</option>
                      <option value="torsion">Torsión</option>
                      <option value="fatigue">Fatiga</option>
                    </select>
                  </div>
                </div>
              </div>

              <button
                onClick={resetCalculator}
                className="flex items-center space-x-2 px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                <RotateCcw size={18} />
                <span>Reiniciar</span>
              </button>
            </div>
          </div>

          {/* Results/Comparison */}
          <div className="col-span-1">
            {/* Material Comparison */}
            <div className="bg-white dark:bg-gray-700 rounded-lg p-6 border border-purple-200 dark:border-purple-700">
              <h3 className="text-lg font-semibold text-purple-800 dark:text-purple-200 mb-4 flex items-center">
                <Calculator size={20} className="mr-2" />
                Comparación de Materiales
              </h3>

              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h4 className="font-medium text-gray-900 dark:text-white">
                    {material1?.name}
                  </h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Peso:</span>
                      <span
                        className={`font-bold ${getComparisonColor(
                          calculateWeight(material2),
                          calculateWeight(material1),
                          false
                        )}`}
                      >
                        {calculateWeight(material1).toFixed(2)} kg
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Costo:</span>
                      <span
                        className={`font-bold ${getComparisonColor(
                          calculateCost(material2),
                          calculateCost(material1),
                          false
                        )}`}
                      >
                        ${calculateCost(material1).toFixed(2)}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Resistencia/Peso:</span>
                      <span
                        className={`font-bold ${getComparisonColor(
                          getStrengthToWeightRatio(material1),
                          getStrengthToWeightRatio(material2)
                        )}`}
                      >
                        {getStrengthToWeightRatio(material1).toFixed(1)}{" "}
                        MPa/(g/cm³)
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Costo-Efectividad:</span>
                      <span
                        className={`font-bold ${getComparisonColor(
                          getCostEffectiveness(material1),
                          getCostEffectiveness(material2)
                        )}`}
                      >
                        {getCostEffectiveness(material1).toFixed(1)} MPa/USD
                      </span>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <h4 className="font-medium text-gray-900 dark:text-white">
                    {material2?.name}
                  </h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Peso:</span>
                      <span
                        className={`font-bold ${getComparisonColor(
                          calculateWeight(material1),
                          calculateWeight(material2),
                          false
                        )}`}
                      >
                        {calculateWeight(material2).toFixed(2)} kg
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Costo:</span>
                      <span
                        className={`font-bold ${getComparisonColor(
                          calculateCost(material1),
                          calculateCost(material2),
                          false
                        )}`}
                      >
                        ${calculateCost(material2).toFixed(2)}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Resistencia/Peso:</span>
                      <span
                        className={`font-bold ${getComparisonColor(
                          getStrengthToWeightRatio(material2),
                          getStrengthToWeightRatio(material1)
                        )}`}
                      >
                        {getStrengthToWeightRatio(material2).toFixed(1)}{" "}
                        MPa/(g/cm³)
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Costo-Efectividad:</span>
                      <span
                        className={`font-bold ${getComparisonColor(
                          getCostEffectiveness(material2),
                          getCostEffectiveness(material1)
                        )}`}
                      >
                        {getCostEffectiveness(material2).toFixed(1)} MPa/USD
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Detailed Properties */}
            <div className="bg-white dark:bg-gray-700 rounded-lg p-6 border border-blue-200 dark:border-blue-700">
              <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-4 flex items-center">
                <Info size={20} className="mr-2" />
                Propiedades Detalladas - {material1?.name}
              </h3>

              <div className="grid md:grid-cols-3 gap-4">
                <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
                  <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">
                    Mecánicas
                  </h4>
                  <div className="space-y-1 text-sm">
                    <div>Módulo de Young: {material1?.young_modulus} GPa</div>
                    <div>Límite Elástico: {material1?.yield_strength} MPa</div>
                    <div>
                      Resistencia Última: {material1?.ultimate_strength} MPa
                    </div>
                    <div>Elongación: {material1?.elongation}%</div>
                    <div>Dureza: {material1?.hardness} HB</div>
                  </div>
                </div>

                <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
                  <h4 className="font-semibold text-green-800 dark:text-green-200 mb-2">
                    Térmicas
                  </h4>
                  <div className="space-y-1 text-sm">
                    <div>
                      Conductividad: {material1?.thermal_conductivity} W/m·K
                    </div>
                    <div>
                      Calor Específico: {material1?.specific_heat} J/kg·K
                    </div>
                    <div>Punto de Fusión: {material1?.melting_point}°C</div>
                    <div>
                      Expansión Térmica:{" "}
                      {getThermalExpansion(material1, temperature - 20).toFixed(
                        3
                      )}{" "}
                      mm/m
                    </div>
                  </div>
                </div>

                <div className="bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg">
                  <h4 className="font-semibold text-orange-800 dark:text-orange-200 mb-2">
                    Físicas
                  </h4>
                  <div className="space-y-1 text-sm">
                    <div>Densidad: {material1?.density} g/cm³</div>
                    <div>Categoría: {material1?.category}</div>
                    <div>Costo: ${material1?.cost}/kg</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Applications and Recommendations */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-green-50 dark:bg-green-900/20 p-6 rounded-lg">
                <h4 className="font-semibold text-green-800 dark:text-green-200 mb-3">
                  ✅ Aplicaciones Típicas
                </h4>
                <ul className="text-sm text-green-700 dark:text-green-300 space-y-1">
                  {material1?.applications?.map((app, index) => (
                    <li key={index}>• {app}</li>
                  ))}
                </ul>
              </div>

              <div className="bg-yellow-50 dark:bg-yellow-900/20 p-6 rounded-lg">
                <h4 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-3">
                  💡 Recomendación de Selección
                </h4>
                <div className="text-sm text-yellow-700 dark:text-yellow-300">
                  {getStrengthToWeightRatio(material1) >
                  getStrengthToWeightRatio(material2) ? (
                    <p>
                      ✅ {material1?.name} ofrece mejor relación
                      resistencia/peso
                    </p>
                  ) : (
                    <p>
                      ⚠️ {material2?.name} tiene mejor relación resistencia/peso
                    </p>
                  )}
                  {getCostEffectiveness(material1) >
                  getCostEffectiveness(material2) ? (
                    <p>✅ {material1?.name} es más costo-efectivo</p>
                  ) : (
                    <p>⚠️ {material2?.name} es más costo-efectivo</p>
                  )}
                  <p className="mt-2 font-medium">
                    Para {loadType}: {material1?.name}{" "}
                    {(material1?.ultimate_strength ?? 0) >
                    (material2?.ultimate_strength ?? 0)
                      ? "recomendado"
                      : "evaluar alternativas"}
                  </p>
                </div>
              </div>
            </div>

            {/* Advantages and Disadvantages */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
                <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">
                  👍 Ventajas
                </h4>
                <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                  {material1?.advantages?.map((advantage, index) => (
                    <li key={index}>• {advantage}</li>
                  ))}
                </ul>
              </div>

              <div className="bg-red-50 dark:bg-red-900/20 p-6 rounded-lg">
                <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">
                  👎 Desventajas
                </h4>
                <ul className="text-sm text-red-700 dark:text-red-300 space-y-1">
                  {material1?.disadvantages?.map((disadvantage, index) => (
                    <li key={index}>• {disadvantage}</li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MaterialesCalculator;
</file>

<file path="src/contexts/AchievementsContext.tsx">
import React, { createContext, useState, useEffect, ReactNode } from "react";

export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  unlocked: boolean;
  date?: string;
}

interface AchievementsContextType {
  achievements: Achievement[];
  setAchievements: React.Dispatch<React.SetStateAction<Achievement[]>>;
  unlockAchievements: (
    quizId: string,
    score: number,
    userProgress: Record<string, { completed: boolean }>
  ) => void;
}

const ACHIEVEMENTS_STORAGE_KEY = "achievements";

const defaultAchievements: Achievement[] = [
  {
    id: "first-quiz",
    title: "¡Primer Quiz!",
    description: "Completaste tu primer evaluación.",
    icon: "🎉",
    unlocked: false,
  },
  {
    id: "all-quizzes",
    title: "Maestro de Módulos",
    description: "Completaste todos los módulos de evaluación.",
    icon: "🏆",
    unlocked: false,
  },
  {
    id: "high-score",
    title: "Puntuación de Élite",
    description: "Obtuviste 90% o más en cualquier evaluación.",
    icon: "⭐",
    unlocked: false,
  },
  {
    id: "perfect-score",
    title: "¡Perfección!",
    description: "Obtuviste 100% en cualquier evaluación.",
    icon: "💯",
    unlocked: false,
  },
];

const AchievementsContext = createContext<AchievementsContextType | undefined>(
  undefined
);

const getInitialAchievements = () => {
  const stored = localStorage.getItem(ACHIEVEMENTS_STORAGE_KEY);
  if (stored) {
    try {
      return JSON.parse(stored);
    } catch {
      // fallback to default if corrupted
      return defaultAchievements;
    }
  }
  return defaultAchievements;
};

export const AchievementsProvider = ({ children }: { children: ReactNode }) => {
  const [achievements, setAchievements] = useState<Achievement[]>(
    getInitialAchievements()
  );

  const unlockAchievements = (
    quizId: string,
    score: number,
    userProgress: Record<string, { completed: boolean }>
  ) => {
    setAchievements((prev) => {
      let updated = [...prev];
      const now = new Date().toLocaleDateString();
      if (
        !updated.find((a) => a.id === "first-quiz")?.unlocked &&
        Object.values(userProgress).filter((q) => q.completed).length === 0
      ) {
        updated = updated.map((a) =>
          a.id === "first-quiz" ? { ...a, unlocked: true, date: now } : a
        );
      }
      if (
        !updated.find((a) => a.id === "all-quizzes")?.unlocked &&
        Object.values({ ...userProgress, [quizId]: { completed: true } }).every(
          (q) => q.completed
        )
      ) {
        updated = updated.map((a) =>
          a.id === "all-quizzes" ? { ...a, unlocked: true, date: now } : a
        );
      }
      if (
        !updated.find((a) => a.id === "high-score")?.unlocked &&
        score >= 90
      ) {
        updated = updated.map((a) =>
          a.id === "high-score" ? { ...a, unlocked: true, date: now } : a
        );
      }
      if (
        !updated.find((a) => a.id === "perfect-score")?.unlocked &&
        score === 100
      ) {
        updated = updated.map((a) =>
          a.id === "perfect-score" ? { ...a, unlocked: true, date: now } : a
        );
      }
      return updated;
    });
  };

  useEffect(() => {
    localStorage.setItem(
      ACHIEVEMENTS_STORAGE_KEY,
      JSON.stringify(achievements)
    );
  }, [achievements]);

  return (
    <AchievementsContext.Provider
      value={{ achievements, setAchievements, unlockAchievements }}
    >
      {children}
    </AchievementsContext.Provider>
  );
};

export { AchievementsContext };
</file>

<file path="src/contexts/TasksContext.tsx">
import React, { createContext, useState, useEffect, ReactNode } from "react";

export interface StudyTask {
  id: string;
  title: string;
  description: string;
  dueDate: string;
  priority: "high" | "medium" | "low";
  completed: boolean;
  estimatedTime: number;
  category: string;
  difficulty: "easy" | "medium" | "hard";
  points: number;
  relatedQuizId?: string;
}

interface TasksContextType {
  studyTasks: StudyTask[];
  setStudyTasks: React.Dispatch<React.SetStateAction<StudyTask[]>>;
}

const TASKS_STORAGE_KEY = "studyTasks";

const TasksContext = createContext<TasksContextType | undefined>(undefined);

const getInitialTasks = () => {
  const stored = localStorage.getItem(TASKS_STORAGE_KEY);
  if (stored) {
    try {
      return JSON.parse(stored);
    } catch {
      // fallback to default if corrupted
    }
  }
  return [];
};

export const TasksProvider = ({ children }: { children: ReactNode }) => {
  const [studyTasks, setStudyTasks] = useState<StudyTask[]>(getInitialTasks());

  useEffect(() => {
    localStorage.setItem(TASKS_STORAGE_KEY, JSON.stringify(studyTasks));
  }, [studyTasks]);

  return (
    <TasksContext.Provider value={{ studyTasks, setStudyTasks }}>
      {children}
    </TasksContext.Provider>
  );
};

export { TasksContext };
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --accent-color: #3b82f6;
}

.accent-gradient {
  background-image: linear-gradient(90deg, var(--accent-color), #a78bfa);
}

.accent-border {
  border-color: var(--accent-color);
}

@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
.animate-fade-in-up {
  animation: fade-in-up 0.4s ease;
}

html {
  scroll-behavior: smooth;
}

:focus {
  outline: 2px solid #6366f1; /* Tailwind indigo-500 */
  outline-offset: 2px;
  transition: outline 0.2s;
}
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  darkMode: "class", // Enable class-based dark mode
  theme: {
    extend: {
      animation: {
        "bounce-slow": "bounce 3s infinite",
        "pulse-slow": "pulse 3s infinite",
      },
      backdropBlur: {
        xs: "2px",
      },
      screens: {
        xs: "375px",
        "3xl": "1920px",
      },
    },
  },
  plugins: [],
};
</file>

<file path="src/main.tsx">
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import App from "./App.tsx";
import "./index.css";
import { QuizProgressProvider } from "./contexts/QuizProgressContext";
import { TasksProvider } from "./contexts/TasksContext";
import { AchievementsProvider } from "./contexts/AchievementsContext";
import { ActivityLogProvider } from "./contexts/ActivityLogContext";
import { BrowserRouter } from "react-router-dom";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <BrowserRouter>
      <QuizProgressProvider>
        <TasksProvider>
          <AchievementsProvider>
            <ActivityLogProvider>
              <App />
            </ActivityLogProvider>
          </AchievementsProvider>
        </TasksProvider>
      </QuizProgressProvider>
    </BrowserRouter>
  </StrictMode>
);
</file>

<file path="PLANNING.md">
# Project Planning: Centro de Aprendizaje

## Fase 1: MVP (Producto Mínimo Viable) - (4-6 Semanas)

### Objetivos Fase 1

- SPA funcional con React Router y navegación fluida.
- Al menos una herramienta interactiva funcional (`SoldaduraQuiz` o `VelocidadCorteCalculator`).
- Estructura básica: Home, Header, Footer, Recursos.
- Implementación de ThemeContext (claro/oscuro).
- Configuración inicial del proyecto (Vite, TS, Tailwind, ESLint).

### Tareas Clave Fase 1

- Bocetos UI/UX y wireframes.
- Componentes reutilizables (`Header`, `Footer`).
- Implementar la primera herramienta interactiva.
- Página de inicio (`Home`).
- Pruebas unitarias básicas.
- Documentación inicial.

## Fase 2: Expansión de Funcionalidades y Contenido (6-8 Semanas)

### Objetivos Fase 2

- Herramientas interactivas restantes (`ForjadoSimulator`, calculadoras, quizzes).
- `StudyPlanner` y `ProgressTracker` básicos.
- Recursos con contenido real.
- Mejoras UI/UX y responsividad.

### Tareas Clave Fase 2

- Completar herramientas en `src/components/tools/`.
- Desarrollar secciones: `EvaluationSection`, `ProcessSection`, `ToolsSection`.
- Integrar `StudyPlanner` y `ProgressTracker`.
- Expandir contenido y refinar diseño.
- Pruebas unitarias e integración.
- Documentar componentes.

## Fase 3: Refinamiento, Pruebas y Despliegue (4-6 Semanas)

### Objetivos Fase 3

- Persistencia de datos (`StudyPlanner`, `ProgressTracker`).
- Pruebas exhaustivas (unitarias, integración, E2E).
- Optimización de rendimiento y accesibilidad.
- Preparar despliegue (CI/CD, build optimizada).

### Tareas Clave Fase 3

- Backend opcional para progreso de usuario.
- Lógica de persistencia y refinamiento de flujos.
- Cobertura de pruebas y usabilidad.
- Optimización de assets y code splitting.
- Documentación final y guía de usuario.
- Despliegue en Vercel/Netlify/GitHub Pages.

## Milestones y Release Plan

- [x] MVP SPA: Navegación React Router, Home, una herramienta, theme.
- [x] Herramientas completas: Todas las calculadoras, simuladores y quizzes migrados a Supabase y consumidos dinámicamente.
- [x] Persistencia y pruebas: Refactor de contextos, robusto manejo de errores/loading, tipado estricto, documentación y migración Supabase.
- [x] Comparar materiales y análisis avanzado en calculadoras (PDF, copiar, selección múltiple, animaciones, accesibilidad).
- [ ] QA final, pulido UI, y pruebas E2E.
- [ ] Mejorar documentación de usuario y API.
- [ ] Historial de cálculos, notas de usuario, modo experto y compartir resultados en calculadoras.
- [x] Rediseño y modernización de la Home para mayor atractivo visual y coherencia.

## Riesgos & Mitigaciones

- **Complejidad de SPA**: Modularizar componentes y usar hooks/contextos.
- **Accesibilidad**: Revisar a11y en cada release.
- **Performance**: Lazy loading y optimización de assets.

## Post-Lanzamiento

- Recopilar feedback y corregir bugs.
- Añadir contenido y nuevas funcionalidades según demanda.
- Mantener dependencias y documentación al día.

## Roadmap

- [x] Migrate all material data to Supabase and refactor MaterialesCalculator.
- [x] Review and migrate all other hardcoded data (tools, gear applications, quizzes, resources, etc.) to Supabase. Refactor frontend para consumir todo dinámicamente.
- [x] Expand dynamic content and improve error handling (robusto loading/error UI, fallback, validación de tipos, logging Supabase).
- [x] Eliminar uso de `any` y forzar tipado estricto en todo el código.
- [x] Documentar migración y SQL para renombrar columnas en Supabase (`service_factor`).
- [x] Rediseño y modernización de la Home para mayor atractivo visual y coherencia.
- [ ] QA final, pulido UI, y pruebas E2E.
- [ ] Mejorar documentación de usuario y API.
</file>

<file path="src/components/Footer.tsx">
import React from "react";
import { Mail, Phone, MapPin, Github, Linkedin, Twitter } from "lucide-react";
import { Link } from "react-router-dom";

const Footer: React.FC = () => {
  return (
    <footer className="bg-gray-900 text-white mt-16">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-8">
          {/* Brand Section */}
          <div className="col-span-1 flex flex-col h-full">
            <div className="flex items-center space-x-3 mb-4">
              <div className="bg-gradient-to-r from-blue-600 to-blue-700 p-2 rounded-lg">
                <span className="text-2xl">⚙️</span>
              </div>
              <div>
                <h3 className="text-lg font-bold">Centro de Aprendizaje</h3>
                <p className="text-sm text-gray-400">Ingeniería Mecánica</p>
              </div>
            </div>
            <p className="text-gray-400 text-sm leading-relaxed">
              Plataforma educativa especializada en procesos de fabricación
              industrial con herramientas interactivas y recursos técnicos
              actualizados.
            </p>
          </div>

          {/* Navigation Links */}
          <div className="col-span-1">
            <h4 className="text-lg font-semibold mb-4">Navegación</h4>
            <ul className="space-y-2">
              <li>
                <Link
                  to="/procesos"
                  className="text-gray-400 hover:text-white transition-colors block w-full"
                >
                  Procesos de Fabricación
                </Link>
              </li>
              <li>
                <Link
                  to="/herramientas"
                  className="text-gray-400 hover:text-white transition-colors block w-full"
                >
                  Herramientas Interactivas
                </Link>
              </li>
              <li>
                <Link
                  to="/recursos"
                  className="text-gray-400 hover:text-white transition-colors block w-full"
                >
                  Recursos Multimedia
                </Link>
              </li>
              <li>
                <Link
                  to="/evaluacion"
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  Centro de Evaluación
                </Link>
              </li>
            </ul>
          </div>

          {/* Resources */}
          <div className="col-span-1">
            <h4 className="text-lg font-semibold mb-4">Recursos</h4>
            <ul className="space-y-2">
              <li>
                <a
                  href="#"
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  Manual Técnico
                </a>
              </li>
              <li>
                <a
                  href="#"
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  Tablas de Referencia
                </a>
              </li>
              <li>
                <a
                  href="#"
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  Galería de Imágenes
                </a>
              </li>
              <li>
                <a
                  href="#"
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  Videos Educativos
                </a>
              </li>
            </ul>
          </div>

          {/* Contact Info */}
          <div className="col-span-1">
            <h4 className="text-lg font-semibold mb-4">Contacto</h4>
            <div className="space-y-3">
              <div className="flex items-center space-x-3">
                <Mail size={16} className="text-blue-400" />
                <a
                  href="mailto:info@ingenieriacentro.edu.ve"
                  aria-label="Enviar correo a info@ingenieriacentro.edu.ve"
                  className="text-gray-400 text-sm hover:text-white transition-colors"
                >
                  info@ingenieriacentro.edu.ve
                </a>
              </div>
              <div className="flex items-center space-x-3">
                <Phone size={16} className="text-blue-400" />
                <a
                  href="tel:+582861234567"
                  aria-label="Llamar al +58 286 123 4567"
                  className="text-gray-400 text-sm hover:text-white transition-colors"
                >
                  +58 286 123 4567
                </a>
              </div>
              <div className="flex items-center space-x-3">
                <MapPin size={16} className="text-blue-400" />
                <span className="text-gray-400 text-sm">
                  Ciudad Guayana, Venezuela
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Footer bottom bar for copyright/socials, responsive flex */}
        <div className="mt-8 flex flex-col sm:flex-row items-center justify-between gap-4 border-t border-gray-800 pt-6 text-sm text-gray-400">
          <span>
            &copy; {new Date().getFullYear()} Centro de Aprendizaje. Todos los
            derechos reservados.
          </span>
          <div className="flex space-x-4">
            {/* Social icons, add aria-labels for a11y */}
            <a
              href="https://github.com/yourprofile"
              target="_blank"
              rel="noopener noreferrer"
              aria-label="GitHub"
              className="hover:text-white"
            >
              <Github size={20} />
            </a>
            <a
              href="https://linkedin.com/in/yourprofile"
              target="_blank"
              rel="noopener noreferrer"
              aria-label="LinkedIn"
              className="hover:text-white"
            >
              <Linkedin size={20} />
            </a>
            <a
              href="https://twitter.com/yourprofile"
              target="_blank"
              rel="noopener noreferrer"
              aria-label="Twitter"
              className="hover:text-white"
            >
              <Twitter size={20} />
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
</file>

<file path="src/components/QuizCard.tsx">
import React from "react";
import { CheckCircle, Users, Book } from "lucide-react";
import { motion } from "framer-motion";

export interface Quiz {
  id: string | number;
  title: string;
  description: string;
  // Optional/fallback fields for compatibility with old UI
  questions?: number;
  duration?: number;
  difficulty?: string;
  category?: string;
  icon?: string;
  color?: string;
  completed?: number;
  avgScore?: number;
  available?: boolean;
  process_id?: number;
  created_at?: string;
}

interface QuizCardProps {
  quiz: Quiz;
  onStart: (id: string) => void;
  userProgress?: { completed: boolean; bestScore?: number };
}

const getDifficultyIcon = (difficulty: string) => {
  switch (difficulty) {
    case "Básico":
      return "🟢";
    case "Intermedio":
      return "🟡";
    case "Avanzado":
      return "🔴";
    default:
      return "⚪";
  }
};

const QuizCard: React.FC<QuizCardProps> = ({ quiz, onStart, userProgress }) => {
  const handleStart = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
    if (quiz.available ?? true) onStart(quiz.id.toString());
  };

  // Fallbacks for missing fields
  const icon = quiz.icon || "📘";
  const color = quiz.color || "from-blue-400 to-blue-600";
  const difficulty = quiz.difficulty || "Básico";
  const category = quiz.category || "General";
  const questions = quiz.questions ?? 10;
  const completed = quiz.completed ?? 0;
  const avgScore = quiz.avgScore ?? 0;
  const available = quiz.available ?? true;

  return (
    <motion.div
      whileHover={{ scale: 1.03, boxShadow: "0 8px 32px rgba(0,0,0,0.12)" }}
      className="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700 overflow-hidden group focus-within:ring-2 focus-within:ring-blue-400 w-full max-w-md mx-auto mb-6 sm:mb-0"
      tabIndex={0}
      role="region"
      aria-label={`Quiz: ${quiz.title}`}
    >
      <div
        className={`bg-gradient-to-r ${color} p-6 text-white relative overflow-hidden flex flex-col sm:flex-row items-center sm:items-start gap-4`}
      >
        <div className="absolute top-0 right-0 w-20 h-20 bg-white/10 rounded-full -mr-10 -mt-10"></div>
        <div className="flex items-center justify-between mb-4 relative z-10 w-full">
          <span className="text-4xl" aria-hidden>
            {icon}
          </span>
          <div className="flex items-center space-x-2">
            <span className="text-xs">{getDifficultyIcon(difficulty)}</span>
            <span className="px-3 py-1 rounded-full text-xs font-medium bg-white/20 text-white">
              {difficulty}
            </span>
          </div>
        </div>
        <h3 className="text-xl font-bold mb-2 relative z-10 text-center sm:text-left">
          {quiz.title}
        </h3>
        <p className="text-sm opacity-90 relative z-10 text-center sm:text-left">
          {category}
        </p>
      </div>
      <div className="p-6">
        <p className="text-gray-600 dark:text-gray-300 mb-6 leading-relaxed">
          {quiz.description}
        </p>
        <div className="space-y-3 mb-6">
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center space-x-2 text-gray-600 dark:text-gray-400">
              <Book size={16} />
              <span>Preguntas</span>
            </div>
            <span className="font-medium">{questions}</span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center space-x-2 text-gray-600 dark:text-gray-400">
              <Users size={16} />
              <span>Completado</span>
            </div>
            <span className="font-medium">{completed.toLocaleString()}</span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center space-x-2 text-gray-600 dark:text-gray-400">
              <span>Puntuación promedio</span>
            </div>
            <span className="font-medium">{avgScore}%</span>
          </div>
          {userProgress && (
            <div className="flex items-center justify-between text-xs text-blue-600 dark:text-blue-400">
              <span>Tu mejor puntaje:</span>
              <span>{userProgress.bestScore ?? "-"}%</span>
            </div>
          )}
        </div>
        <button
          onClick={handleStart}
          disabled={!available}
          className={`w-full py-3 rounded-lg font-medium transition-all focus:outline-none focus:ring-2 focus:ring-blue-400 ${
            available
              ? `bg-gradient-to-r ${color} text-white hover:shadow-lg transform hover:scale-105`
              : "bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed"
          }`}
          aria-label={
            available
              ? `Comenzar evaluación de ${quiz.title}`
              : `${quiz.title} próximamente`
          }
          role="button"
        >
          {available ? "Comenzar Evaluación" : "Próximamente"}
        </button>
        {available && (
          <div className="mt-3 flex items-center justify-center space-x-2 text-green-600 dark:text-green-400 text-sm">
            <CheckCircle size={16} />
            <span>Disponible ahora</span>
          </div>
        )}
      </div>
    </motion.div>
  );
};

export default QuizCard;
</file>

<file path="src/components/tools/MecanizadoSimulator.tsx">
import React, { useState, useEffect } from "react";
import { Play, Pause, RotateCcw, Settings, Gauge, Timer } from "lucide-react";
import { supabase } from "../../supabaseClient";

interface MachiningMaterial {
  id: string;
  name: string;
  hardness: number;
  machinability: number;
}

interface ToolMaterial {
  id: string;
  name: string;
  durability: number;
  speed: number;
}

interface MachineType {
  id: string;
  name: string;
  efficiency: number;
  precision: number;
}

const MecanizadoSimulator: React.FC = () => {
  // --- Dynamic Data State ---
  const [materials, setMaterials] = useState<MachiningMaterial[]>([]);
  const [toolMaterials, setToolMaterials] = useState<ToolMaterial[]>([]);
  const [machineTypes, setMachineTypes] = useState<MachineType[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // --- UI State ---
  const [isRunning, setIsRunning] = useState(false);
  const [spindleSpeed, setSpindleSpeed] = useState(1000);
  const [feedRate, setFeedRate] = useState(100);
  const [depthOfCut, setDepthOfCut] = useState(1);
  const [time, setTime] = useState(0);
  const [materialRemoved, setMaterialRemoved] = useState(0);
  const [toolWear, setToolWear] = useState(0);
  const [machineType, setMachineType] = useState<string>("");
  const [material, setMaterial] = useState<string>("");
  const [toolMaterial, setToolMaterial] = useState<string>("");

  // --- Fetch all data from Supabase ---
  useEffect(() => {
    const fetchAll = async () => {
      setLoading(true);
      setError(null);
      try {
        console.log("Connecting to Supabase to fetch machining materials...");
        const { data: matData, error: matError } = await supabase
          .from("materials")
          .select("*");
        if (matError) {
          console.error("Supabase materials fetch error:", matError);
          throw new Error(
            "No se pudieron cargar los materiales de pieza. Detalle: " +
              matError.message
          );
        }
        setMaterials(matData || []);
        console.log("Materials:", matData);

        console.log("Connecting to Supabase to fetch tool materials...");
        const { data: toolData, error: toolError } = await supabase
          .from("machining_tools")
          .select("*");
        if (toolError)
          throw new Error(
            "No se pudieron cargar los materiales de herramienta. Detalle: " +
              toolError.message
          );
        setToolMaterials(toolData || []);
        console.log("Tool Materials:", toolData);

        console.log("Connecting to Supabase to fetch machine types...");
        const { data: machineData, error: machineError } = await supabase
          .from("machining_machines")
          .select("*");
        if (machineError)
          throw new Error("No se pudieron cargar los tipos de máquina.");
        setMachineTypes(machineData || []);
        console.log("Machine Types:", machineData);

        // Set defaults if not already set
        setMaterial((prev) => prev || (matData && matData[0]?.id) || "");
        setToolMaterial((prev) => prev || (toolData && toolData[0]?.id) || "");
        setMachineType(
          (prev) => prev || (machineData && machineData[0]?.id) || ""
        );
      } catch (err) {
        if (err instanceof Error) {
          setError(err.message || "Error al cargar los datos de Supabase.");
          console.error("Supabase fetch error:", err);
        } else {
          setError("Error desconocido al cargar los datos de Supabase.");
          console.error("Supabase fetch error:", err);
        }
      }
      setLoading(false);
    };
    fetchAll();
  }, []);

  // --- Input validation helpers ---
  const validateInputs = () => {
    if (spindleSpeed < 100 || spindleSpeed > 5000)
      return "La velocidad del husillo debe estar entre 100 y 5000 RPM.";
    if (feedRate < 10 || feedRate > 1000)
      return "El avance debe estar entre 10 y 1000 mm/min.";
    if (depthOfCut < 0.1 || depthOfCut > 5)
      return "La profundidad de corte debe estar entre 0.1 y 5 mm.";
    if (!materials.find((m) => m.id === material))
      return "Selecciona un material de pieza válido.";
    if (!toolMaterials.find((t) => t.id === toolMaterial))
      return "Selecciona un material de herramienta válido.";
    if (!machineTypes.find((m) => m.id === machineType))
      return "Selecciona un tipo de máquina válido.";
    return null;
  };
  const inputError = validateInputs();

  // --- Simulation Logic ---
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isRunning) {
      interval = setInterval(() => {
        setTime((prev) => prev + 1);
        const materialData = materials.find((m) => m.id === material);
        const toolData = toolMaterials.find((t) => t.id === toolMaterial);
        if (!materialData || !toolData) return;
        // Calculate material removal rate (cm³ per 0.1s)
        const mrr = (spindleSpeed * feedRate * depthOfCut) / 600000; // cm³ per 0.1s
        setMaterialRemoved((prev) => Math.max(prev + mrr, 0));
        // Calculate tool wear
        const wearRate =
          ((spindleSpeed / 10000) * materialData.hardness) /
          toolData.durability;
        setToolWear((prev) => Math.min(Math.max(prev + wearRate, 0), 100));
      }, 100);
    }
    return () => clearInterval(interval);
  }, [
    isRunning,
    spindleSpeed,
    feedRate,
    depthOfCut,
    material,
    toolMaterial,
    machineType,
    materials,
    toolMaterials,
    machineTypes,
  ]);

  const resetSimulation = () => {
    setIsRunning(false);
    setTime(0);
    setMaterialRemoved(0);
    setToolWear(0);
  };

  const getToolWearColor = () => {
    if (toolWear < 30) return "text-green-500";
    if (toolWear < 70) return "text-yellow-500";
    return "text-red-500";
  };

  const getEfficiencyRating = () => {
    const materialData = materials.find((m) => m.id === material);
    const toolData = toolMaterials.find((t) => t.id === toolMaterial);
    if (!materialData || !toolData)
      return { rating: "-", color: "text-gray-400" };
    const efficiency = materialData.machinability * toolData.speed;
    if (efficiency > 1.2)
      return { rating: "Excelente", color: "text-green-600" };
    if (efficiency > 0.8) return { rating: "Buena", color: "text-blue-600" };
    if (efficiency > 0.5)
      return { rating: "Regular", color: "text-yellow-600" };
    return { rating: "Deficiente", color: "text-red-600" };
  };

  const efficiency = getEfficiencyRating();

  if (loading) return <div>Cargando datos de mecanizado...</div>;
  if (error) return <div>{error}</div>;
  if (!materials.length || !toolMaterials.length || !machineTypes.length)
    return <div>No hay datos de mecanizado disponibles.</div>;

  return (
    <div className="max-w-2xl mx-auto p-4 sm:p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg">
      <div className="mb-4 p-3 bg-yellow-100 text-yellow-800 rounded-lg border border-yellow-300 text-center text-sm">
        ⚠️ Este simulador es solo para fines educativos y de referencia. Los
        resultados no deben usarse para procesos industriales reales sin
        validación profesional.
      </div>
      {inputError && (
        <div className="mb-4 p-4 bg-red-100 text-red-700 rounded-lg border border-red-300 text-center">
          {inputError}
        </div>
      )}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-6 text-white">
          <div className="flex items-center space-x-3">
            <span className="text-3xl">🔧</span>
            <div>
              <h2 className="text-2xl font-bold">
                Simulador de Mecanizado CNC
              </h2>
              <p className="opacity-90">
                Optimiza parámetros de corte para diferentes materiales
              </p>
            </div>
          </div>
        </div>

        <div className="p-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* Control Panel */}
            <div className="col-span-1 space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Tipo de Máquina
                </label>
                <select
                  value={machineType}
                  onChange={(e) => setMachineType(e.target.value)}
                  disabled={isRunning}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                >
                  {machineTypes.map((machine) => (
                    <option key={machine.id} value={machine.id}>
                      {machine.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Material de la Pieza
                </label>
                <select
                  value={material}
                  onChange={(e) => setMaterial(e.target.value)}
                  disabled={isRunning}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                >
                  {materials.map((mat) => (
                    <option key={mat.id} value={mat.id}>
                      {mat.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Material de Herramienta
                </label>
                <select
                  value={toolMaterial}
                  onChange={(e) => setToolMaterial(e.target.value)}
                  disabled={isRunning}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                >
                  {toolMaterials.map((tool) => (
                    <option key={tool.id} value={tool.id}>
                      {tool.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Velocidad del Husillo (RPM): {spindleSpeed}
                </label>
                <input
                  type="range"
                  min="100"
                  max="5000"
                  value={spindleSpeed}
                  onChange={(e) => setSpindleSpeed(Number(e.target.value))}
                  disabled={isRunning}
                  className="w-full"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Avance (mm/min): {feedRate}
                </label>
                <input
                  type="range"
                  min="10"
                  max="1000"
                  value={feedRate}
                  onChange={(e) => setFeedRate(Number(e.target.value))}
                  disabled={isRunning}
                  className="w-full"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Profundidad de Corte (mm): {depthOfCut}
                </label>
                <input
                  type="range"
                  min="0.1"
                  max="5"
                  step="0.1"
                  value={depthOfCut}
                  onChange={(e) => setDepthOfCut(Number(e.target.value))}
                  disabled={isRunning}
                  className="w-full"
                />
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={() => setIsRunning(!isRunning)}
                  className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-colors ${
                    isRunning
                      ? "bg-red-600 hover:bg-red-700 text-white"
                      : "bg-green-600 hover:bg-green-700 text-white"
                  }`}
                >
                  {isRunning ? <Pause size={18} /> : <Play size={18} />}
                  <span>{isRunning ? "Pausar" : "Iniciar"}</span>
                </button>

                <button
                  onClick={resetSimulation}
                  className="flex items-center space-x-2 px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
                >
                  <RotateCcw size={18} />
                  <span>Reiniciar</span>
                </button>
              </div>
            </div>

            {/* Simulation Display */}
            <div className="col-span-1 lg:col-span-2 space-y-6">
              {/* Status Indicators */}
              <div className="grid grid-cols-3 gap-4">
                <div className="bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 p-4 rounded-lg">
                  <div className="flex items-center space-x-2 mb-2">
                    <Gauge size={20} className="text-blue-600" />
                    <span className="font-medium">Velocidad</span>
                  </div>
                  <div className="text-2xl font-bold text-blue-600">
                    {spindleSpeed} RPM
                  </div>
                </div>

                <div className="bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 p-4 rounded-lg">
                  <div className="flex items-center space-x-2 mb-2">
                    <Timer size={20} className="text-green-600" />
                    <span className="font-medium">Tiempo</span>
                  </div>
                  <div className="text-2xl font-bold text-green-600">
                    {Math.round(time / 10)}s
                  </div>
                </div>

                <div className="bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 p-4 rounded-lg">
                  <div className="flex items-center space-x-2 mb-2">
                    <Settings size={20} className={getToolWearColor()} />
                    <span className="font-medium">Desgaste</span>
                  </div>
                  <div className={`text-2xl font-bold ${getToolWearColor()}`}>
                    {Math.round(toolWear)}%
                  </div>
                </div>
              </div>

              {/* Visual Simulation */}
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-8">
                <h3 className="text-lg font-semibold mb-6 text-center">
                  Estado del Proceso
                </h3>

                {/* Machine Representation */}
                <div
                  className="relative mx-auto mb-6"
                  style={{ width: "300px", height: "200px" }}
                >
                  <div className="absolute inset-0 bg-gray-300 dark:bg-gray-600 rounded-lg">
                    {/* Machine Base */}
                  </div>

                  {/* Workpiece */}
                  <div
                    className="absolute top-1/2 left-1/4 transform -translate-y-1/2 bg-blue-500 rounded transition-all duration-300"
                    style={{
                      width: `${Math.max(60 - materialRemoved * 2, 20)}px`,
                      height: "40px",
                    }}
                  ></div>

                  {/* Tool */}
                  <div className="absolute top-1/2 right-1/4 transform -translate-y-1/2">
                    <div
                      className={`w-8 h-2 ${
                        toolWear > 70 ? "bg-red-500" : "bg-yellow-500"
                      } transition-colors`}
                    ></div>
                  </div>

                  {/* Cutting Animation */}
                  {isRunning && (
                    <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                      <div className="text-2xl animate-spin">⚡</div>
                    </div>
                  )}
                </div>

                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Material Removido:
                    </span>
                    <span className="font-medium ml-2">
                      {materialRemoved.toFixed(2)} cm³
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Eficiencia:
                    </span>
                    <span className={`font-medium ml-2 ${efficiency.color}`}>
                      {efficiency.rating}
                    </span>
                  </div>
                </div>
              </div>

              {/* Process Information */}
              <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
                <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">
                  📊 Parámetros del Proceso
                </h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Máquina:
                    </span>
                    <span className="font-medium ml-2">
                      {machineTypes.find((m) => m.id === machineType)?.name}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Material:
                    </span>
                    <span className="font-medium ml-2">
                      {materials.find((m) => m.id === material)?.name}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Herramienta:
                    </span>
                    <span className="font-medium ml-2">
                      {toolMaterials.find((t) => t.id === toolMaterial)?.name}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Velocidad de Corte:
                    </span>
                    <span className="font-medium ml-2">
                      {Math.round((spindleSpeed * Math.PI * 50) / 1000)} m/min
                    </span>
                  </div>
                </div>
              </div>

              {/* Recommendations */}
              <div className="bg-yellow-50 dark:bg-yellow-900/20 p-6 rounded-lg">
                <h4 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-3">
                  💡 Recomendaciones
                </h4>
                <ul className="text-sm text-yellow-700 dark:text-yellow-300 space-y-1">
                  {toolWear > 80 && (
                    <li>• ⚠️ Cambiar herramienta - desgaste crítico</li>
                  )}
                  {spindleSpeed > 3000 && material === "acero" && (
                    <li>• Reducir velocidad para acero</li>
                  )}
                  {feedRate < 50 && (
                    <li>• Aumentar avance para mayor productividad</li>
                  )}
                  <li>• Usar refrigeración adecuada para el material</li>
                  <li>• Verificar rigidez del sistema máquina-pieza</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MecanizadoSimulator;
</file>

<file path="src/components/tools/SoldaduraQuiz.tsx">
import React, { useState, useEffect } from "react";
import { Award, CheckCircle, XCircle, RotateCcw, Zap } from "lucide-react";
import { supabase } from "../../supabaseClient";

const LOCAL_STORAGE_KEY = "quizUserProgress";

interface Quiz {
  id: string;
  title: string;
  description: string;
}

interface Question {
  id: string;
  question_text: string;
  options: string[];
  correct_option: number;
  explanation: string;
  level: string; // Added level field
}

const LEVELS = ["Básico", "Intermedio", "Avanzado"];

const SoldaduraQuiz: React.FC<{ onComplete?: (score: number) => void }> = ({
  onComplete,
}) => {
  const [quiz, setQuiz] = useState<Quiz | null>(null);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [answers, setAnswers] = useState<number[]>([]);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [selectedLevel, setSelectedLevel] = useState<string>(LEVELS[0]);

  useEffect(() => {
    const fetchQuiz = async () => {
      setLoading(true);
      setError(null);
      try {
        // Fetch quiz metadata
        const { data: quizData, error: quizError } = await supabase
          .from("quizzes")
          .select("id, title, description")
          .eq("title", "Quiz de Soldadura")
          .single();
        if (quizError || !quizData) {
          setError("No se pudo cargar el quiz de soldadura.");
          console.error("Supabase quiz fetch error:", quizError);
          setLoading(false);
          return;
        }
        setQuiz(quizData);
        // Fetch questions for this quiz and selected level
        const { data: questionsData, error: questionsError } = await supabase
          .from("quiz_questions")
          .select(
            "id, question_text, options, correct_option, explanation, level"
          )
          .eq("quiz_id", quizData.id)
          .eq("level", selectedLevel)
          .order("created_at", { ascending: true });
        if (questionsError || !questionsData) {
          setError("No se pudieron cargar las preguntas del quiz.");
          console.error("Supabase questions fetch error:", questionsError);
          setLoading(false);
          return;
        }
        // Parse options from JSON if needed
        const parsedQuestions = questionsData.map(
          (q): Question => ({
            ...q,
            options: Array.isArray(q.options)
              ? q.options
              : JSON.parse(q.options as string),
          })
        );
        setQuestions(parsedQuestions);
        setCurrentQuestion(0);
        setSelectedAnswer(null);
        setShowResult(false);
        setScore(0);
        setAnswers([]);
        setQuizCompleted(false);
        console.log("Supabase connectivity: Quiz and questions loaded.");
      } catch (err) {
        setError("Error de conexión con Supabase.");
        console.error("Supabase connectivity error:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchQuiz();
  }, [selectedLevel]);

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
  };

  const handleNextQuestion = () => {
    if (selectedAnswer === null) return;
    const newAnswers = [...answers, selectedAnswer];
    setAnswers(newAnswers);
    if (selectedAnswer === questions[currentQuestion].correct_option) {
      setScore(score + 1);
    }
    setShowResult(true);
    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
        setSelectedAnswer(null);
        setShowResult(false);
      } else {
        setQuizCompleted(true);
      }
    }, 2000);
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setScore(0);
    setAnswers([]);
    setQuizCompleted(false);
  };

  const getScoreColor = () => {
    const percentage = (score / questions.length) * 100;
    if (percentage >= 80) return "text-green-600";
    if (percentage >= 60) return "text-yellow-600";
    return "text-red-600";
  };

  const getScoreMessage = () => {
    const percentage = (score / questions.length) * 100;
    if (percentage >= 80) return "¡Excelente conocimiento en soldadura! 🏆";
    if (percentage >= 60) return "Buen desempeño, sigue estudiando 📚";
    return "Necesitas repasar los conceptos básicos 📖";
  };

  useEffect(() => {
    if (quizCompleted) {
      // Save best score and completion to localStorage
      const stored = localStorage.getItem(LOCAL_STORAGE_KEY);
      let progress = {};
      try {
        progress = stored ? JSON.parse(stored) : {};
      } catch {
        progress = {};
      }
      const prev = progress[quiz?.id || "soldadura"] || {};
      const bestScore = prev.bestScore
        ? Math.max(prev.bestScore, score * 20)
        : score * 20;
      progress[quiz?.id || "soldadura"] = { completed: true, bestScore };
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(progress));
      if (onComplete) onComplete(score * 20);
    }
    // eslint-disable-next-line
  }, [quizCompleted]);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <span className="text-lg text-gray-600 dark:text-gray-300">
          Cargando quiz...
        </span>
      </div>
    );
  }
  if (error) {
    return (
      <div className="flex justify-center items-center h-64">
        <span className="text-lg text-red-600 dark:text-red-400">{error}</span>
      </div>
    );
  }
  if (!quiz || questions.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <div className="mb-4">
          <label htmlFor="level-select" className="mr-2 font-semibold">
            Nivel:
          </label>
          <select
            id="level-select"
            value={selectedLevel}
            onChange={(e) => setSelectedLevel(e.target.value)}
            className="border rounded px-2 py-1"
          >
            {LEVELS.map((level) => (
              <option key={level} value={level}>
                {level}
              </option>
            ))}
          </select>
        </div>
        <span className="text-lg text-gray-600 dark:text-gray-300">
          No hay preguntas disponibles para este nivel.
        </span>
      </div>
    );
  }

  if (quizCompleted) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 text-center">
          <div className="text-6xl mb-6">🎉</div>
          <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
            ¡Quiz Completado!
          </h2>
          <div className={`text-6xl font-bold mb-4 ${getScoreColor()}`}>
            {score}/{questions.length}
          </div>
          <p className="text-xl text-gray-600 dark:text-gray-300 mb-6">
            {getScoreMessage()}
          </p>
          <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6 mb-8">
            <h3 className="text-lg font-semibold mb-4">
              Resumen de Respuestas:
            </h3>
            <div className="space-y-3">
              {questions.map((question, index) => (
                <div
                  key={question.id}
                  className="flex items-center justify-between p-3 bg-white dark:bg-gray-600 rounded-lg"
                >
                  <span className="text-sm">Pregunta {index + 1}</span>
                  {answers[index] === question.correct_option ? (
                    <CheckCircle className="text-green-500" size={20} />
                  ) : (
                    <XCircle className="text-red-500" size={20} />
                  )}
                </div>
              ))}
            </div>
          </div>
          <button
            onClick={resetQuiz}
            className="flex items-center space-x-2 mx-auto px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <RotateCcw size={20} />
            <span>Reiniciar Quiz</span>
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-lg w-full mx-auto p-4 sm:p-8 bg-white dark:bg-gray-900 rounded-xl shadow-lg">
      <div className="flex justify-end mb-4">
        <label htmlFor="level-select" className="mr-2 font-semibold">
          Nivel:
        </label>
        <select
          id="level-select"
          value={selectedLevel}
          onChange={(e) => setSelectedLevel(e.target.value)}
          className="border rounded px-2 py-1"
        >
          {LEVELS.map((level) => (
            <option key={level} value={level}>
              {level}
            </option>
          ))}
        </select>
      </div>
      <div className="bg-gradient-to-r from-orange-600 to-red-600 p-6 text-white rounded-t-xl">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Zap size={28} />
            <div>
              <h2 className="text-2xl font-bold">{quiz.title}</h2>
              <p className="opacity-90">{quiz.description}</p>
            </div>
          </div>
          <div className="text-right">
            <div className="text-sm opacity-90">Pregunta</div>
            <div className="text-xl font-bold">
              {currentQuestion + 1}/{questions.length}
            </div>
          </div>
        </div>
      </div>
      <div className="p-8">
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-2">
            <span>Progreso</span>
            <span>
              {Math.round(((currentQuestion + 1) / questions.length) * 100)}%
            </span>
          </div>
          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
            <div
              className="bg-gradient-to-r from-orange-500 to-red-500 h-2 rounded-full transition-all duration-300"
              style={{
                width: `${((currentQuestion + 1) / questions.length) * 100}%`,
              }}
            ></div>
          </div>
        </div>
        {/* Question */}
        <div className="mb-8">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-6">
            {questions[currentQuestion].question_text}
          </h3>
          <div className="space-y-3">
            {questions[currentQuestion].options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleAnswerSelect(index)}
                disabled={showResult}
                className={`w-full text-left p-4 rounded-lg border-2 transition-all ${
                  showResult
                    ? index === questions[currentQuestion].correct_option
                      ? "border-green-500 bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300"
                      : index === selectedAnswer &&
                        selectedAnswer !==
                          questions[currentQuestion].correct_option
                      ? "border-red-500 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-300"
                      : "border-gray-200 dark:border-gray-600"
                    : selectedAnswer === index
                    ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                    : "border-gray-200 dark:border-gray-600 hover:border-blue-300 hover:bg-blue-50 dark:hover:bg-blue-900/10"
                }`}
              >
                <div className="flex items-center space-x-3">
                  <div
                    className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                      showResult &&
                      index === questions[currentQuestion].correct_option
                        ? "border-green-500 bg-green-500"
                        : showResult &&
                          index === selectedAnswer &&
                          selectedAnswer !==
                            questions[currentQuestion].correct_option
                        ? "border-red-500 bg-red-500"
                        : selectedAnswer === index
                        ? "border-blue-500 bg-blue-500"
                        : "border-gray-300"
                    }`}
                  >
                    {showResult &&
                      index === questions[currentQuestion].correct_option && (
                        <CheckCircle size={16} className="text-white" />
                      )}
                    {showResult &&
                      index === selectedAnswer &&
                      selectedAnswer !==
                        questions[currentQuestion].correct_option && (
                        <XCircle size={16} className="text-white" />
                      )}
                  </div>
                  <span className="font-medium">{option}</span>
                </div>
              </button>
            ))}
          </div>
        </div>
        {/* Explanation */}
        {showResult && (
          <div className="mb-6 p-6 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
            <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">
              💡 Explicación
            </h4>
            <p className="text-blue-700 dark:text-blue-300">
              {questions[currentQuestion].explanation}
            </p>
          </div>
        )}
        {/* Action Button */}
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-2 text-gray-600 dark:text-gray-400">
            <Award size={20} />
            <span>
              Puntuación actual: {score}/
              {currentQuestion + (showResult ? 1 : 0)}
            </span>
          </div>
          <button
            onClick={handleNextQuestion}
            disabled={selectedAnswer === null || showResult}
            className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {currentQuestion === questions.length - 1
              ? "Finalizar Quiz"
              : "Siguiente Pregunta"}
          </button>
        </div>
      </div>
    </div>
  );
};

export default SoldaduraQuiz;
</file>

<file path="src/components/tools/VelocidadCorteCalculator.tsx">
import React, { useState, useEffect } from "react";
import { Calculator, Info, RotateCcw } from "lucide-react";
import { supabase } from "../../supabaseClient";
import { Line } from "react-chartjs-2";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import {
  Chart,
  LineElement,
  PointElement,
  LineController,
  CategoryScale,
  LinearScale,
  Title,
  Tooltip,
  Legend,
  Filler,
} from "chart.js";

Chart.register(
  LineElement,
  PointElement,
  LineController,
  CategoryScale,
  LinearScale,
  Title,
  Tooltip,
  Legend,
  Filler
);

interface CuttingMaterial {
  id: string;
  name: string;
  key: string;
  recommended_speed: number;
  color: string;
}

const VelocidadCorteCalculator: React.FC = () => {
  const [diameter, setDiameter] = useState<number>(50);
  const [cutSpeed, setCutSpeed] = useState<number>(100);
  const [rpm, setRpm] = useState<number>(0);
  const [feedRate, setFeedRate] = useState<number>(0.1);
  const [material, setMaterial] = useState<string>("");
  const [materials, setMaterials] = useState<CuttingMaterial[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Animation state for results
  const [copied, setCopied] = useState(false);
  const [showCheck, setShowCheck] = useState(false);
  const chartRef = React.useRef<HTMLDivElement>(null);
  const [selectedMaterials, setSelectedMaterials] = useState<string[]>([]);

  useEffect(() => {
    const fetchMaterials = async () => {
      setLoading(true);
      setError(null);
      try {
        const { data, error } = await supabase
          .from("cutting_materials")
          .select("*");
        if (error || !data) throw error;
        setMaterials(data);
        if (data.length > 0) {
          setMaterial(data[0].key);
          setCutSpeed(data[0].recommended_speed);
        }
      } catch {
        setError("Error al cargar materiales desde Supabase.");
      } finally {
        setLoading(false);
      }
    };
    fetchMaterials();
  }, []);

  useEffect(() => {
    if (showCheck) {
      const timer = setTimeout(() => setShowCheck(false), 1200);
      return () => clearTimeout(timer);
    }
  }, [showCheck]);

  useEffect(() => {
    if (diameter > 0 && cutSpeed > 0) {
      const calculatedRPM = (cutSpeed * 1000) / (Math.PI * diameter);
      setRpm(Math.round(calculatedRPM));
      setShowCheck(true);
    } else {
      setRpm(0);
    }
  }, [diameter, cutSpeed]);

  useEffect(() => {
    const mat = materials.find((m) => m.key === material);
    if (mat) setCutSpeed(mat.recommended_speed);
  }, [material, materials]);

  // Add selected material to comparison if not already present
  useEffect(() => {
    if (material && !selectedMaterials.includes(material)) {
      setSelectedMaterials((prev) => [...prev, material]);
    }
    // eslint-disable-next-line
  }, [material]);

  const handleCopyResults = () => {
    const mat = materials.find((m) => m.key === material);
    const text = `Material: ${
      mat?.name
    }\nDiámetro: ${diameter} mm\nVelocidad de Corte: ${cutSpeed} m/min\nRPM: ${rpm}\nAvance: ${feedRate} mm/rev\nAvance por Minuto: ${(
      feedRate * rpm
    ).toFixed(1)} mm/min`;
    navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 1200);
  };

  const handleDownloadPDF = async () => {
    if (!chartRef.current) return;
    const canvas = await html2canvas(chartRef.current);
    const imgData = canvas.toDataURL("image/png");
    const pdf = new jsPDF({ orientation: "landscape" });
    pdf.addImage(imgData, "PNG", 10, 10, 270, 80);
    pdf.save("velocidades_corte_analisis.pdf");
  };

  const resetCalculator = () => {
    const mat = materials.find((m) => m.key === material);
    setDiameter(50);
    setCutSpeed(mat ? mat.recommended_speed : 100);
    setRpm(0);
    setFeedRate(0.1);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <span className="text-lg text-gray-600 dark:text-gray-300">
          Cargando materiales de corte...
        </span>
      </div>
    );
  }
  if (error) {
    return (
      <div className="flex justify-center items-center h-64">
        <span className="text-lg text-red-600 dark:text-red-400">{error}</span>
      </div>
    );
  }
  if (materials.length === 0) {
    return (
      <div className="flex justify-center items-center h-64">
        <span className="text-lg text-gray-600 dark:text-gray-300">
          No hay materiales disponibles.
        </span>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-blue-600 to-blue-700 p-6 text-white">
          <div className="flex items-center space-x-3">
            <Calculator size={28} />
            <div>
              <h2 className="text-2xl font-bold">
                Calculadora de Velocidad de Corte
              </h2>
              <p className="opacity-90">
                Optimiza tus parámetros de mecanizado
              </p>
            </div>
          </div>
        </div>
        <div className="p-8">
          <div className="grid md:grid-cols-2 gap-8">
            {/* Input Panel */}
            <div className="space-y-6">
              <div>
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
                  htmlFor="material-select"
                >
                  Material de la Pieza
                </label>
                <select
                  id="material-select"
                  aria-label="Seleccionar material de la pieza"
                  value={material}
                  onChange={(e) => setMaterial(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 transition-shadow duration-200 hover:shadow-md"
                >
                  {materials.map((mat) => (
                    <option key={mat.key} value={mat.key}>
                      {mat.name}
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
                  htmlFor="diameter-input"
                >
                  Diámetro de la Pieza (mm)
                </label>
                <input
                  id="diameter-input"
                  aria-label="Diámetro de la pieza en milímetros"
                  type="number"
                  value={diameter}
                  onChange={(e) => setDiameter(Number(e.target.value))}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 transition-shadow duration-200 hover:shadow-md"
                  min="1"
                  max="1000"
                />
              </div>
              <div>
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
                  htmlFor="speed-input"
                >
                  Velocidad de Corte (m/min)
                </label>
                <input
                  id="speed-input"
                  aria-label="Velocidad de corte en metros por minuto"
                  type="number"
                  value={cutSpeed}
                  onChange={(e) => setCutSpeed(Number(e.target.value))}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 transition-shadow duration-200 hover:shadow-md"
                  min="1"
                  max="1000"
                />
              </div>
              <div>
                <label
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
                  htmlFor="feedrate-input"
                >
                  Avance (mm/rev)
                </label>
                <input
                  id="feedrate-input"
                  aria-label="Avance en milímetros por revolución"
                  type="number"
                  value={feedRate}
                  onChange={(e) => setFeedRate(Number(e.target.value))}
                  step="0.01"
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 transition-shadow duration-200 hover:shadow-md"
                  min="0.01"
                  max="5"
                />
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={resetCalculator}
                  className="flex items-center space-x-2 px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 focus:ring-2 focus:ring-gray-400 transition-colors"
                  aria-label="Reiniciar calculadora"
                >
                  <RotateCcw size={18} />
                  <span>Reiniciar</span>
                </button>
                <button
                  onClick={handleCopyResults}
                  className="flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-400 transition-colors relative"
                  aria-label="Copiar resultados"
                >
                  {copied ? (
                    <span className="animate-bounce text-green-400 font-bold">
                      ✓
                    </span>
                  ) : (
                    <span>Copiar Resultados</span>
                  )}
                </button>
              </div>
            </div>
            {/* Results Panel */}
            <div className="space-y-6">
              <div className="bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 p-6 rounded-xl relative">
                <h3 className="text-lg font-semibold text-green-800 dark:text-green-200 mb-4 flex items-center">
                  🎯 Resultados del Cálculo
                  <span className="ml-2 inline-block px-2 py-1 text-xs rounded bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-200 font-semibold animate-fade-in">
                    {materials.find((m) => m.key === material)?.name}
                  </span>
                  {showCheck && (
                    <span className="ml-2 text-green-500 animate-ping">✓</span>
                  )}
                </h3>
                <div className="space-y-4">
                  <div className="flex justify-between items-center p-4 bg-white dark:bg-gray-700 rounded-lg">
                    <span className="font-medium">Velocidad del Husillo:</span>
                    <span
                      className="text-2xl font-bold text-blue-600"
                      aria-live="polite"
                    >
                      {rpm} RPM
                    </span>
                  </div>
                  <div className="flex justify-between items-center p-4 bg-white dark:bg-gray-700 rounded-lg">
                    <span className="font-medium">Avance por Minuto:</span>
                    <span
                      className="text-xl font-bold text-green-600"
                      aria-live="polite"
                    >
                      {(feedRate * rpm).toFixed(1)} mm/min
                    </span>
                  </div>
                </div>
              </div>
              <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-xl">
                <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-4">
                  📝 Fórmulas Utilizadas
                </h3>
                <div className="space-y-3 text-sm">
                  <div className="bg-white dark:bg-gray-700 p-3 rounded-lg">
                    <strong>RPM = (Vc × 1000) / (π × D)</strong>
                    <p className="text-gray-600 dark:text-gray-300 mt-1">
                      Donde: Vc = Velocidad de corte, D = Diámetro
                    </p>
                  </div>
                  <div className="bg-white dark:bg-gray-700 p-3 rounded-lg">
                    <strong>Vf = f × RPM</strong>
                    <p className="text-gray-600 dark:text-gray-300 mt-1">
                      Donde: f = Avance por revolución
                    </p>
                  </div>
                </div>
              </div>
              <div className="bg-yellow-50 dark:bg-yellow-900/20 p-6 rounded-xl">
                <div className="flex items-start space-x-3">
                  <Info size={20} className="text-yellow-600 mt-1" />
                  <div>
                    <h4 className="font-semibold text-yellow-800 dark:text-yellow-200">
                      Recomendaciones
                    </h4>
                    <ul className="text-sm text-yellow-700 dark:text-yellow-300 mt-2 space-y-1">
                      <li>
                        • Ajusta la velocidad según el tipo de herramienta
                      </li>
                      <li>• Considera la rigidez del sistema máquina-pieza</li>
                      <li>• Utiliza refrigeración adecuada</li>
                      <li>• Verifica las especificaciones del fabricante</li>
                    </ul>
                  </div>
                </div>
              </div>
              {/* Chart Panel */}
              <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md">
                <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">
                  📊 Análisis Gráfico
                </h3>
                <div className="h-64">
                  <Line
                    data={{
                      labels: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul"],
                      datasets: [
                        {
                          label: "Velocidad de Corte",
                          data: [50, 60, 55, 70, 65, 80, 75],
                          borderColor: "rgb(37 99 235)",
                          backgroundColor: "rgba(37, 99, 235, 0.2)",
                          fill: true,
                          tension: 0.4,
                        },
                        {
                          label: "Avance",
                          data: [0.1, 0.15, 0.12, 0.2, 0.18, 0.25, 0.22],
                          borderColor: "rgb(22 163 74)",
                          backgroundColor: "rgba(22, 163, 74, 0.2)",
                          fill: true,
                          tension: 0.4,
                        },
                      ],
                    }}
                    options={{
                      responsive: true,
                      plugins: {
                        legend: {
                          position: "top" as const,
                          labels: {
                            color: "#2563EB",
                            font: { family: "Inter", size: 13, weight: "bold" },
                          },
                        },
                        title: {
                          display: true,
                          text: "Tendencia de Velocidad de Corte y Avance",
                          color: "#2563EB",
                          font: { family: "Inter", size: 15, weight: "bold" },
                        },
                        tooltip: {
                          callbacks: {
                            label: (
                              ctx: import("chart.js").TooltipItem<"line">
                            ) => `${ctx.dataset.label}: ${ctx.parsed.y}`,
                          },
                        },
                      },
                      animation: {
                        duration: 1200,
                        easing: "easeOutQuart",
                      },
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: "Meses",
                            color: "#64748B",
                            font: {
                              family: "Inter",
                              size: 13,
                              weight: "medium",
                            },
                          },
                          ticks: {
                            color: "#64748B",
                          },
                        },
                        y: {
                          title: {
                            display: true,
                            text: "Valores",
                            color: "#64748B",
                            font: {
                              family: "Inter",
                              size: 13,
                              weight: "medium",
                            },
                          },
                          ticks: {
                            color: "#64748B",
                          },
                        },
                      },
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
        {/* Analytics & Chart */}
        <div
          className="mt-8 bg-white dark:bg-gray-900 rounded-xl shadow-lg p-6"
          ref={chartRef}
        >
          <h3 className="text-lg font-semibold text-blue-700 dark:text-blue-300 mb-4 flex items-center">
            <Calculator className="mr-2 text-blue-500" size={20} />
            Análisis Visual de Parámetros
          </h3>
          <Line
            data={{
              labels: selectedMaterials.map(
                (key) => materials.find((m) => m.key === key)?.name || key
              ),
              datasets: [
                {
                  label: "Velocidad Recomendada (m/min)",
                  data: selectedMaterials.map(
                    (key) =>
                      materials.find((m) => m.key === key)?.recommended_speed ||
                      0
                  ),
                  backgroundColor: selectedMaterials.map(
                    (key) =>
                      materials.find((m) => m.key === key)?.color || "#2563EB"
                  ),
                  borderColor: selectedMaterials.map(
                    (key) =>
                      materials.find((m) => m.key === key)?.color || "#2563EB"
                  ),
                  fill: true,
                  tension: 0.4,
                  pointRadius: 6,
                  pointHoverRadius: 10,
                  pointStyle: "rectRounded",
                },
              ],
            }}
            options={{
              responsive: true,
              plugins: {
                legend: {
                  display: true,
                  position: "top" as const,
                  labels: {
                    color: "#2563EB",
                    font: { family: "Inter", size: 14, weight: "bold" },
                    boxWidth: 24,
                    boxHeight: 12,
                  },
                },
                title: {
                  display: true,
                  text: "Comparativa de Velocidades de Corte por Material (Selección)",
                  color: "#2563EB",
                  font: { family: "Inter", size: 16, weight: "bold" },
                },
                tooltip: {
                  backgroundColor: "#1e293b",
                  titleColor: "#38bdf8",
                  bodyColor: "#fbbf24",
                  borderColor: "#2563EB",
                  borderWidth: 1,
                  callbacks: {
                    label: (ctx: import("chart.js").TooltipItem<"line">) =>
                      `${ctx.dataset.label}: ${ctx.parsed.y} m/min`,
                  },
                },
              },
              animation: {
                duration: 1500,
                easing: "easeOutCubic",
              },
              scales: {
                x: {
                  title: {
                    display: true,
                    text: "Material",
                    color: "#64748B",
                    font: { family: "Inter", size: 13, weight: "medium" },
                  },
                  ticks: {
                    color: "#64748B",
                  },
                },
                y: {
                  title: {
                    display: true,
                    text: "Velocidad (m/min)",
                    color: "#64748B",
                    font: { family: "Inter", size: 13, weight: "medium" },
                  },
                  min: 0,
                  max:
                    Math.max(
                      ...selectedMaterials.map(
                        (key) =>
                          materials.find((m) => m.key === key)
                            ?.recommended_speed || 0
                      )
                    ) + 50,
                  ticks: {
                    color: "#64748B",
                  },
                },
              },
            }}
            aria-label="Comparativa de velocidades de corte por material (selección)"
            role="img"
          />
          <div className="flex mt-4 space-x-2">
            <button
              onClick={handleDownloadPDF}
              className="px-5 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:ring-2 focus:ring-green-400 transition-colors"
              aria-label="Descargar análisis en PDF"
            >
              Descargar PDF
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VelocidadCorteCalculator;

/* Animations CSS */
<style>{`
  .animate-fade-in { animation: fadeIn 0.7s; }
  @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
  .animate-bounce-in { animation: bounceIn 0.7s; }
  @keyframes bounceIn {
    0% { transform: scale(0.95); opacity: 0.5; }
    60% { transform: scale(1.05); opacity: 1; }
    100% { transform: scale(1); opacity: 1; }
  }
`}</style>;
</file>

<file path="TODO.md">
# TODO List

## 🔥 Prioridad Alta

- [x] **Migración Completa a SPA:** ✅ Navegación React Router, scroll-to-top automático, enlaces internos actualizados.
- [ ] **Persistencia de Datos del Planificador:** Guardar y cargar planes de estudio (localStorage o backend).
- [ ] **Accesibilidad (a11y):** Mejorar la accesibilidad de todos los componentes. [En progreso: badges, ARIA, focus, roles, tooltips, etc.]
- [x] **Diseño Responsivo:** Todos los componentes principales y páginas son responsivos y han sido revisados. (Pulido menor pendiente)
- [ ] **Autenticación de Usuarios (opcional):** Implementar sistema de registro e inicio de sesión si se requiere.
- [x] **Migración total de datos a Supabase:** Todos los datos de procesos, recursos, materiales, aplicaciones de engranajes, herramientas y quizzes migrados y consumidos dinámicamente desde Supabase. Eliminados arrays hardcodeados.
- [x] **Refactor de calculadoras y simuladores:** Materiales, aplicaciones y parámetros ahora se obtienen de Supabase. Manejo robusto de errores y loading.
- [x] **Eliminación de any:** Todo el código usa tipado estricto TypeScript.
- [x] **Logging y diagnóstico Supabase:** Se agregó logging para diagnosticar conectividad y datos recibidos.
- [x] **Compatibilidad de campos Supabase:** El código acepta temporalmente `service_factor` y `servicefactor` en gear_applications. Se recomienda renombrar la columna a `service_factor` (ver README y Developer Manual).
- [x] **Modernización Home:** Rediseño visual y mejora de la página de inicio para coherencia y atractivo visual.
- [x] **Comparar Materiales en VelocidadCorteCalculator:** Selección múltiple y análisis comparativo en el gráfico.
- [x] **Exportar PDF y Copiar Resultados:** Botones para exportar análisis y copiar resultados en calculadoras.

## 🛠️ Funcionalidades y Mejoras

- [ ] **Desarrollo Backend:** Configurar un backend básico para guardar progreso de usuarios (si aplica).
- [ ] **Contenido Detallado para Módulos:**
  - [ ] Añadir más preguntas y escenarios a `SoldaduraQuiz`.
  - [ ] Expandir parámetros y materiales en `ForjadoSimulator`.
  - [ ] Añadir más tipos de materiales y herramientas a `VelocidadCorteCalculator`.
- [ ] **Internacionalización (i18n):** Preparar la aplicación para múltiples idiomas.
- [x] **Animaciones y Transiciones:** Añadir feedback visual sutil (ya implementado en calculadoras y charts).
- [ ] **Mejorar la interfaz del `ProgressTracker`:** Hacerlo más intuitivo.
- [ ] **Personalización del Tema:** Permitir más opciones de temas además de claro/oscuro.
- [ ] **Historial de Cálculos:** Mostrar y exportar historial de cálculos recientes en calculadoras.
- [ ] **Notas de Usuario:** Permitir guardar notas por cálculo (localStorage).
- [ ] **Modo Experto:** Campos avanzados y fórmulas personalizables.
- [ ] **Compartir Resultados:** Generar link compartible con parámetros del cálculo.

## 🧪 Pruebas

- [ ] **Pruebas Unitarias:** Incrementar la cobertura de pruebas para los componentes.
- [ ] **Pruebas de Integración:** Probar el flujo entre diferentes secciones.
- [ ] **Pruebas E2E:** Configurar pruebas end-to-end.

## 📝 Documentación

- [x] **Actualizar documentación tras migración Supabase:** README y Developer Manual actualizados con instrucciones y SQL para migrar/renombrar columnas.
- [x] **Documentar nuevas features avanzadas:** Comparar materiales, exportar PDF, copiar resultados, mejoras de accesibilidad.
- [ ] **Comentarios en Código:** Mejorar la documentación interna del código.
- [ ] **Guía de Usuario:** Crear una guía básica para los usuarios finales.
- [ ] **Documentación de API (si aplica):** Documentar los endpoints del backend.

## 🚀 Despliegue y Optimización

- [ ] **Configurar CI/CD:** Automatizar el proceso de build y despliegue.
- [ ] **Optimización de Performance:** Analizar y mejorar tiempos de carga.

## ✅ Completado Reciente

- [x] Migración a React Router y SPA.
- [x] Unificación de contexto de progreso y log de actividad.
- [x] Modularización de tarjetas de quiz.
- [x] Scroll-to-top automático en navegación y apertura de simuladores.
- [x] Refactorización de navegación y enlaces internos.
- [x] Migrate materials data to Supabase and refactor MaterialesCalculator to use dynamic fetch.
- [x] Test MaterialesCalculator with new materials and edge cases.
- [x] Review other calculators for hardcoded data.
- [x] Update documentación tras migraciones Supabase.
- [x] Rediseño y modernización de la Home para mayor atractivo visual y coherencia.
- [x] Comparar materiales y exportar análisis en PDF/copia en calculadoras.
</file>

<file path="DEVELOPER_MANUAL.md">
# Centro de Aprendizaje – Developer Manual

> ⚠️ **WARNING:** This manual is DEV-branch only. Do NOT edit or merge into `main`. See `.gitattributes` for details.

## 1. Project Overview

Centro de Aprendizaje is a modern, interactive educational platform for manufacturing processes (forjado, soldadura, mecanizado, etc.), built as a SPA using React, Vite, and TypeScript. It features dynamic content (processes, resources, quizzes, calculators, simulators) managed via Supabase, robust context-driven state management, and a scalable, maintainable codebase.

---

## 2. Codebase Structure

```text
root/
│
├── src/
│   ├── App.tsx                # Main app shell (routing, layout)
│   ├── main.tsx               # Entry point, context providers
│   ├── index.css              # Tailwind + custom styles
│   ├── supabaseClient.ts      # Supabase client config
│   ├── vite-env.d.ts          # Vite/TS types
│   ├── components/            # Main UI components
│   │   ├── Header.tsx         # Top navigation
│   │   ├── Footer.tsx         # Footer
│   │   ├── Home.tsx           # Landing page (modern, visual, responsive)
│   │   ├── ProcessSection.tsx # Dynamic process explorer
│   │   ├── ToolsSection.tsx   # Tool/simulator/calculator hub
│   │   ├── ResourcesSection.tsx # Dynamic resources
│   │   ├── EvaluationSection.tsx # Dynamic quizzes
│   │   ├── ProgressTracker.tsx   # User progress dashboard
│   │   ├── StudyPlanner.tsx      # Study/task planner
│   │   ├── QuizCard.tsx         # Quiz card UI
│   │   └── tools/               # All calculators/simulators/quizzes
│   └── contexts/               # Context providers (state management)
├── public/                     # Static assets (if any)
├── package.json                # Dependencies, scripts
├── vite.config.ts              # Vite config
├── tailwind.config.js          # Tailwind config
├── postcss.config.js           # PostCSS config
├── eslint.config.js            # ESLint config
├── README.md                   # Project intro (user-facing)
├── PLANNING.md                 # Planning/roadmap
├── TODO.md                     # Task list
└── ...
```

---

## 3. Functionality & Data Flow

- **Dynamic Content:**

  - All processes, resources, categories, tools, quizzes, and material properties are fetched from Supabase.
  - Fallbacks (e.g., quizzes) are provided for offline/empty states.
  - TypeScript interfaces strictly define all data shapes.

- **Context Providers:**

  - `QuizProgressContext`, `TasksContext`, `AchievementsContext`, `ActivityLogContext`, `ThemeContext`, `ToastContext` manage all global state (progress, tasks, achievements, logs, theme, toasts).
  - Context hooks (`useQuizProgress`, etc.) are used in components for state access.

- **UI/UX:**

  - Modern, responsive UI with Tailwind CSS.
  - Animations via Framer Motion.
  - Robust loading/error handling for all async data.
  - Accessibility and dark mode support.

- **Supabase Integration:**
  - All dynamic data is stored in Supabase tables (see below for schemas).
  - All fetches include error/logging for connectivity.
  - Credentials/config in `src/supabaseClient.ts`.

---

## 4. Supabase Integration & Data Model

- **Todos los datos clave** (materiales, procesos, recursos, aplicaciones de engranajes, herramientas, quizzes) se gestionan en Supabase.
- El frontend obtiene los datos dinámicamente y los mapea con validación de tipo y manejo de errores.
- **IMPORTANTE:**

  - El campo de factor de servicio en la tabla `gear_applications` debe llamarse `service_factor` (no `servicefactor`).
  - Si migraste desde una versión anterior, ejecuta:

    ```sql
    ALTER TABLE gear_applications RENAME COLUMN servicefactor TO service_factor;
    ALTER TABLE gear_applications ALTER COLUMN service_factor TYPE float8 USING service_factor::float8;
    ```

- El código es compatible temporalmente con ambos nombres, pero se recomienda unificar a `service_factor`.

---

## 5. Current State of Development

- **Completed:**

  - Todos los datos de procesos, recursos, materiales, herramientas, aplicaciones de engranajes y quizzes migrados a Supabase.
  - Frontend obtiene y renderiza todos los datos dinámicamente desde Supabase.
  - Calculadoras y simuladores refactorizados para consumir datos dinámicos, con manejo robusto de errores/loading y tipado estricto.
  - Eliminados todos los arrays hardcodeados.
  - TypeScript estricto en todo el código (sin `any`).
  - ESLint y estilos de código aplicados.
  - Contextos refactorizados y modularizados.
  - Fallbacks para quizzes aseguran UI siempre funcional.
  - Home y páginas principales modernizadas y responsivas.
  - Documentación y SQL de migración actualizados.

- **Pending:**
  - Persistencia de datos de usuario en StudyPlanner/ProgressTracker (localStorage o backend).
  - Mejoras de accesibilidad (a11y) y pulido UI.
  - Pruebas unitarias, integración y E2E.
  - Internacionalización (i18n).
  - Backend para progreso/autenticación (opcional).
  - Expansión de contenido y documentación de usuario/API.

---

## 6. Roadmap & Planning

### Short-Term

- [x] Migrar y consumir todos los datos dinámicamente desde Supabase.
- [x] Refactor de calculadoras/simuladores para datos dinámicos y robusto manejo de errores/loading.
- [x] Modernización visual y responsiva de la Home y secciones principales.
- [ ] Persistencia de datos de usuario (StudyPlanner/ProgressTracker).
- [ ] Mejoras de accesibilidad y pulido UI.
- [ ] Pruebas unitarias/integración/E2E.

### Medium-Term

- [ ] Backend para progreso/autenticación (opcional).
- [ ] Internacionalización (i18n).
- [ ] Expansión de contenido y documentación.

---

## 7. TODO & Task List

Ver `TODO.md` y `PLANNING.md` para tareas detalladas. Principales pendientes:

- Persistencia de datos de usuario.
- Mejoras de accesibilidad y UI.
- Pruebas y documentación de usuario/API.

---

## 8. How to Continue Development

1. **Supabase Data Migration:**
   - Identifica cualquier dato hardcodeado restante (ver `src/components/tools/`).
   - Agrega tablas/campos en Supabase según los esquemas de ejemplo.
   - Migra datos y actualiza lógica de fetch en frontend.
2. **Frontend Refactor:**
   - Elimina datos hardcodeados de componentes.
   - Obtén datos desde Supabase usando el cliente en `src/supabaseClient.ts`.
   - Añade manejo robusto de errores/loading y logging.
   - Aplica tipado estricto TypeScript.
3. **Testing & QA:**
   - Ejecuta `npm run lint` para revisar estilos.
   - Añade/amplía pruebas según sea necesario.
4. **Documentación:**
   - Mantén este manual, `README.md`, `TODO.md` y `PLANNING.md` actualizados.
5. **Deployment:**
   - Build con `npm run build`.
   - Despliega archivos estáticos según sea necesario (ver docs de Vite).

---

## 9. Best Practices

- Usa context providers para todo estado global.
- Nunca uses `any` en TypeScript; define siempre interfaces.
- Provee datos fallback para UI crítica (ej: quizzes).
- Usa manejo robusto de errores/loading para todo fetch asíncrono.
- Mantén las credenciales de Supabase seguras (mueve a vars de entorno para producción).
- Mantén la documentación y planificación actualizadas.

---

## 10. Resources

- [Supabase Docs](https://supabase.com/docs)
- [React Docs](https://react.dev/)
- [Vite Docs](https://vitejs.dev/)
- [Tailwind CSS](https://tailwindcss.com/)
- [Framer Motion](https://www.framer.com/motion/)

---

## 11. Contact & Maintainers

- Main developer: (add your name/contact here)
- For questions, open an issue or consult this manual.

---

### Materials Data

- All material properties for calculators and simulators are now fetched dynamically from the Supabase `materials` table.
- To add or update materials, log in to Supabase, go to the `materials` table, and insert or edit records.
- The frontend automatically reflects any changes made in Supabase.

#### Example: Adding a Material

1. Open Supabase dashboard.
2. Go to the `materials` table.
3. Click "Insert Row" and fill in the fields (id, name, category, density, etc.).
4. Save. The new material will appear in the MaterialesCalculator UI.

---

#### Roadmap & Current State (update)

- [x] Materials migrated to Supabase and loaded dynamically.
- [ ] Migrate other hardcoded data (tools, achievements, etc.) as needed.

---

**Keep this manual updated as the project evolves!**
</file>

<file path="src/components/StudyPlanner.tsx">
import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {
  Calendar,
  Clock,
  Target,
  Plus,
  CheckCircle,
  BookOpen,
  Star,
  Trophy,
  Flame,
} from "lucide-react";
import { useTasks } from "../contexts/TasksContext";

const StudyPlanner: React.FC = () => {
  const { studyTasks, setStudyTasks } = useTasks();
  const [showAddTask, setShowAddTask] = useState(false);
  const [studyStreak] = useState<StudyStreak>({
    current: 7,
    longest: 12,
    lastStudyDate: new Date().toISOString().split("T")[0],
  });
  const [totalPoints, setTotalPoints] = useState(125);
  const [level, setLevel] = useState(3);
  const [newTask, setNewTask] = useState({
    title: "",
    description: "",
    dueDate: "",
    priority: "medium" as "high" | "medium" | "low",
    estimatedTime: 30,
    category: "Teoría",
    difficulty: "medium" as "easy" | "medium" | "hard",
  });
  const [loading] = useState(false); // For future backend integration
  const [error] = useState<string | null>(null); // For future backend integration

  const toggleTask = (id: string) => {
    setStudyTasks(
      studyTasks.map((task) => {
        if (task.id === id) {
          const updatedTask = { ...task, completed: !task.completed };
          if (updatedTask.completed && !task.completed) {
            setTotalPoints((prev) => prev + task.points);
          } else if (!updatedTask.completed && task.completed) {
            setTotalPoints((prev) => prev - task.points);
          }
          return updatedTask;
        }
        return task;
      })
    );
  };

  const addTask = () => {
    if (newTask.title && newTask.dueDate) {
      const points =
        newTask.difficulty === "easy"
          ? 25
          : newTask.difficulty === "medium"
          ? 50
          : 75;
      const task: StudyTask = {
        id: Date.now().toString(),
        ...newTask,
        completed: false,
        points,
      };
      setStudyTasks([...studyTasks, task]);
      setNewTask({
        title: "",
        description: "",
        dueDate: "",
        priority: "medium",
        estimatedTime: 30,
        category: "Teoría",
        difficulty: "medium",
      });
      setShowAddTask(false);
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "border-red-500 bg-red-50 dark:bg-red-900/20";
      case "medium":
        return "border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20";
      case "low":
        return "border-green-500 bg-green-50 dark:bg-green-900/20";
      default:
        return "border-gray-300 bg-gray-50 dark:bg-gray-700";
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "easy":
        return "text-green-600 bg-green-100 dark:bg-green-900/20";
      case "medium":
        return "text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20";
      case "hard":
        return "text-red-600 bg-red-100 dark:bg-red-900/20";
      default:
        return "text-gray-600 bg-gray-100 dark:bg-gray-900/20";
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case "high":
        return "🔴";
      case "medium":
        return "🟡";
      case "low":
        return "🟢";
      default:
        return "⚪";
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "Evaluación":
        return "📝";
      case "Teoría":
        return "📚";
      case "Práctica":
        return "🔧";
      case "Lectura":
        return "📖";
      default:
        return "📋";
    }
  };

  const completedTasks = studyTasks.filter((task) => task.completed).length;
  const totalTasks = studyTasks.length;
  const completionPercentage =
    totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;

  const upcomingTasks = studyTasks
    .filter((task) => !task.completed)
    .sort(
      (a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()
    );

  const totalEstimatedTime = upcomingTasks.reduce(
    (sum, task) => sum + task.estimatedTime,
    0
  );

  // Calculate level based on points
  useEffect(() => {
    const newLevel = Math.floor(totalPoints / 100) + 1;
    setLevel(newLevel);
  }, [totalPoints]);

  const pointsToNextLevel = level * 100 - totalPoints;
  const levelProgress = ((totalPoints % 100) / 100) * 100;

  // Example: If you fetch study tasks from backend in the future
  // useEffect(() => {
  //   setLoading(true);
  //   setError(null);
  //   fetchDataFromBackend()
  //     .then(() => setLoading(false))
  //     .catch(() => { setError('Error al cargar datos.'); setLoading(false); });
  // }, []);

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center py-24">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4" />
        <span className="text-lg text-gray-700 dark:text-gray-200">
          Cargando planificador...
        </span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center py-24">
        <div className="text-6xl mb-4">⚠️</div>
        <h3 className="text-xl font-semibold text-red-700 dark:text-red-400 mb-2">
          {error}
        </h3>
        <button
          onClick={() => window.location.reload()}
          className="mt-4 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Reintentar
        </button>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-4 sm:p-6 space-y-8">
      {/* Header */}
      <motion.div
        className="text-center"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <h1 className="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
          📅 Planificador de Estudios Gamificado
        </h1>
        <p className="text-base md:text-lg text-gray-600 dark:text-gray-300">
          Organiza tu tiempo, gana puntos y alcanza tus objetivos académicos
        </p>
      </motion.div>

      {/* Gamification Stats */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-6">
        <motion.div
          className="bg-gradient-to-br from-purple-500 to-purple-600 text-white p-6 rounded-2xl shadow-lg"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.1 }}
        >
          <div className="flex items-center justify-between mb-4">
            <Star size={32} />
            <span className="text-3xl font-bold">Nv.{level}</span>
          </div>
          <h3 className="text-lg font-semibold mb-2">Nivel Actual</h3>
          <div className="bg-white/20 rounded-full h-2 mb-2">
            <motion.div
              className="bg-white rounded-full h-2"
              initial={{ width: 0 }}
              animate={{ width: `${levelProgress}%` }}
              transition={{ delay: 0.5, duration: 1 }}
            />
          </div>
          <p className="text-sm opacity-90">
            {pointsToNextLevel} pts para Nv.{level + 1}
          </p>
        </motion.div>

        <motion.div
          className="bg-gradient-to-br from-yellow-500 to-orange-500 text-white p-6 rounded-2xl shadow-lg"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.2 }}
        >
          <div className="flex items-center justify-between mb-4">
            <Trophy size={32} />
            <span className="text-3xl font-bold">{totalPoints}</span>
          </div>
          <h3 className="text-lg font-semibold mb-2">Puntos Totales</h3>
          <p className="text-sm opacity-90">
            +
            {studyTasks
              .filter((t) => t.completed)
              .reduce((sum, t) => sum + t.points, 0)}{" "}
            esta semana
          </p>
        </motion.div>

        <motion.div
          className="bg-gradient-to-br from-red-500 to-pink-500 text-white p-6 rounded-2xl shadow-lg"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
        >
          <div className="flex items-center justify-between mb-4">
            <Flame size={32} />
            <span className="text-3xl font-bold">{studyStreak.current}</span>
          </div>
          <h3 className="text-lg font-semibold mb-2">Racha Actual</h3>
          <p className="text-sm opacity-90">
            Máximo: {studyStreak.longest} días
          </p>
        </motion.div>

        <motion.div
          className="bg-gradient-to-br from-blue-500 to-blue-600 text-white p-6 rounded-2xl shadow-lg"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.4 }}
        >
          <div className="flex items-center justify-between mb-4">
            <Target size={32} />
            <span className="text-3xl font-bold">{completionPercentage}%</span>
          </div>
          <h3 className="text-lg font-semibold mb-2">Progreso Semanal</h3>
          <p className="text-sm opacity-90">
            {completedTasks} de {totalTasks} tareas
          </p>
        </motion.div>

        <motion.div
          className="bg-gradient-to-br from-green-500 to-green-600 text-white p-6 rounded-2xl shadow-lg"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.5 }}
        >
          <div className="flex items-center justify-between mb-4">
            <Clock size={32} />
            <span className="text-3xl font-bold">
              {Math.floor(totalEstimatedTime / 60)}h
            </span>
          </div>
          <h3 className="text-lg font-semibold mb-2">Tiempo Restante</h3>
          <p className="text-sm opacity-90">
            {totalEstimatedTime % 60}min adicionales
          </p>
        </motion.div>
      </div>

      {/* Main Content */}
      <div className="grid lg:grid-cols-3 gap-8">
        {/* Task List */}
        <div className="lg:col-span-2 space-y-6">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
              📋 Lista de Tareas
            </h2>
            <motion.button
              onClick={() => setShowAddTask(true)}
              className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-xl hover:bg-blue-700 transition-colors"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Plus size={20} />
              <span>Nueva Tarea</span>
            </motion.button>
          </div>

          <div className="space-y-4">
            {studyTasks.map((task, index) => (
              <motion.div
                key={task.id}
                className={`p-6 rounded-2xl border-l-4 ${getPriorityColor(
                  task.priority
                )} ${
                  task.completed ? "opacity-60" : ""
                } shadow-md hover:shadow-lg transition-all`}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <div className="flex items-start space-x-4">
                  <motion.button
                    onClick={() => toggleTask(task.id)}
                    className={`mt-1 w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                      task.completed
                        ? "bg-green-500 border-green-500 text-white"
                        : "border-gray-300 hover:border-green-500"
                    }`}
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    {task.completed && <CheckCircle size={16} />}
                  </motion.button>

                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <h3
                        className={`text-lg font-semibold ${
                          task.completed
                            ? "line-through text-gray-500 dark:text-gray-400"
                            : "text-gray-900 dark:text-white"
                        }`}
                      >
                        {task.title}
                      </h3>
                      <span className="text-lg">
                        {getPriorityIcon(task.priority)}
                      </span>
                      <span className="text-sm">
                        {getCategoryIcon(task.category)}
                      </span>
                      <span
                        className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(
                          task.difficulty
                        )}`}
                      >
                        {task.difficulty}
                      </span>
                      <span className="bg-purple-100 dark:bg-purple-900/20 text-purple-600 px-2 py-1 rounded-full text-xs font-bold">
                        +{task.points} pts
                      </span>
                    </div>

                    <p className="text-gray-600 dark:text-gray-300 mb-3">
                      {task.description}
                    </p>

                    <div className="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                      <div className="flex items-center space-x-1">
                        <Calendar size={16} />
                        <span>
                          {new Date(task.dueDate).toLocaleDateString("es-ES")}
                        </span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <Clock size={16} />
                        <span>{task.estimatedTime} min</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <BookOpen size={16} />
                        <span>{task.category}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </div>

        {/* Enhanced Sidebar */}
        <div className="space-y-6">
          {/* Achievement Showcase */}
          <motion.div
            className="bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.5 }}
          >
            <h3 className="text-lg font-bold text-yellow-800 dark:text-yellow-200 mb-4 flex items-center">
              🏆 Logros Recientes
            </h3>

            <div className="space-y-3">
              <div className="flex items-center space-x-3 p-3 bg-white dark:bg-gray-800 rounded-lg">
                <div className="text-2xl">🔥</div>
                <div>
                  <div className="font-medium text-sm">Racha de 7 días</div>
                  <div className="text-xs text-gray-500">¡Sigue así!</div>
                </div>
              </div>

              <div className="flex items-center space-x-3 p-3 bg-white dark:bg-gray-800 rounded-lg">
                <div className="text-2xl">⚡</div>
                <div>
                  <div className="font-medium text-sm">Quiz Master</div>
                  <div className="text-xs text-gray-500">100% en soldadura</div>
                </div>
              </div>
            </div>
          </motion.div>

          {/* Quick Stats */}
          <motion.div
            className="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.6 }}
          >
            <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4">
              📊 Estadísticas Rápidas
            </h3>

            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-600 dark:text-gray-300">
                  Tareas de alta prioridad:
                </span>
                <span className="font-bold text-red-500">
                  {
                    studyTasks.filter(
                      (t) => t.priority === "high" && !t.completed
                    ).length
                  }
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600 dark:text-gray-300">
                  Vencen hoy:
                </span>
                <span className="font-bold text-orange-500">
                  {
                    studyTasks.filter(
                      (t) =>
                        new Date(t.dueDate).toDateString() ===
                          new Date().toDateString() && !t.completed
                    ).length
                  }
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600 dark:text-gray-300">
                  Puntos esta semana:
                </span>
                <span className="font-bold text-purple-500">
                  +
                  {studyTasks
                    .filter((t) => t.completed)
                    .reduce((sum, t) => sum + t.points, 0)}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600 dark:text-gray-300">
                  Tiempo total estimado:
                </span>
                <span className="font-bold text-blue-500">
                  {Math.floor(totalEstimatedTime / 60)}h{" "}
                  {totalEstimatedTime % 60}m
                </span>
              </div>
            </div>
          </motion.div>

          {/* Enhanced Study Tips */}
          <motion.div
            className="bg-gradient-to-br from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-2xl p-6"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.7 }}
          >
            <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4">
              💡 Consejos Inteligentes
            </h3>

            <div className="space-y-3 text-sm">
              <div className="flex items-start space-x-2">
                <span>🎯</span>
                <span className="text-gray-600 dark:text-gray-300">
                  Completa tareas difíciles primero para ganar más puntos
                </span>
              </div>
              <div className="flex items-start space-x-2">
                <span>⏰</span>
                <span className="text-gray-600 dark:text-gray-300">
                  Mantén tu racha estudiando al menos 15 minutos diarios
                </span>
              </div>
              <div className="flex items-start space-x-2">
                <span>📚</span>
                <span className="text-gray-600 dark:text-gray-300">
                  Alterna entre teoría y práctica para mejor retención
                </span>
              </div>
              <div className="flex items-start space-x-2">
                <span>🏆</span>
                <span className="text-gray-600 dark:text-gray-300">
                  Alcanza el nivel {level + 1} completando{" "}
                  {Math.ceil(pointsToNextLevel / 50)} tareas más
                </span>
              </div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Enhanced Add Task Modal */}
      {showAddTask && (
        <motion.div
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
        >
          <motion.div
            className="bg-white dark:bg-gray-800 rounded-2xl p-6 w-full max-w-md"
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
          >
            <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-4">
              ➕ Nueva Tarea de Estudio
            </h3>

            <div className="space-y-4">
              <input
                type="text"
                placeholder="Título de la tarea"
                value={newTask.title}
                onChange={(e) =>
                  setNewTask({ ...newTask, title: e.target.value })
                }
                className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
              />

              <textarea
                placeholder="Descripción (opcional)"
                value={newTask.description}
                onChange={(e) =>
                  setNewTask({ ...newTask, description: e.target.value })
                }
                className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 h-20"
              />

              <input
                type="date"
                value={newTask.dueDate}
                onChange={(e) =>
                  setNewTask({ ...newTask, dueDate: e.target.value })
                }
                className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
              />

              <div className="grid grid-cols-2 gap-4">
                <select
                  value={newTask.priority}
                  onChange={(e) =>
                    setNewTask({
                      ...newTask,
                      priority: e.target.value as "high" | "medium" | "low",
                    })
                  }
                  className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                >
                  <option value="low">Baja prioridad</option>
                  <option value="medium">Media prioridad</option>
                  <option value="high">Alta prioridad</option>
                </select>

                <select
                  value={newTask.difficulty}
                  onChange={(e) =>
                    setNewTask({
                      ...newTask,
                      difficulty: e.target.value as "easy" | "medium" | "hard",
                    })
                  }
                  className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                >
                  <option value="easy">Fácil (+25 pts)</option>
                  <option value="medium">Medio (+50 pts)</option>
                  <option value="hard">Difícil (+75 pts)</option>
                </select>
              </div>

              <select
                value={newTask.category}
                onChange={(e) =>
                  setNewTask({ ...newTask, category: e.target.value })
                }
                className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
              >
                <option value="Teoría">Teoría</option>
                <option value="Práctica">Práctica</option>
                <option value="Evaluación">Evaluación</option>
                <option value="Lectura">Lectura</option>
              </select>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Tiempo estimado: {newTask.estimatedTime} minutos
                </label>
                <input
                  type="range"
                  min="15"
                  max="120"
                  step="15"
                  value={newTask.estimatedTime}
                  onChange={(e) =>
                    setNewTask({
                      ...newTask,
                      estimatedTime: Number(e.target.value),
                    })
                  }
                  className="w-full"
                />
              </div>
            </div>

            <div className="flex space-x-4 mt-6">
              <button
                onClick={addTask}
                className="flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                Agregar Tarea
              </button>
              <button
                onClick={() => setShowAddTask(false)}
                className="flex-1 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300 py-3 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-500 transition-colors font-medium"
              >
                Cancelar
              </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
};

export default StudyPlanner;
</file>

<file path="src/App.tsx">
import React from "react";
import { ThemeProvider } from "./contexts/ThemeContext";
import { ToastProvider } from "./contexts/ToastContext";
import Header from "./components/Header";
import Home from "./components/Home";
import ProcessSection from "./components/ProcessSection";
import ToolsSection from "./components/ToolsSection";
import ResourcesSection from "./components/ResourcesSection";
import EvaluationSection from "./components/EvaluationSection";
import ProgressTracker from "./components/ProgressTracker";
import Footer from "./components/Footer";
import { motion, AnimatePresence } from "framer-motion";
import ScrollToTop from "./components/ScrollToTop";
import { Routes, Route, useLocation } from "react-router-dom";
import AuthTestPage from "./components/AuthTestPage";

function App() {
  const location = useLocation();

  const pageVariants = {
    initial: { opacity: 0, y: 20 },
    in: { opacity: 1, y: 0 },
    out: { opacity: 0, y: -20 },
  };

  const pageTransition = {
    type: "tween",
    ease: "anticipate",
    duration: 0.4,
  };

  return (
    <ToastProvider>
      <ThemeProvider>
        <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 dark:from-gray-900 dark:via-blue-900/20 dark:to-indigo-900/30 transition-colors overflow-x-hidden">
          <Header />
          <ScrollToTop />
          <AnimatePresence mode="wait">
            <motion.main
              key={location.pathname}
              initial="initial"
              animate="in"
              exit="out"
              variants={pageVariants}
              transition={pageTransition}
              className="min-h-screen"
            >
              <Routes location={location}>
                <Route path="/" element={<Home />} />
                <Route path="/procesos" element={<ProcessSection />} />
                <Route path="/herramientas" element={<ToolsSection />} />
                <Route
                  path="/herramientas/:toolId"
                  element={<ToolsSection />}
                />
                <Route path="/recursos" element={<ResourcesSection />} />
                <Route path="/evaluacion" element={<EvaluationSection />} />
                <Route path="/progreso" element={<ProgressTracker />} />
                <Route path="/auth-test" element={<AuthTestPage />} />
                <Route
                  path="*"
                  element={
                    <div className="flex flex-col items-center justify-center min-h-[40vh] text-center bg-gradient-to-br from-pink-100 via-purple-100 to-blue-100 dark:from-gray-900 dark:via-purple-900/30 dark:to-blue-900/30 rounded-2xl shadow-xl p-10 animate-fade-in">
                      <div className="mb-4">
                        <span className="inline-block text-7xl md:text-8xl text-pink-500 dark:text-pink-400 drop-shadow-lg">
                          🚫
                        </span>
                      </div>
                      <h2 className="text-5xl font-extrabold text-gray-800 dark:text-white mb-2 tracking-tight drop-shadow-sm">
                        404
                      </h2>
                      <p className="text-2xl md:text-3xl font-semibold text-gray-700 dark:text-gray-300 mb-4">
                        Sección no encontrada
                      </p>
                      <p className="text-lg text-gray-500 dark:text-gray-400 mb-8 max-w-xl mx-auto">
                        Lo sentimos, la sección que buscas no existe o ha sido
                        deshabilitada temporalmente.
                        <br />
                        Por favor, utiliza el menú superior para navegar a otra
                        sección.
                      </p>
                      <a
                        href="/"
                        className="px-6 py-3 rounded-lg bg-gradient-to-r from-blue-500 to-purple-500 text-white font-bold shadow-lg hover:from-pink-500 hover:to-yellow-500 transition-all focus:outline-none focus:ring-2 focus:ring-pink-400"
                      >
                        Volver al Inicio
                      </a>
                    </div>
                  }
                />
              </Routes>
            </motion.main>
          </AnimatePresence>
          <Footer />
        </div>
      </ThemeProvider>
    </ToastProvider>
  );
}

export default App;
</file>

<file path="src/components/Home.tsx">
import React from "react";
import { Calculator, BookOpen, Award, Users, TrendingUp } from "lucide-react";
import { motion } from "framer-motion";
import { useNavigate } from "react-router-dom";

const Home: React.FC = () => {
  const navigate = useNavigate();

  // Feature Cards
  const features = [
    {
      icon: BookOpen,
      title: "Procesos de Fabricación Avanzados",
      description:
        "Aprende sobre procesos primarios, secundarios y de acabado con contenido interactivo actualizado para la Industria 4.0.",
      action: () => navigate("/procesos"),
      gradient: "from-blue-500 via-blue-600 to-indigo-700",
      particles: "✨",
      stats: "16+ Procesos",
      newFeature: "Simulaciones 3D",
    },
    {
      icon: Calculator,
      title: "Herramientas Interactivas de Última Generación",
      description:
        "Calculadoras avanzadas, simuladores CNC con IA y herramientas de control de calidad con normas ISO 2025.",
      action: () => navigate("/herramientas"),
      gradient: "from-emerald-500 via-green-600 to-teal-700",
      particles: "⚡",
      stats: "7 Herramientas",
      newFeature: "IA Integrada",
    },
    {
      icon: Award,
      title: "Centro de Evaluación Inteligente",
      description:
        "Sistema de evaluación adaptativo con 12 módulos especializados, retroalimentación personalizada y analytics avanzado.",
      action: () => navigate("/evaluacion"),
      gradient: "from-purple-500 via-violet-600 to-purple-700",
      particles: "🏆",
      stats: "12 Evaluaciones",
      newFeature: "Sistema Adaptativo",
    },
  ];

  // Quick Stats
  const stats = [
    {
      icon: Users,
      value: "8,450+",
      label: "Estudiantes Activos",
      color: "text-blue-500",
      trend: "+18% trimestre",
    },
    {
      icon: Calculator,
      value: "7",
      label: "Herramientas Interactivas",
      color: "text-green-500",
      trend: "+2 este mes",
    },
    {
      icon: BookOpen,
      value: "16+",
      label: "Procesos de Fabricación",
      color: "text-indigo-500",
      trend: "+3 nuevos",
    },
    {
      icon: TrendingUp,
      value: "97.2%",
      label: "Tasa de Éxito",
      color: "text-orange-500",
      trend: "+2.1% mejora",
    },
  ];

  // Achievements
  const achievements = [
    {
      icon: "🌟",
      title: "Premio Innovación Educativa",
      description: "Mejor plataforma STEM 2024",
    },
    {
      icon: "🏆",
      title: "Certificación ISO 9001:2025",
      description: "Calidad educativa internacional",
    },
    {
      icon: "🚀",
      title: "Tecnología de Vanguardia",
      description: "IA y simulaciones avanzadas",
    },
    {
      icon: "🌍",
      title: "Alcance Global",
      description: "Estudiantes en 25+ países",
    },
  ];

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-12">
      {/* Hero Section */}
      <motion.div
        className="text-center py-6 md:py-10"
        initial={{ opacity: 0, y: -30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.7 }}
      >
        <h1 className="text-4xl md:text-5xl font-extrabold text-gray-900 dark:text-white mb-4 drop-shadow-lg">
          Centro de Aprendizaje en Ingeniería Mecánica
        </h1>
        <p className="text-lg md:text-2xl text-gray-600 dark:text-gray-300 mb-4 max-w-2xl mx-auto">
          Plataforma educativa interactiva con simuladores, recursos multimedia
          y herramientas de última generación para la Industria 4.0
        </p>
        <button
          onClick={() => navigate("/procesos")}
          className="px-8 py-3 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold shadow-lg hover:scale-105 hover:from-purple-600 hover:to-pink-500 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400"
        >
          Explora los Procesos
        </button>
      </motion.div>

      {/* Quick Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-4">
        {stats.map((stat, idx) => (
          <motion.div
            key={stat.label}
            className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 flex flex-col items-center text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 * idx }}
          >
            <stat.icon size={32} className={`mb-2 ${stat.color}`} />
            <span className="text-2xl font-bold mb-1">{stat.value}</span>
            <span className="text-gray-600 dark:text-gray-300 text-sm mb-1">
              {stat.label}
            </span>
            <span className="text-xs text-green-600 dark:text-green-400">
              {stat.trend}
            </span>
          </motion.div>
        ))}
      </div>

      {/* Feature Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {features.map((feature, idx) => (
          <motion.div
            key={feature.title}
            className={`bg-gradient-to-br ${feature.gradient} rounded-2xl shadow-lg p-8 flex flex-col items-center text-center min-h-[340px] hover:scale-105 transition-transform duration-300`}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 * idx }}
          >
            <div className="text-5xl mb-4">{feature.particles}</div>
            <feature.icon size={56} className="mb-2" />
            <h3 className="text-2xl font-bold mb-2 text-white drop-shadow-lg">
              {feature.title}
            </h3>
            <p className="text-white/90 mb-4 text-base">
              {feature.description}
            </p>
            <div className="flex flex-col sm:flex-row items-center justify-center gap-2 mb-2">
              <span className="bg-white/20 rounded-full px-3 py-1 text-xs font-semibold text-white">
                {feature.stats}
              </span>
              <span className="bg-white/10 rounded-full px-3 py-1 text-xs font-semibold text-white">
                {feature.newFeature}
              </span>
            </div>
            <button
              onClick={feature.action}
              className="mt-auto px-6 py-2 bg-white/90 text-gray-900 font-semibold rounded-lg shadow hover:bg-white transition-colors w-full sm:w-auto"
            >
              Explorar
            </button>
          </motion.div>
        ))}
      </div>

      {/* Achievements Row */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6 mt-12">
        {achievements.map((ach, idx) => (
          <motion.div
            key={ach.title}
            className="bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-2xl p-6 border border-yellow-200 dark:border-yellow-800 flex flex-col items-center text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 * idx }}
          >
            <div className="text-3xl mb-2">{ach.icon}</div>
            <h4 className="font-bold text-lg mb-1 text-yellow-800 dark:text-yellow-200">
              {ach.title}
            </h4>
            <span className="text-gray-600 dark:text-gray-300 text-sm">
              {ach.description}
            </span>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default Home;
</file>

<file path="src/components/ProgressTracker.tsx">
import React from "react";
import { motion } from "framer-motion";
import {
  Trophy,
  Target,
  Clock,
  TrendingUp,
  Award,
  Star,
  CheckCircle,
} from "lucide-react";
import { useQuizProgress } from "../contexts/useQuizProgress";
import { useAchievements } from "../contexts/useAchievements";
import { useActivityLog } from "../contexts/ActivityLogContext";

const ProgressTracker: React.FC = () => {
  const { userProgress } = useQuizProgress();
  const { achievements } = useAchievements();
  const { activityLog } = useActivityLog();

  // Calculate stats from userProgress
  const quizIds = Object.keys(userProgress);
  const totalQuizzes = quizIds.length;
  const completedQuizzes = quizIds.filter(
    (id) => userProgress[id]?.completed
  ).length;
  const averageScore = (() => {
    const scores = quizIds
      .map((id) => userProgress[id]?.bestScore)
      .filter((score) => typeof score === "number" && !isNaN(score));
    if (scores.length === 0) return 0;
    return Math.round(
      scores.reduce((a, b) => a + (b as number), 0) / scores.length
    );
  })();

  // Safe guards for undefined/null/NaN values
  const completedLessons = completedQuizzes; // Alias for UI compatibility
  const totalLessons = totalQuizzes || 1;
  const studyTime = Number(userProgress.studyTime) || 0;
  const currentStreak = Number(userProgress.currentStreak) || 0;

  const completionPercentage =
    Math.round((completedLessons / totalLessons) * 100) || 0;
  const safeAverageScore = isNaN(averageScore) ? 0 : averageScore;

  const getScoreGradient = (score: number) => {
    if (score >= 90) return "from-green-500 to-emerald-600";
    if (score >= 80) return "from-blue-500 to-indigo-600";
    if (score >= 70) return "from-yellow-500 to-orange-600";
    return "from-red-500 to-pink-600";
  };

  // --- Dynamic Progreso por Módulo ---
  // Map module names to quiz IDs (category keys)
  const moduleMap = [
    { name: "Procesos de Remoción", ids: ["mecanizado"], category: "remocion" },
    {
      name: "Procesos de Conformado",
      ids: ["conformado"],
      category: "conformado",
    },
    { name: "Procesos de Unión", ids: ["soldadura"], category: "union" },
    { name: "Procesos de Moldeo", ids: ["fundicion"], category: "moldeo" },
    { name: "Control de Calidad", ids: ["calidad"], category: "calidad" },
    {
      name: "Ciencia de Materiales",
      ids: ["materiales"],
      category: "materiales",
    },
    {
      name: "Automatización",
      ids: ["automatizacion"],
      category: "automatizacion",
    },
    { name: "Seguridad", ids: ["seguridad"], category: "seguridad" },
    {
      name: "Mantenimiento",
      ids: ["mantenimiento"],
      category: "mantenimiento",
    },
    {
      name: "Termodinámica",
      ids: ["termodinamica"],
      category: "termodinamica",
    },
    { name: "Diseño Mecánico", ids: ["diseno"], category: "diseno" },
    { name: "Mecánica de Fluidos", ids: ["fluidos"], category: "fluidos" },
  ];
  const moduleProgress = moduleMap.map((mod) => {
    const total = mod.ids.length;
    const completed = mod.ids.filter(
      (id) => userProgress[id]?.completed
    ).length;
    return {
      name: mod.name,
      progress: Math.round((completed / total) * 100),
      color:
        total && completed === total
          ? "bg-green-500"
          : completed > 0
          ? "bg-blue-500"
          : "bg-gray-400",
    };
  });

  // --- Weekly Activity ---
  // Get last 7 days (Mon-Sun)
  const daysOfWeek = ["L", "M", "X", "J", "V", "S", "D"];
  const today = new Date();
  const weekDates = Array.from({ length: 7 }, (_, i) => {
    const d = new Date(today);
    d.setDate(today.getDate() - ((today.getDay() + 6) % 7) + i); // Monday as first day
    return d.toISOString().split("T")[0];
  });
  const weekActivity = weekDates.map((date) => activityLog[date] || 0);

  // Example: If you fetch progress or achievements from backend in the future
  // React.useEffect(() => {
  //   setLoading(true);
  //   setError(null);
  //   fetchDataFromBackend()
  //     .then(() => setLoading(false))
  //     .catch(() => { setError('Error al cargar datos.'); setLoading(false); });
  // }, []);

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      {/* Header */}
      <motion.div
        className="text-center"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
          📊 Tu Progreso de Aprendizaje
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-300">
          Sigue tu evolución y celebra tus logros académicos
        </p>
      </motion.div>

      {/* Main Stats Grid */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
        <motion.div
          className="bg-gradient-to-br from-blue-500 to-blue-600 text-white p-6 rounded-2xl shadow-lg"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.1 }}
        >
          <div className="flex items-center justify-between mb-4">
            <Target size={32} />
            <span className="text-3xl font-bold">{completionPercentage}%</span>
          </div>
          <h3 className="text-lg font-semibold mb-2">Progreso General</h3>
          <p className="text-sm opacity-90">
            {completedQuizzes} de {totalQuizzes} evaluaciones completadas
          </p>
          <div className="mt-4 bg-white/20 rounded-full h-2">
            <motion.div
              className="bg-white rounded-full h-2"
              initial={{ width: 0 }}
              animate={{ width: `${completionPercentage}%` }}
              transition={{ delay: 0.5, duration: 1 }}
            />
          </div>
        </motion.div>

        <motion.div
          className={`bg-gradient-to-br ${getScoreGradient(
            userProgress.averageScore
          )} text-white p-6 rounded-2xl shadow-lg`}
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.2 }}
        >
          <div className="flex items-center justify-between mb-4">
            <Trophy size={32} />
            <span className="text-3xl font-bold">{safeAverageScore}%</span>
          </div>
          <h3 className="text-lg font-semibold mb-2">Puntuación Promedio</h3>
          <p className="text-sm opacity-90">
            {completedQuizzes} evaluaciones completadas
          </p>
          <div className="mt-4 bg-white/20 rounded-full h-2">
            <motion.div
              className="bg-white rounded-full h-2"
              initial={{ width: 0 }}
              animate={{ width: `${safeAverageScore}%` }}
              transition={{ delay: 0.7, duration: 1 }}
            />
          </div>
        </motion.div>

        <motion.div
          className="bg-gradient-to-br from-purple-500 to-purple-600 text-white p-6 rounded-2xl shadow-lg"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
        >
          <div className="flex items-center justify-between mb-4">
            <Clock size={32} />
            <span className="text-3xl font-bold">{studyTime}h</span>
          </div>
          <h3 className="text-lg font-semibold mb-2">Tiempo de Estudio</h3>
          <p className="text-sm opacity-90">Esta semana: 8.5h</p>
          <div className="mt-4 flex items-center space-x-2">
            <TrendingUp size={16} />
            <span className="text-sm">+15% vs semana anterior</span>
          </div>
        </motion.div>

        <motion.div
          className="bg-gradient-to-br from-orange-500 to-red-600 text-white p-6 rounded-2xl shadow-lg"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.4 }}
        >
          <div className="flex items-center justify-between mb-4">
            <span className="text-3xl">🔥</span>
            <span className="text-3xl font-bold">{currentStreak}</span>
          </div>
          <h3 className="text-lg font-semibold mb-2">Racha Actual</h3>
          <p className="text-sm opacity-90">días consecutivos</p>
          <div className="mt-4 flex items-center space-x-1">
            {[...Array(7)].map((_, i) => (
              <div
                key={i}
                className={`w-3 h-3 rounded-full ${
                  i < currentStreak ? "bg-white" : "bg-white/30"
                }`}
              />
            ))}
          </div>
        </motion.div>
      </div>

      {/* Detailed Progress */}
      <div className="grid lg:grid-cols-2 gap-8">
        {/* Learning Progress */}
        <motion.div
          className="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg"
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.5 }}
        >
          <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
            <CheckCircle className="mr-3 text-green-500" size={24} />
            Progreso por Módulo
          </h3>

          <div className="space-y-4">
            {moduleProgress.map((module, index) => (
              <div key={index} className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="font-medium text-gray-700 dark:text-gray-300">
                    {module.name}
                  </span>
                  <span className="text-sm font-bold text-gray-600 dark:text-gray-400">
                    {module.progress}%
                  </span>
                </div>
                <div className="bg-gray-200 dark:bg-gray-700 rounded-full h-3">
                  <motion.div
                    className={`${module.color} rounded-full h-3`}
                    initial={{ width: 0 }}
                    animate={{ width: `${module.progress}%` }}
                    transition={{ delay: 0.8 + index * 0.1, duration: 0.8 }}
                  />
                </div>
              </div>
            ))}
          </div>
        </motion.div>

        {/* Achievements */}
        <motion.div
          className="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg"
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.6 }}
        >
          <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
            <Award className="mr-3 text-yellow-500" size={24} />
            Logros Desbloqueados
          </h3>

          <div className="space-y-4">
            {achievements.filter((a) => a.unlocked).length === 0 ? (
              <div className="text-center text-gray-400 dark:text-gray-500 py-8">
                <span className="text-4xl block mb-2">🔒</span>
                <span className="font-semibold">
                  Aún no has desbloqueado logros. ¡Sigue aprendiendo!
                </span>
              </div>
            ) : (
              achievements
                .filter((a) => a.unlocked)
                .map((achievement, index) => (
                  <motion.div
                    key={achievement.id}
                    className={`flex items-center space-x-4 p-4 rounded-xl transition-all bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border border-yellow-200 dark:border-yellow-800`}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.8 + index * 0.1 }}
                  >
                    <div className="text-3xl">{achievement.icon}</div>
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900 dark:text-white">
                        {achievement.title}
                      </h4>
                      <p className="text-sm text-gray-600 dark:text-gray-300">
                        {achievement.description}
                      </p>
                      {achievement.date && (
                        <p className="text-xs text-yellow-600 dark:text-yellow-400 mt-1">
                          Desbloqueado: {achievement.date}
                        </p>
                      )}
                    </div>
                    <motion.div
                      animate={{ scale: [1, 1.2, 1] }}
                      transition={{ duration: 2, repeat: Infinity }}
                    >
                      <Star className="text-yellow-500" size={20} />
                    </motion.div>
                  </motion.div>
                ))
            )}
          </div>
        </motion.div>
      </div>

      {/* Weekly Activity Chart */}
      <motion.div
        className="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.7 }}
      >
        <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-6">
          📈 Actividad Semanal
        </h3>

        <div className="grid grid-cols-7 gap-2">
          {daysOfWeek.map((day, index) => (
            <div key={index} className="text-center">
              <div className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">
                {day}
              </div>
              <motion.div
                className={`rounded-lg ${
                  weekActivity[index] > 0
                    ? "bg-gradient-to-t from-blue-400 to-blue-600"
                    : "bg-gray-200 dark:bg-gray-700"
                }`}
                initial={{ height: 0 }}
                animate={{ height: `${20 + weekActivity[index] * 20}px` }}
                transition={{ delay: 1 + index * 0.1, duration: 0.5 }}
                style={{ minHeight: 20 }}
              />
              <div className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                {weekActivity[index] > 0 ? `${weekActivity[index]} quiz` : "0"}
              </div>
            </div>
          ))}
        </div>
      </motion.div>
    </div>
  );
};

export default ProgressTracker;
</file>

<file path="src/components/ToolsSection.tsx">
import React from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  Calculator,
  Zap,
  Hammer,
  ChevronRight,
  Search,
  Settings,
  Ruler,
  Cog,
  Thermometer,
  Code,
  Atom,
} from "lucide-react";
import VelocidadCorteCalculator from "./tools/VelocidadCorteCalculator";
import SoldaduraQuiz from "./tools/SoldaduraQuiz";
import ForjadoSimulator from "./tools/ForjadoSimulator";
import MecanizadoSimulator from "./tools/MecanizadoSimulator";
import CalidadInspector from "./tools/CalidadInspector";
import ToleranciaCalculator from "./tools/ToleranciaCalculator";
import EngranajCalculator from "./tools/EngranajCalculator";
import MaterialesCalculator from "./tools/MaterialesCalculator";

const ToolsSection: React.FC = () => {
  const { toolId } = useParams<{ toolId?: string }>();
  const navigate = useNavigate();

  const tools = [
    {
      id: "velocidad-corte",
      name: "Calculadora de Velocidad de Corte",
      description:
        "Optimiza tus parámetros de mecanizado para diferentes materiales y herramientas",
      icon: Calculator,
      color: "from-blue-500 to-blue-600",
      emoji: "🔧",
      category: "Cálculo",
      available: true,
    },
    {
      id: "tolerancia-calculator",
      name: "Calculadora de Tolerancias ISO",
      description:
        "Sistema completo de tolerancias y ajustes según norma ISO 286",
      icon: Ruler,
      color: "from-indigo-500 to-purple-600",
      emoji: "📐",
      category: "Cálculo",
      available: true,
    },
    {
      id: "engranaj-calculator",
      name: "Calculadora de Engranajes",
      description:
        "Diseño y análisis de transmisiones por engranajes cilíndricos",
      icon: Cog,
      color: "from-purple-500 to-pink-600",
      emoji: "⚙️",
      category: "Cálculo",
      available: true,
    },
    {
      id: "materiales-calculator",
      name: "Calculadora de Propiedades de Materiales",
      description:
        "Análisis comparativo y selección de materiales de ingeniería",
      icon: Atom,
      color: "from-cyan-500 to-blue-500",
      emoji: "🧪",
      category: "Cálculo",
      available: true,
    },
    {
      id: "soldadura-quiz",
      name: "Quiz de Soldadura",
      description:
        "Evalúa tus conocimientos sobre procesos de soldadura industrial",
      icon: Zap,
      color: "from-orange-500 to-red-600",
      emoji: "⚡",
      category: "Evaluación",
      available: true,
    },
    {
      id: "forjado-simulator",
      name: "Simulador de Forjado",
      description:
        "Experimenta con diferentes parámetros de forjado en tiempo real",
      icon: Hammer,
      color: "from-red-500 to-pink-600",
      emoji: "🔨",
      category: "Simulación",
      available: true,
    },
    {
      id: "mecanizado-simulator",
      name: "Simulador de Mecanizado CNC",
      description:
        "Simula procesos de torneado y fresado con diferentes materiales",
      icon: Settings,
      color: "from-indigo-500 to-purple-600",
      emoji: "⚙️",
      category: "Simulación",
      available: true,
    },
    {
      id: "calidad-inspector",
      name: "Inspector de Control de Calidad",
      description:
        "Herramienta de verificación dimensional y análisis de tolerancias",
      icon: Search,
      color: "from-green-500 to-teal-600",
      emoji: "🔍",
      category: "Inspección",
      available: true,
    },
    {
      id: "tratamiento-termico",
      name: "Simulador de Tratamientos Térmicos",
      description:
        "Simula procesos de temple, revenido y normalizado de aceros",
      icon: Thermometer,
      color: "from-red-400 to-orange-500",
      emoji: "🌡️",
      category: "Simulación",
      available: false,
    },
    {
      id: "cnc-programmer",
      name: "Programador CNC Virtual",
      description: "Entorno de programación CNC con simulación de trayectorias",
      icon: Code,
      color: "from-cyan-500 to-blue-500",
      emoji: "🤖",
      category: "Simulación",
      available: false,
    },
  ];

  if (toolId) {
    return (
      <div className="max-w-7xl mx-auto px-2 sm:px-4 md:px-8 py-8">
        <div className="mb-6">
          <button
            onClick={() => navigate("/herramientas")}
            className="flex items-center space-x-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 transition-colors"
          >
            <span>←</span>
            <span>Volver a Herramientas</span>
          </button>
        </div>

        {toolId === "velocidad-corte" && <VelocidadCorteCalculator />}
        {toolId === "tolerancia-calculator" && <ToleranciaCalculator />}
        {toolId === "engranaj-calculator" && <EngranajCalculator />}
        {toolId === "materiales-calculator" && <MaterialesCalculator />}
        {toolId === "soldadura-quiz" && <SoldaduraQuiz />}
        {toolId === "forjado-simulator" && <ForjadoSimulator />}
        {toolId === "mecanizado-simulator" && <MecanizadoSimulator />}
        {toolId === "calidad-inspector" && <CalidadInspector />}
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-2 sm:px-4 md:px-8 py-12">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
          🛠️ Herramientas Interactivas Avanzadas
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-300">
          Suite completa de herramientas especializadas para aplicar
          conocimientos teóricos en situaciones prácticas de ingeniería mecánica
          moderna.
        </p>
      </div>

      {/* Enhanced Statistics */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-12">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 rounded-xl shadow-lg">
          <div className="flex items-center justify-between mb-2">
            <Calculator size={24} />
            <span className="text-2xl font-bold">8</span>
          </div>
          <div className="text-sm opacity-90">Herramientas Disponibles</div>
          <div className="text-xs opacity-75 mt-1">+1 nueva este mes</div>
        </div>

        <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-6 rounded-xl shadow-lg">
          <div className="flex items-center justify-between mb-2">
            <Settings size={24} />
            <span className="text-2xl font-bold">3</span>
          </div>
          <div className="text-sm opacity-90">Simuladores Avanzados</div>
          <div className="text-xs opacity-75 mt-1">Con física realista</div>
        </div>

        <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-6 rounded-xl shadow-lg">
          <div className="flex items-center justify-between mb-2">
            <Ruler size={24} />
            <span className="text-2xl font-bold">4</span>
          </div>
          <div className="text-sm opacity-90">Calculadoras Técnicas</div>
          <div className="text-xs opacity-75 mt-1">Normas internacionales</div>
        </div>

        <div className="bg-gradient-to-r from-orange-500 to-orange-600 text-white p-6 rounded-xl shadow-lg">
          <div className="flex items-center justify-between mb-2">
            <Search size={24} />
            <span className="text-2xl font-bold">1</span>
          </div>
          <div className="text-sm opacity-90">Herramientas de Calidad</div>
          <div className="text-xs opacity-75 mt-1">Control dimensional</div>
        </div>
      </div>

      {/* Tools by Category */}
      <div className="space-y-8">
        {/* Calculation Tools */}
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
            <span className="text-3xl mr-3">🧮</span>
            Herramientas de Cálculo Avanzado
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {tools
              .filter((tool) => tool.category === "Cálculo")
              .map((tool) => {
                const Icon = tool.icon;
                return (
                  <div
                    key={tool.id}
                    onClick={() =>
                      tool.available
                        ? navigate(`/herramientas/${tool.id}`)
                        : null
                    }
                    className={`group bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 overflow-hidden ${
                      tool.available
                        ? "cursor-pointer hover:border-blue-200 dark:hover:border-blue-600"
                        : "opacity-75"
                    }`}
                  >
                    <div
                      className={`bg-gradient-to-r ${tool.color} p-6 text-white relative overflow-hidden`}
                    >
                      <div className="absolute top-0 right-0 w-20 h-20 bg-white/10 rounded-full -mr-10 -mt-10"></div>
                      <div className="flex items-center justify-between mb-4 relative z-10">
                        <span className="text-4xl">{tool.emoji}</span>
                        <Icon size={28} className="opacity-80" />
                      </div>
                      <h3 className="text-xl font-bold mb-2 relative z-10">
                        {tool.name}
                      </h3>
                      <div className="text-xs opacity-75 relative z-10">
                        {tool.available ? "Disponible" : "En desarrollo"}
                      </div>
                    </div>

                    <div className="p-6">
                      <p className="text-gray-600 dark:text-gray-300 mb-6 leading-relaxed">
                        {tool.description}
                      </p>

                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500 dark:text-gray-400">
                          {tool.category}
                        </span>
                        <div
                          className={`flex items-center font-medium transition-transform ${
                            tool.available
                              ? "text-blue-600 dark:text-blue-400 group-hover:translate-x-2"
                              : "text-gray-400"
                          }`}
                        >
                          <span>
                            {tool.available ? "Abrir" : "Próximamente"}
                          </span>
                          {tool.available && (
                            <ChevronRight size={16} className="ml-1" />
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
          </div>
        </div>

        {/* Simulation Tools */}
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
            <span className="text-3xl mr-3">🎮</span>
            Simuladores Interactivos de Última Generación
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {tools
              .filter((tool) => tool.category === "Simulación")
              .map((tool) => {
                const Icon = tool.icon;
                return (
                  <div
                    key={tool.id}
                    onClick={() =>
                      tool.available
                        ? navigate(`/herramientas/${tool.id}`)
                        : null
                    }
                    className={`group bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 overflow-hidden ${
                      tool.available
                        ? "cursor-pointer hover:border-blue-200 dark:hover:border-blue-600"
                        : "opacity-75"
                    }`}
                  >
                    <div
                      className={`bg-gradient-to-r ${tool.color} p-6 text-white relative overflow-hidden`}
                    >
                      <div className="absolute top-0 right-0 w-20 h-20 bg-white/10 rounded-full -mr-10 -mt-10"></div>
                      <div className="flex items-center justify-between mb-4 relative z-10">
                        <span className="text-4xl">{tool.emoji}</span>
                        <Icon size={28} className="opacity-80" />
                      </div>
                      <h3 className="text-xl font-bold mb-2 relative z-10">
                        {tool.name}
                      </h3>
                      <div className="text-xs opacity-75 relative z-10">
                        {tool.available ? "Disponible" : "En desarrollo"}
                      </div>
                    </div>

                    <div className="p-6">
                      <p className="text-gray-600 dark:text-gray-300 mb-6 leading-relaxed">
                        {tool.description}
                      </p>

                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500 dark:text-gray-400">
                          {tool.category}
                        </span>
                        <div
                          className={`flex items-center font-medium transition-transform ${
                            tool.available
                              ? "text-blue-600 dark:text-blue-400 group-hover:translate-x-2"
                              : "text-gray-400"
                          }`}
                        >
                          <span>
                            {tool.available ? "Abrir" : "Próximamente"}
                          </span>
                          {tool.available && (
                            <ChevronRight size={16} className="ml-1" />
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
          </div>
        </div>

        {/* Quality & Evaluation Tools */}
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
            <span className="text-3xl mr-3">📊</span>
            Evaluación y Control de Calidad Industrial
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {tools
              .filter(
                (tool) =>
                  tool.category === "Evaluación" ||
                  tool.category === "Inspección"
              )
              .map((tool) => {
                const Icon = tool.icon;
                return (
                  <div
                    key={tool.id}
                    onClick={() =>
                      tool.available
                        ? navigate(`/herramientas/${tool.id}`)
                        : null
                    }
                    className={`group bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 overflow-hidden ${
                      tool.available
                        ? "cursor-pointer hover:border-blue-200 dark:hover:border-blue-600"
                        : "opacity-75"
                    }`}
                  >
                    <div
                      className={`bg-gradient-to-r ${tool.color} p-6 text-white relative overflow-hidden`}
                    >
                      <div className="absolute top-0 right-0 w-20 h-20 bg-white/10 rounded-full -mr-10 -mt-10"></div>
                      <div className="flex items-center justify-between mb-4 relative z-10">
                        <span className="text-4xl">{tool.emoji}</span>
                        <Icon size={28} className="opacity-80" />
                      </div>
                      <h3 className="text-xl font-bold mb-2 relative z-10">
                        {tool.name}
                      </h3>
                      <div className="text-xs opacity-75 relative z-10">
                        {tool.available ? "Disponible" : "En desarrollo"}
                      </div>
                    </div>

                    <div className="p-6">
                      <p className="text-gray-600 dark:text-gray-300 mb-6 leading-relaxed">
                        {tool.description}
                      </p>

                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500 dark:text-gray-400">
                          {tool.category}
                        </span>
                        <div
                          className={`flex items-center font-medium transition-transform ${
                            tool.available
                              ? "text-blue-600 dark:text-blue-400 group-hover:translate-x-2"
                              : "text-gray-400"
                          }`}
                        >
                          <span>
                            {tool.available ? "Abrir" : "Próximamente"}
                          </span>
                          {tool.available && (
                            <ChevronRight size={16} className="ml-1" />
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
          </div>
        </div>
      </div>

      {/* Enhanced Development Roadmap */}
      <div className="mt-12 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-8">
        <div className="text-center mb-8">
          <div className="text-4xl mb-4">🚀</div>
          <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
            Roadmap de Desarrollo 2025
          </h3>
          <p className="text-gray-600 dark:text-gray-300 mb-6">
            Estamos desarrollando herramientas de vanguardia con inteligencia
            artificial y realidad aumentada para revolucionar el aprendizaje en
            ingeniería mecánica.
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg border-l-4 border-red-500">
            <div className="text-2xl mb-3">🌡️</div>
            <h4 className="font-semibold mb-2">
              Simulador de Tratamientos Térmicos
            </h4>
            <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
              Simulación completa de procesos de temple, revenido y normalizado
            </p>
            <div className="text-xs text-red-600 font-medium">Q2 2025</div>
          </div>

          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg border-l-4 border-blue-500">
            <div className="text-2xl mb-3">🤖</div>
            <h4 className="font-semibold mb-2">Programador CNC Virtual</h4>
            <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
              Entorno completo de programación CNC con simulación 3D
            </p>
            <div className="text-xs text-blue-600 font-medium">Q3 2025</div>
          </div>

          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg border-l-4 border-green-500">
            <div className="text-2xl mb-3">🔬</div>
            <h4 className="font-semibold mb-2">
              Laboratorio Virtual de Materiales
            </h4>
            <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
              Ensayos virtuales de tracción, dureza y fatiga
            </p>
            <div className="text-xs text-green-600 font-medium">Q4 2025</div>
          </div>

          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg border-l-4 border-purple-500">
            <div className="text-2xl mb-3">🥽</div>
            <h4 className="font-semibold mb-2">
              Realidad Aumentada Industrial
            </h4>
            <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
              Visualización AR de procesos y mantenimiento
            </p>
            <div className="text-xs text-purple-600 font-medium">2026</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ToolsSection;
</file>

<file path="src/components/tools/EngranajCalculator.tsx">
import React, { useEffect, useState } from "react";
import { supabase } from "../../supabaseClient";
import { Settings, Calculator, Info, RotateCcw, Cog } from "lucide-react";

interface Material {
  id: string;
  name: string;
  density: number;
  yield_strength?: number;
  ultimate_strength?: number;
  hardness?: number;
}

interface GearApplication {
  id: string;
  name: string;
  service_factor: number;
  description?: string;
}

const EngranajCalculator: React.FC = () => {
  // --- Dynamic Materials from Supabase ---
  const [materials, setMaterials] = useState<Material[]>([]);
  const [loadingMaterials, setLoadingMaterials] = useState(true);
  const [errorMaterials, setErrorMaterials] = useState<string | null>(null);

  // --- Dynamic Applications from Supabase ---
  const [applications, setApplications] = useState<GearApplication[]>([]);
  const [loadingApplications, setLoadingApplications] = useState(true);
  const [errorApplications, setErrorApplications] = useState<string | null>(
    null
  );

  useEffect(() => {
    const fetchMaterials = async () => {
      setLoadingMaterials(true);
      setErrorMaterials(null);
      console.log("Connecting to Supabase to fetch materials...");
      const { data, error } = await supabase.from("materials").select("*");
      if (error) {
        setErrorMaterials("No se pudieron cargar los materiales.");
        console.error("Supabase materials fetch error:", error);
      } else {
        // Convertir a número los campos relevantes
        setMaterials(
          (data || []).map((mat) => ({
            ...mat,
            density: Number(mat.density),
            yield_strength:
              mat.yield_strength !== null && mat.yield_strength !== undefined
                ? Number(mat.yield_strength)
                : undefined,
            ultimate_strength:
              mat.ultimate_strength !== null &&
              mat.ultimate_strength !== undefined
                ? Number(mat.ultimate_strength)
                : undefined,
            hardness:
              mat.hardness !== null && mat.hardness !== undefined
                ? Number(mat.hardness)
                : undefined,
          }))
        );
        console.log("Supabase connection OK. Materials:", data);
      }
      setLoadingMaterials(false);
    };
    fetchMaterials();
  }, []);

  useEffect(() => {
    const fetchApplications = async () => {
      setLoadingApplications(true);
      setErrorApplications(null);
      console.log("Connecting to Supabase to fetch gear applications...");
      const { data, error } = await supabase
        .from("gear_applications")
        .select("*");
      if (error) {
        setErrorApplications("No se pudieron cargar los tipos de aplicación.");
        console.error("Supabase gear_applications fetch error:", error);
      } else {
        // Compatibilidad: acepta service_factor o servicefactor
        setApplications(
          (data || []).map((app) => ({
            ...app,
            service_factor:
              app.service_factor !== null && app.service_factor !== undefined
                ? Number(app.service_factor)
                : app.servicefactor !== null && app.servicefactor !== undefined
                ? Number(app.servicefactor)
                : undefined,
          }))
        );
        console.log("Supabase connection OK. Gear Applications:", data);
      }
      setLoadingApplications(false);
    };
    fetchApplications();
  }, []);

  // --- UI State ---
  const [module, setModule] = useState<number>(2);
  const [teethPinion, setTeethPinion] = useState<number>(20);
  const [teethGear, setTeethGear] = useState<number>(60);
  const [pressureAngle, setPressureAngle] = useState<number>(20);
  const [faceWidth, setFaceWidth] = useState<number>(25);
  const [materialId, setMaterialId] = useState<string>("");
  const [applicationId, setApplicationId] = useState<string>("");

  // --- Find selected material/application ---
  const materialData = materials.find((m) => m.id === materialId);
  const appData = applications.find((a) => a.id === applicationId);

  // Debug: log types and values for diagnosis (debe ir después de la declaración de materialData y appData)
  useEffect(() => {
    if (materialData) {
      console.log(
        "Material yield_strength:",
        materialData.yield_strength,
        typeof materialData.yield_strength
      );
    }
    if (appData) {
      console.log(
        "Application service_factor:",
        appData.service_factor,
        typeof appData.service_factor
      );
    }
  }, [materialData, appData]);

  // Set default materialId and applicationId after data loads
  useEffect(() => {
    if (materials.length && !materialId) {
      setMaterialId(materials[0].id);
    }
  }, [materials, materialId]);

  useEffect(() => {
    if (applications.length && !applicationId) {
      setApplicationId(applications[0].id);
    }
  }, [applications, applicationId]);

  // --- Calculations (only if materialData exists) ---
  const validYield =
    materialData &&
    typeof materialData.yield_strength === "number" &&
    materialData.yield_strength > 0;
  const validService =
    appData &&
    typeof appData.service_factor === "number" &&
    appData.service_factor > 0;
  const gearRatio = teethGear / teethPinion;
  const pitchDiameterPinion = module * teethPinion;
  const pitchDiameterGear = module * teethGear;
  const outsideDiameterPinion = pitchDiameterPinion + 2 * module;
  const outsideDiameterGear = pitchDiameterGear + 2 * module;
  const rootDiameterPinion = pitchDiameterPinion - 2.5 * module;
  const rootDiameterGear = pitchDiameterGear - 2.5 * module;
  const centerDistance = (pitchDiameterPinion + pitchDiameterGear) / 2;
  const circularPitch = Math.PI * module;
  const lewisFormFactor = 0.154 - 0.912 / teethPinion;
  const allowableLoad =
    validYield && validService
      ? ((materialData.yield_strength as number) *
          faceWidth *
          module *
          lewisFormFactor) /
        (appData.service_factor as number)
      : null;
  const assumedRPM = 1000;
  const tangentialVelocity =
    (Math.PI * pitchDiameterPinion * assumedRPM) / (60 * 1000);
  const volumePinion =
    (Math.PI * Math.pow(outsideDiameterPinion / 2, 2) * faceWidth) /
    1_000_000_000;
  const volumeGear =
    (Math.PI * Math.pow(outsideDiameterGear / 2, 2) * faceWidth) /
    1_000_000_000;
  const weightPinion = materialData
    ? volumePinion * materialData.density * 1000
    : 0;
  const weightGear = materialData
    ? volumeGear * materialData.density * 1000
    : 0;

  const resetCalculator = () => {
    setModule(2);
    setTeethPinion(20);
    setTeethGear(60);
    setPressureAngle(20);
    setFaceWidth(25);
    setMaterialId(materials[0]?.id || "");
    setApplicationId(applications[0]?.id || "");
  };

  const getApplicationColor = (app: string) => {
    switch (app) {
      case "general":
        return "text-blue-600";
      case "pesado":
        return "text-red-600";
      case "intermitente":
        return "text-green-600";
      case "precision":
        return "text-purple-600";
      default:
        return "text-gray-600";
    }
  };

  // --- Input validation helpers ---
  const validateInputs = () => {
    if (module < 0.5 || module > 10)
      return "El módulo debe estar entre 0.5 y 10 mm.";
    if (teethPinion < 12 || teethPinion > 100)
      return "El piñón debe tener entre 12 y 100 dientes.";
    if (teethGear < 15 || teethGear > 200)
      return "El engranaje debe tener entre 15 y 200 dientes.";
    if (faceWidth < 5 || faceWidth > 100)
      return "El ancho de cara debe estar entre 5 y 100 mm.";
    if (pressureAngle !== 14.5 && pressureAngle !== 20 && pressureAngle !== 25)
      return "Ángulo de presión no válido.";
    if (teethGear <= teethPinion)
      return "El engranaje debe tener más dientes que el piñón.";
    if (!materialData) return "Selecciona un material válido.";
    if (!appData) return "Selecciona un tipo de aplicación válido.";
    return null;
  };
  const inputError = validateInputs();

  if (loadingMaterials || loadingApplications)
    return <div>Cargando datos...</div>;
  if (errorMaterials) return <div>{errorMaterials}</div>;
  if (errorApplications) return <div>{errorApplications}</div>;
  if (!materialData) return <div>No hay materiales disponibles.</div>;
  if (!appData) return <div>No hay tipos de aplicación disponibles.</div>;

  return (
    <div className="max-w-2xl mx-auto p-4 sm:p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg">
      <div className="mb-4 p-3 bg-yellow-100 text-yellow-800 rounded-lg border border-yellow-300 text-center text-sm">
        ⚠️ Esta herramienta es solo para fines educativos y de referencia. Los
        resultados no deben usarse para diseño industrial real sin validación
        profesional.
      </div>

      {inputError && (
        <div className="mb-4 p-4 bg-red-100 text-red-700 rounded-lg border border-red-300 text-center">
          {inputError}
        </div>
      )}

      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-purple-600 to-indigo-600 p-6 text-white">
          <div className="flex items-center space-x-3">
            <Cog size={28} />
            <div>
              <h2 className="text-2xl font-bold">
                Calculadora de Engranajes Cilíndricos
              </h2>
              <p className="opacity-90">
                Diseño y análisis de transmisiones por engranajes
              </p>
            </div>
          </div>
        </div>

        <div className="p-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* Input Panel */}
            <div className="space-y-6">
              <div className="bg-purple-50 dark:bg-purple-900/20 p-6 rounded-lg">
                <h3 className="text-lg font-semibold text-purple-800 dark:text-purple-200 mb-4">
                  ⚙️ Parámetros Geométricos
                </h3>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Módulo (mm)
                    </label>
                    <input
                      type="number"
                      value={module}
                      onChange={(e) => setModule(Number(e.target.value))}
                      step="0.5"
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-purple-500"
                      min="0.5"
                      max="10"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Dientes del Piñón
                    </label>
                    <input
                      type="number"
                      value={teethPinion}
                      onChange={(e) => setTeethPinion(Number(e.target.value))}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-purple-500"
                      min="12"
                      max="100"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Dientes del Engranaje
                    </label>
                    <input
                      type="number"
                      value={teethGear}
                      onChange={(e) => setTeethGear(Number(e.target.value))}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-purple-500"
                      min="15"
                      max="200"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Ángulo de Presión (°)
                    </label>
                    <select
                      value={pressureAngle}
                      onChange={(e) => setPressureAngle(Number(e.target.value))}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-purple-500"
                    >
                      <option value={14.5}>14.5° - Estándar antiguo</option>
                      <option value={20}>20° - Estándar moderno</option>
                      <option value={25}>25° - Alta resistencia</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Ancho de Cara (mm)
                    </label>
                    <input
                      type="number"
                      value={faceWidth}
                      onChange={(e) => setFaceWidth(Number(e.target.value))}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-purple-500"
                      min="5"
                      max="100"
                    />
                  </div>
                </div>
              </div>

              <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
                <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-4">
                  🔧 Material y Aplicación
                </h3>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Material
                    </label>
                    <select
                      value={materialId}
                      onChange={(e) => setMaterialId(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                    >
                      {materials.map((mat) => (
                        <option key={mat.id} value={mat.id}>
                          {mat.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Tipo de Aplicación
                    </label>
                    <select
                      value={applicationId}
                      onChange={(e) => setApplicationId(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
                    >
                      {applications.map((app) => (
                        <option key={app.id} value={app.id}>
                          {app.name}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>

              <button
                onClick={resetCalculator}
                className="flex items-center space-x-2 px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                <RotateCcw size={18} />
                <span>Reiniciar</span>
              </button>
            </div>

            {/* Results Panel */}
            <div className="lg:col-span-2 space-y-6">
              {/* Basic Calculations */}
              <div className="bg-white dark:bg-gray-700 rounded-lg p-6 border border-purple-200 dark:border-purple-700">
                <h3 className="text-lg font-semibold text-purple-800 dark:text-purple-200 mb-4 flex items-center">
                  <Calculator size={20} className="mr-2" />
                  Cálculos Fundamentales
                </h3>

                <div className="grid md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <h4 className="font-medium text-gray-900 dark:text-white">
                      Piñón
                    </h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>Diámetro Primitivo:</span>
                        <span className="font-bold">
                          {pitchDiameterPinion.toFixed(2)} mm
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Diámetro Exterior:</span>
                        <span className="font-bold">
                          {outsideDiameterPinion.toFixed(2)} mm
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Diámetro Interior:</span>
                        <span className="font-bold">
                          {rootDiameterPinion.toFixed(2)} mm
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Peso Aproximado:</span>
                        <span className="font-bold">
                          {weightPinion.toFixed(2)} kg
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-3">
                    <h4 className="font-medium text-gray-900 dark:text-white">
                      Engranaje
                    </h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>Diámetro Primitivo:</span>
                        <span className="font-bold">
                          {pitchDiameterGear.toFixed(2)} mm
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Diámetro Exterior:</span>
                        <span className="font-bold">
                          {outsideDiameterGear.toFixed(2)} mm
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Diámetro Interior:</span>
                        <span className="font-bold">
                          {rootDiameterGear.toFixed(2)} mm
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Peso Aproximado:</span>
                        <span className="font-bold">
                          {weightGear.toFixed(2)} kg
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Transmission Parameters */}
              <div className="bg-white dark:bg-gray-700 rounded-lg p-6 border border-blue-200 dark:border-blue-700">
                <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-4 flex items-center">
                  <Settings size={20} className="mr-2" />
                  Parámetros de Transmisión
                </h3>

                <div className="grid md:grid-cols-3 gap-4">
                  <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-blue-600 mb-1">
                      {gearRatio.toFixed(2)}:1
                    </div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">
                      Relación de Transmisión
                    </div>
                  </div>

                  <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-green-600 mb-1">
                      {centerDistance.toFixed(2)} mm
                    </div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">
                      Distancia entre Centros (mm)
                    </div>
                  </div>

                  <div className="bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-orange-600 mb-1">
                      {circularPitch.toFixed(2)} mm
                    </div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">
                      Paso Circular (mm)
                    </div>
                  </div>
                </div>
              </div>

              {/* Strength Analysis */}
              <div className="bg-white dark:bg-gray-700 rounded-lg p-6 border border-green-200 dark:border-green-700">
                <h3 className="text-lg font-semibold text-green-800 dark:text-green-200 mb-4 flex items-center">
                  <Info size={20} className="mr-2" />
                  Análisis de Resistencia
                </h3>

                <div className="space-y-4">
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
                      <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">
                        Carga Admisible
                      </div>
                      <div className="text-xl font-bold text-green-600">
                        {allowableLoad === null
                          ? "No disponible"
                          : allowableLoad.toFixed(0) + " N"}
                      </div>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
                      <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">
                        Velocidad Tangencial
                      </div>
                      <div className="text-xl font-bold text-blue-600">
                        {tangentialVelocity.toFixed(2)} m/s
                      </div>
                    </div>
                  </div>

                  <div className="p-4 bg-gray-50 dark:bg-gray-600 rounded-lg">
                    <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                      Configuración Actual:
                    </div>
                    <div className="flex flex-wrap gap-4 text-sm">
                      <span>
                        <strong>Material:</strong> {materialData.name}
                      </span>
                      <span>
                        <strong>Aplicación:</strong> {appData.name}
                      </span>
                      <span
                        className={`font-medium ${getApplicationColor(
                          applicationId
                        )}`}
                      >
                        Factor de Servicio:{" "}
                        {validService
                          ? appData.service_factor
                          : appData && appData.service_factor === undefined
                          ? "(Dato no encontrado en BD)"
                          : "No disponible"}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Visual Representation */}
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4">
                  Representación Esquemática
                </h3>

                <div
                  className="relative mx-auto"
                  style={{ width: "400px", height: "200px" }}
                >
                  {/* Pinion */}
                  <div
                    className="absolute bg-purple-300 dark:bg-purple-600 rounded-full border-4 border-purple-500 flex items-center justify-center"
                    style={{
                      width: `${pitchDiameterPinion * 0.8}px`,
                      height: `${pitchDiameterPinion * 0.8}px`,
                      left: "50px",
                      top: "50%",
                      transform: "translateY(-50%)",
                    }}
                  >
                    <span className="text-xs font-bold text-white">
                      {teethPinion}T
                    </span>
                  </div>

                  {/* Gear */}
                  <div
                    className="absolute bg-blue-300 dark:bg-blue-600 rounded-full border-4 border-blue-500 flex items-center justify-center"
                    style={{
                      width: `${pitchDiameterGear * 0.8}px`,
                      height: `${pitchDiameterGear * 0.8}px`,
                      right: "50px",
                      top: "50%",
                      transform: "translateY(-50%)",
                    }}
                  >
                    <span className="text-xs font-bold text-white">
                      {teethGear}T
                    </span>
                  </div>

                  {/* Center distance line */}
                  <div className="absolute top-1/2 left-0 right-0 h-0.5 bg-gray-400 dark:bg-gray-500"></div>
                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-6 text-xs text-gray-600 dark:text-gray-400">
                    {centerDistance.toFixed(1)} mm
                  </div>
                </div>
              </div>

              {/* Design Recommendations */}
              <div className="bg-yellow-50 dark:bg-yellow-900/20 p-6 rounded-lg">
                <h4 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-3">
                  💡 Recomendaciones de Diseño
                </h4>
                <ul className="text-sm text-yellow-700 dark:text-yellow-300 space-y-1">
                  <li>
                    • Verificar que el número mínimo de dientes evite
                    interferencia
                  </li>
                  <li>
                    • Considerar lubricación adecuada para la velocidad
                    calculada
                  </li>
                  <li>
                    • Evaluar la necesidad de tratamiento térmico según la
                    aplicación
                  </li>
                  <li>• Verificar tolerancias de fabricación y montaje</li>
                  <li>
                    • Considerar factores dinámicos para altas velocidades
                  </li>
                  <li>
                    • Analizar deflexiones en ejes para anchos de cara grandes
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EngranajCalculator;
</file>

<file path="package.json">
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.50.0",
    "brace-expansion": "^2.0.2",
    "chart.js": "^4.5.0",
    "framer-motion": "^10.16.16",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.1",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.6.2",
    "recharts": "^2.8.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.5.2",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^6.3.5"
  }
}
</file>

<file path="README.md">
# Centro de Aprendizaje

![Project Status](https://img.shields.io/badge/status-active-brightgreen)

Plataforma interactiva para el aprendizaje y desarrollo de habilidades en procesos de manufactura como forjado, soldadura y corte. Incluye simuladores, quizzes, calculadoras técnicas y seguimiento de progreso, todo en una SPA moderna y responsiva.

## 🚀 Características Principales

- **SPA Moderna:** Navegación fluida con React Router y scroll-to-top automático.
- **Simuladores Interactivos:** Herramientas prácticas como `ForjadoSimulator` y `MecanizadoSimulator`.
- **Quizzes y Evaluaciones:** Módulos como `SoldaduraQuiz` para evaluar el conocimiento en soldadura.
- **Calculadoras Técnicas Avanzadas:** Utilidades como `VelocidadCorteCalculator` y `ToleranciaCalculator`, ahora con:
  - Comparación de múltiples materiales en gráficos interactivos.
  - Exportación de resultados y análisis a PDF.
  - Botón de copiar resultados al portapapeles.
  - Animaciones, badges y mejoras de accesibilidad.
- **Planificador de Estudio:** Organiza tu ruta de aprendizaje y guarda tu progreso.
- **Seguimiento de Progreso:** Visualización y log de avance en los diferentes módulos y temas.
- **Recursos Multimedia:** Materiales de estudio, guías y enlaces externos.
- **Integración total con Supabase:** Todos los datos clave (materiales, procesos, quizzes, recursos, etc.) se gestionan y consultan dinámicamente desde Supabase.
- **Tema Claro/Oscuro:** Interfaz adaptable a las preferencias del usuario.
- **Accesibilidad y Responsividad:** UI optimizada para todos los dispositivos y usuarios.
- **Home Modernizada:** Página de inicio rediseñada, visualmente atractiva y coherente con el resto de la plataforma.

## 🆕 Novedades y Mejoras Avanzadas

- **Comparar Materiales:** Selecciona varios materiales y compáralos visualmente en la calculadora de velocidad de corte.
- **Exportar PDF:** Descarga el análisis visual de parámetros como PDF.
- **Copiar Resultados:** Copia los resultados del cálculo con un solo clic.
- **Animaciones y Accesibilidad:** Mejoras visuales, animaciones sutiles y soporte ARIA.
- **Migración completa a Supabase:** Todos los datos dinámicos se obtienen desde la nube.
- **Próximamente:** Historial de cálculos, notas de usuario, modo experto y compartir resultados.

## 🧭 Navegación Principal

- [Inicio](/)
- [Procesos de Fabricación](/procesos)
- [Herramientas Interactivas](/herramientas)
- [Recursos Multimedia](/recursos)
- [Centro de Evaluación](/evaluacion)
- [Progreso](/progreso)

## 🛠️ Stack Tecnológico

- React + TypeScript
- Vite
- Tailwind CSS
- React Router DOM
- ESLint, PostCSS
- **Supabase** (backend y base de datos)

## ⚡ Empezando

1. **Clonar el repositorio:**

   ```bash
   git clone <URL-DEL-REPOSITORIO>
   cd centro-de-aprendizaje2
   ```

2. **Instalar dependencias:**

   ```bash
   npm install
   # o
   yarn install
   ```

3. **Configurar Supabase:**

   - Crea un proyecto en [Supabase](https://supabase.com/).
   - Crea la tabla `resources` con las columnas del archivo CSV proporcionado o usa el SQL generado.
   - Copia tu URL de proyecto y anon key desde la sección API de Supabase.
   - Crea un archivo `src/supabaseClient.ts`:

     ```ts
     import { createClient } from "@supabase/supabase-js";
     const supabaseUrl = "https://TU_PROYECTO.supabase.co";
     const supabaseKey = "TU_ANON_KEY";
     export const supabase = createClient(supabaseUrl, supabaseKey);
     ```

   - Asegúrate de que tu tabla y columnas coincidan con los datos esperados por la app.

4. **Ejecutar la aplicación en modo desarrollo:**

   ```bash
   npm run dev
   # o
   yarn dev
   ```

5. Abre [http://localhost:5173](http://localhost:5173) en tu navegador.

### Configuración de Supabase y Variables de Entorno

Para desarrollo local, crea un archivo `.env` en la raíz del proyecto con el siguiente contenido:

```env
VITE_SUPABASE_URL="https://jpozkwbusowbpyebqfaw.supabase.co"
VITE_SUPABASE_ANON_KEY="<tu-clave-anon-aqui>"
```

Asegúrate de que `.env` esté en `.gitignore` para evitar exponer credenciales.

La aplicación usará estas variables automáticamente gracias a Vite (`import.meta.env`).

Si la clave fue expuesta, rota la clave en el panel de Supabase después de desplegar el cambio.

## 📦 Scripts Disponibles

- `npm run dev` — Inicia la aplicación en modo desarrollo.
- `npm run build` — Compila la aplicación para producción en la carpeta `dist/`.
- `npm run lint` — Ejecuta ESLint para analizar el código.
- `npm run preview` — Sirve la build de producción localmente.

## 🗄️ Arquitectura y Notas Técnicas

- **Recursos**: Ahora se obtienen desde Supabase (`resources`), no desde archivos estáticos.
- **Categorías**: Por defecto siguen siendo estáticas, pero pueden migrarse a Supabase si se requiere mayor flexibilidad.
- **Hooks y Contextos**: El estado de progreso, log de actividad y logros está modularizado en hooks/contextos separados.
- **Accesibilidad**: Se están implementando mejoras continuas (focus, roles, ARIA, etc).
- **Home Modernizada**: La página de inicio fue rediseñada para mayor atractivo visual y coherencia con el resto de la plataforma.

### Materials Data

- MaterialesCalculator now loads all material properties dynamically from Supabase.
- To add or edit materials, use the Supabase dashboard and update the `materials` table.

## 🛠️ Cambios recientes y migración a Supabase

- Todos los datos de procesos, recursos, materiales, aplicaciones de engranajes, herramientas y quizzes han sido migrados a Supabase.
- El frontend ahora obtiene dinámicamente estos datos desde Supabase, eliminando arrays hardcodeados.
- Se implementó manejo robusto de errores y loading, y se eliminó el uso de `any` en todo el código.
- Se agregó logging para diagnosticar la conectividad y los datos recibidos de Supabase.
- Se corrigió el mapeo de campos para aceptar tanto `service_factor` como `servicefactor` en la tabla `gear_applications`.
- Se recomienda renombrar la columna en Supabase a `service_factor` (ver instrucciones en el Developer Manual).
- Se modernizó y mejoró la Home para una mejor experiencia de usuario.

## 📝 Instrucciones para migrar/ajustar Supabase

1. Renombra la columna `servicefactor` a `service_factor`:

   ```sql
   ALTER TABLE gear_applications RENAME COLUMN servicefactor TO service_factor;
   ```

2. Asegúrate de que el tipo de dato sea numérico:

   ```sql
   ALTER TABLE gear_applications ALTER COLUMN service_factor TYPE float8 USING service_factor::float8;
   ```

3. Verifica los datos:

   ```sql
   SELECT id, name, service_factor FROM gear_applications;
   ```

4. Si tienes dudas, consulta el `DEVELOPER_MANUAL.md`.

## 🤝 Contribuir

¡Las contribuciones son bienvenidas! Por favor, abre un issue para discutir cambios mayores o envía un Pull Request.

## 🗺️ Roadmap y Próximos Pasos

Consulta [`TODO.md`](./TODO.md) y [`PLANNING.md`](./PLANNING.md) para ver el estado de desarrollo, tareas pendientes y planes futuros.

## 📄 Licencia

MIT
</file>

<file path="src/components/Header.tsx">
import React, { useState } from "react";
import {
  Moon,
  Sun,
  Menu,
  X,
  BookOpen,
  Calculator,
  Award,
  Image,
  BarChart,
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { useTheme } from "../contexts/ThemeContext";
import { Link, useLocation } from "react-router-dom";

const navigation = [
  { path: "/", label: "Inicio", icon: BookOpen, color: "text-blue-500" },
  {
    path: "/procesos",
    label: "Procesos",
    icon: BookOpen,
    color: "text-indigo-500",
  },
  {
    path: "/herramientas",
    label: "Herramientas",
    icon: Calculator,
    color: "text-green-500",
  },
  {
    path: "/recursos",
    label: "Recursos",
    icon: Image,
    color: "text-orange-500",
  },
  {
    path: "/evaluacion",
    label: "Evaluación",
    icon: Award,
    color: "text-purple-500",
  },
  // {
  //   path: "/planificador",
  //   label: "Planificador",
  //   icon: Calendar,
  //   color: "text-pink-500",
  // },
  {
    path: "/progreso",
    label: "Progreso",
    icon: BarChart,
    color: "text-cyan-500",
  },
];

const Header: React.FC = () => {
  const { isDark, toggleTheme } = useTheme();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const location = useLocation();

  const handleThemeToggle = () => {
    toggleTheme();
  };

  return (
    <motion.header
      className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-xl shadow-lg border-b border-blue-200/50 dark:border-blue-800/50 sticky top-0 z-50"
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-16">
        {/* Logo/Brand */}
        <Link to="/" className="flex items-center space-x-2">
          <span className="text-2xl">⚙️</span>
          <span className="font-bold text-lg hidden sm:inline">
            Centro de Aprendizaje
          </span>
        </Link>
        {/* Desktop Nav */}
        <nav className="hidden md:flex space-x-4">
          {navigation.map((item) => (
            <Link
              key={item.path}
              to={item.path}
              className={`flex items-center px-3 py-2 rounded-lg font-medium transition-colors ${
                location.pathname === item.path
                  ? "bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300"
                  : "text-gray-700 dark:text-gray-200 hover:bg-blue-50 dark:hover:bg-blue-800"
              } ${item.color}`}
            >
              <item.icon size={20} className="mr-2" />
              <span className="hidden sm:inline">{item.label}</span>
            </Link>
          ))}
        </nav>
        {/* Theme toggle and mobile menu button */}
        <div className="flex items-center space-x-2">
          <button
            onClick={handleThemeToggle}
            className="p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-800 focus:outline-none"
          >
            {isDark ? <Sun size={20} /> : <Moon size={20} />}
          </button>
          <button
            className="md:hidden p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-800"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
          </button>
        </div>
      </div>
      {/* Mobile Nav */}
      <AnimatePresence>
        {isMenuOpen && (
          <motion.nav
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: "auto", opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            className="md:hidden bg-white dark:bg-gray-900 border-t border-blue-200/50 dark:border-blue-800/50 px-4 py-2"
          >
            {navigation.map((item) => (
              <Link
                key={item.path}
                to={item.path}
                className={`flex items-center px-3 py-2 rounded-lg font-medium transition-colors w-full ${
                  location.pathname === item.path
                    ? "bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300"
                    : "text-gray-700 dark:text-gray-200 hover:bg-blue-50 dark:hover:bg-blue-800"
                } ${item.color}`}
                onClick={() => setIsMenuOpen(false)}
              >
                <item.icon size={20} className="mr-2" />
                {item.label}
              </Link>
            ))}
          </motion.nav>
        )}
      </AnimatePresence>
    </motion.header>
  );
};

export default Header;
</file>

<file path="src/components/ResourcesSection.tsx">
import React, { useEffect, useState } from "react";
import {
  FileText,
  Image,
  Video,
  Download,
  ExternalLink,
  Search,
} from "lucide-react";
import { supabase } from "../supabaseClient";
import { Resource } from "./resourcesData";

const ResourcesSection: React.FC = () => {
  const [resources, setResources] = useState<Resource[]>([]);
  const [categories, setCategories] = useState<
    { id: string; name: string; icon: string }[]
  >([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchResources() {
      setLoading(true);
      setError(null);
      const { data, error } = await supabase
        .from("resources")
        .select("*")
        .order("id", { ascending: true });
      if (error) {
        setError(
          "No se pudieron cargar los recursos. Intenta de nuevo más tarde."
        );
        setResources([]);
      } else {
        const mapped = (data || []).map(
          (r: Resource & { downloadUrl?: string; viewUrl?: string }) => ({
            ...r,
            download_url: r.download_url || r.downloadUrl,
            view_url: r.view_url || r.viewUrl,
          })
        ) as Resource[];
        console.log("Supabase connection OK. Resources:", mapped);
        setResources(mapped);
      }
      setLoading(false);
    }
    async function fetchCategories() {
      const { data, error } = await supabase
        .from("resource_categories")
        .select("id, name, icon")
        .order("id", { ascending: true });
      if (error) {
        console.error(
          "No se pudieron cargar las categorías de recursos.",
          error
        );
        setCategories([]);
      } else {
        setCategories(data || []);
        console.log("Supabase connection OK. Resource categories:", data);
      }
    }
    fetchResources();
    fetchCategories();
  }, []);

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "pdf":
        return <FileText size={24} className="text-red-500" />;
      case "gallery":
        return <Image size={24} className="text-blue-500" />;
      case "video":
        return <Video size={24} className="text-green-500" />;
      default:
        return <FileText size={24} className="text-gray-500" />;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case "pdf":
        return "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300";
      case "gallery":
        return "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300";
      case "video":
        return "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300";
      default:
        return "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300";
    }
  };

  const filteredResources = resources.filter((resource) => {
    const matchesSearch =
      resource.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      resource.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory =
      selectedCategory === "all" || resource.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center py-24">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4" />
        <span className="text-lg text-gray-700 dark:text-gray-200">
          Cargando recursos...
        </span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center py-24">
        <div className="text-6xl mb-4">⚠️</div>
        <h3 className="text-xl font-semibold text-red-700 dark:text-red-400 mb-2">
          {error}
        </h3>
        <button
          onClick={() => window.location.reload()}
          className="mt-4 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Reintentar
        </button>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-2 sm:px-4 md:px-8 py-8">
      <div className="flex flex-col md:flex-row gap-8">
        {/* Category Sidebar */}
        <aside className="w-full md:w-1/4 mb-4 md:mb-0">
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
              📚 Recursos Multimedia
            </h1>
            <p className="text-lg text-gray-600 dark:text-gray-300">
              Accede a manuales técnicos, galerías de imágenes y recursos
              especializados.
            </p>
          </div>

          {/* Search and Filter */}
          <div className="mb-8 space-y-4">
            <div className="relative">
              <Search
                size={20}
                className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
              />
              <input
                type="text"
                placeholder="Buscar recursos..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div className="flex flex-wrap gap-2">
              <button
                key="all"
                onClick={() => setSelectedCategory("all")}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                  selectedCategory === "all"
                    ? "bg-blue-600 text-white"
                    : "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
                }`}
              >
                <span>📚</span>
                <span className="font-medium">Todos los Recursos</span>
              </button>
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                    selectedCategory === category.id
                      ? "bg-blue-600 text-white"
                      : "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
                  }`}
                >
                  <span>{category.icon}</span>
                  <span className="font-medium">{category.name}</span>
                </button>
              ))}
            </div>
          </div>
        </aside>
        {/* Resource List */}
        <section className="w-full md:w-3/4">
          {/* Resources Grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredResources.map((resource) => (
              <div
                key={resource.id}
                className="bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 overflow-hidden"
              >
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      {getTypeIcon(resource.type)}
                      <span
                        className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(
                          resource.type
                        )}`}
                      >
                        {resource.type.toUpperCase()}
                      </span>
                    </div>
                    <div className="text-xs text-gray-500 dark:text-gray-400">
                      {new Date(resource.updated).toLocaleDateString("es-ES")}
                    </div>
                  </div>

                  <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-3">
                    {resource.title}
                  </h3>

                  <p className="text-gray-600 dark:text-gray-300 text-sm mb-4 leading-relaxed">
                    {resource.description}
                  </p>

                  <div className="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-6">
                    {resource.size && (
                      <span>
                        📄 {resource.pages} páginas • {resource.size}
                      </span>
                    )}
                    {resource.items && (
                      <span>🖼️ {resource.items} imágenes</span>
                    )}
                    {resource.duration && <span>🎥 {resource.duration}</span>}
                  </div>

                  <div className="flex space-x-3">
                    <a
                      href={resource.download_url || resource.view_url || "#"}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex-1 justify-center focus:outline-none focus:ring-2 focus:ring-blue-400"
                      aria-label={`Descargar ${resource.title}`}
                      tabIndex={0}
                    >
                      <Download size={16} />
                      <span>Descargar</span>
                    </a>
                    <a
                      href={resource.view_url || resource.download_url || "#"}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400"
                      aria-label={`Ver ${resource.title}`}
                      tabIndex={0}
                    >
                      <ExternalLink size={16} />
                      <span>Ver</span>
                    </a>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {filteredResources.length === 0 && (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">🔍</div>
              <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                No se encontraron recursos
              </h3>
              <p className="text-gray-600 dark:text-gray-300">
                Intenta con diferentes términos de búsqueda o categorías.
              </p>
            </div>
          )}

          {/* Quick Access Section */}
          <div className="mt-12 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-8">
            <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">
              🚀 Acceso Rápido a Recursos Populares
            </h3>

            <div className="grid md:grid-cols-3 gap-6">
              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg text-center">
                <div className="text-3xl mb-3">📖</div>
                <h4 className="font-semibold mb-2">Manual Principal</h4>
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                  Guía completa de procesos de fabricación
                </p>
                <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  Abrir Manual
                </button>
              </div>

              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg text-center">
                <div className="text-3xl mb-3">📋</div>
                <h4 className="font-semibold mb-2">Tablas de Referencia</h4>
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                  Velocidades de corte y parámetros
                </p>
                <button className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                  Ver Tablas
                </button>
              </div>

              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg text-center">
                <div className="text-3xl mb-3">🖼️</div>
                <h4 className="font-semibold mb-2">Galería Técnica</h4>
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                  Imágenes de procesos industriales
                </p>
                <button className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
                  Ver Galería
                </button>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
};

export default ResourcesSection;
</file>

<file path="src/components/ProcessSection.tsx">
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  ChevronRight,
  ChevronDown,
  Info,
  Play,
  BookOpen,
  Settings,
  Zap,
} from "lucide-react";
import { supabase } from "../supabaseClient";

// Define types for process and category
interface ProcessData {
  id: number;
  category: string;
  name: string;
  description: string;
  applications: string[];
  parameters: string[];
  advantages: string[];
  disadvantages: string[];
  materials: string[];
  tools: string[];
  image: string;
  simulator: string | null;
}
interface ResourceManual {
  id: number;
  title: string;
  download_url?: string;
  view_url?: string;
  process_name?: string;
}
interface Category {
  title: string;
  icon: string;
  color: string;
  processes: Record<string, ProcessData>;
}
interface ToolResource {
  id: number;
  title: string;
  type: string; // 'calculator' or 'simulator'
  process_name: string;
  url: string;
  icon?: string;
  available?: boolean;
}

const ProcessSection: React.FC = () => {
  const navigate = useNavigate();
  const [expandedCategory, setExpandedCategory] = useState<string | null>(
    "remocion"
  );
  const [selectedProcess, setSelectedProcess] = useState<string | null>(null);
  const [processCategories, setProcessCategories] = useState<
    Record<string, Category>
  >({});
  const [manualResource, setManualResource] = useState<ResourceManual | null>(
    null
  );
  const [toolResources, setToolResources] = useState<ToolResource[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // Helper to parse string fields to array
  const parseList = (str: string | null) =>
    str
      ? str
          .split(";")
          .map((s) => s.trim())
          .filter(Boolean)
      : [];

  useEffect(() => {
    async function fetchProcessesAndCategories() {
      setLoading(true);
      setError(null);
      // Fetch categories from Supabase
      const { data: catData, error: catError } = await supabase
        .from("resource_categories")
        .select("id, name, icon")
        .order("id");
      if (catError) {
        setError(
          "No se pudieron cargar las categorías. Intenta de nuevo más tarde."
        );
        setProcessCategories({});
        setLoading(false);
        return;
      }
      // Fetch processes from Supabase
      const { data, error } = await supabase
        .from("processes")
        .select("*")
        .order("id");
      if (error) {
        setError(
          "No se pudieron cargar los procesos. Intenta de nuevo más tarde."
        );
        setProcessCategories({});
        setLoading(false);
        return;
      }
      // Log para verificar conexión y datos
      console.log("Supabase connection OK. Data:", data);
      // Build a map of category metadata from DB
      const categoryMeta: Record<
        string,
        { title: string; icon: string; color: string }
      > = {};
      (catData || []).forEach((cat) => {
        categoryMeta[cat.id] = {
          title: cat.name,
          icon: cat.icon,
          color: "bg-blue-500", // Default color, can be extended with a color field in DB
        };
      });
      // Agrupa por categoría y estructura igual que antes
      const grouped: Record<string, Category> = {};
      data.forEach((proc: ProcessData) => {
        if (!grouped[proc.category]) {
          const cat = categoryMeta[proc.category] || {
            title: proc.category,
            icon: "❓",
            color: "bg-gray-400",
          };
          grouped[proc.category] = {
            title: cat.title,
            icon: cat.icon,
            color: cat.color,
            processes: {},
          };
        }
        grouped[proc.category].processes[proc.name.toLowerCase()] = {
          ...proc,
          applications: parseList(proc.applications as unknown as string),
          parameters: parseList(proc.parameters as unknown as string),
          advantages: parseList(proc.advantages as unknown as string),
          disadvantages: parseList(proc.disadvantages as unknown as string),
          materials: parseList(proc.materials as unknown as string),
          tools: parseList(proc.tools as unknown as string),
        };
      });
      setProcessCategories(grouped);
      // Selecciona el primer proceso por defecto
      if (!selectedProcess) {
        const firstCat = Object.keys(grouped)[0];
        if (firstCat) {
          const firstProc = Object.keys(grouped[firstCat].processes)[0];
          setSelectedProcess(firstProc);
        }
      }
      setLoading(false);
    }
    fetchProcessesAndCategories();
    // eslint-disable-next-line
  }, []);

  useEffect(() => {
    async function fetchManual() {
      if (!selectedProcess) {
        setManualResource(null);
        return;
      }
      const { data, error } = await supabase
        .from("resources")
        .select("id, title, download_url, view_url, process_name")
        .eq("type", "pdf")
        .eq("process_name", selectedProcess)
        .limit(1)
        .single();
      if (error) {
        setManualResource(null);
        console.log("No manual found for process:", selectedProcess);
      } else {
        setManualResource(data);
        console.log("Manual resource for process:", selectedProcess, data);
      }
    }
    async function fetchTools() {
      if (!selectedProcess) {
        setToolResources([]);
        return;
      }
      const { data, error } = await supabase
        .from("tools")
        .select("id, title, type, process_name, url, icon, available")
        .eq("process_name", selectedProcess)
        .eq("available", true);
      if (error) {
        setToolResources([]);
        console.log("No tools found for process:", selectedProcess);
      } else {
        setToolResources(data || []);
        console.log("Tools for process:", selectedProcess, data);
      }
    }
    fetchManual();
    fetchTools();
  }, [selectedProcess]);

  const toggleCategory = (category: string) => {
    setExpandedCategory(expandedCategory === category ? null : category);
  };

  const selectProcess = (process: string) => {
    setSelectedProcess(process);
  };

  const selectedProcessData = Object.values(processCategories)
    .flatMap((category) => Object.entries(category.processes))
    .find(([key]) => key === selectedProcess)?.[1];

  // SVG diagram mapping for each process
  const processSVGs: Record<string, JSX.Element> = {
    torneado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Torneado"
        role="img"
      >
        <circle
          cx="24"
          cy="24"
          r="18"
          fill="#e5e7eb"
          stroke="#1e293b"
          strokeWidth="2"
        />
        <rect x="20" y="10" width="8" height="28" rx="2" fill="#3b82f6" />
        <rect x="28" y="22" width="10" height="4" rx="2" fill="#f59e42" />
      </svg>
    ),
    fresado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Fresado"
        role="img"
      >
        <rect x="8" y="32" width="32" height="8" rx="2" fill="#eab308" />
        <circle cx="24" cy="24" r="10" fill="#3b82f6" />
        <rect x="22" y="10" width="4" height="14" fill="#1e293b" />
      </svg>
    ),
    taladrado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Taladrado"
        role="img"
      >
        <rect x="20" y="8" width="8" height="32" rx="4" fill="#6366f1" />
        <circle cx="24" cy="40" r="4" fill="#f59e42" />
      </svg>
    ),
    rectificado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Rectificado"
        role="img"
      >
        <rect x="10" y="20" width="28" height="8" rx="4" fill="#a21caf" />
        <circle cx="14" cy="24" r="4" fill="#f59e42" />
        <circle cx="34" cy="24" r="4" fill="#f59e42" />
      </svg>
    ),
    forjado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Forjado"
        role="img"
      >
        <rect x="18" y="10" width="12" height="28" rx="4" fill="#2563eb" />
        <rect x="10" y="36" width="28" height="4" fill="#f59e42" />
      </svg>
    ),
    estampado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Estampado"
        role="img"
      >
        <rect x="12" y="12" width="24" height="24" rx="4" fill="#22c55e" />
        <rect x="20" y="8" width="8" height="8" fill="#f59e42" />
      </svg>
    ),
    laminado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Laminado"
        role="img"
      >
        <rect x="8" y="20" width="32" height="8" rx="4" fill="#f59e42" />
        <rect x="8" y="28" width="32" height="4" fill="#a21caf" />
      </svg>
    ),
    extrusión: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Extrusión"
        role="img"
      >
        <rect x="10" y="20" width="28" height="8" rx="4" fill="#f59e42" />
        <rect x="36" y="16" width="4" height="16" fill="#2563eb" />
      </svg>
    ),
    soldadura: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Soldadura"
        role="img"
      >
        <rect x="12" y="28" width="24" height="8" rx="4" fill="#f59e42" />
        <rect x="22" y="12" width="4" height="16" fill="#2563eb" />
        <polygon points="24,8 28,16 20,16" fill="#fbbf24" />
      </svg>
    ),
    remachado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Remachado"
        role="img"
      >
        <circle cx="24" cy="24" r="8" fill="#f59e42" />
        <rect x="20" y="8" width="8" height="16" fill="#a21caf" />
      </svg>
    ),
    pegado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Adhesivos"
        role="img"
      >
        <rect x="12" y="20" width="24" height="8" rx="4" fill="#22c55e" />
        <rect x="20" y="28" width="8" height="8" fill="#f59e42" />
      </svg>
    ),
    brazing: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Brazing"
        role="img"
      >
        <rect x="16" y="28" width="16" height="8" rx="4" fill="#f59e42" />
        <ellipse cx="24" cy="24" rx="8" ry="4" fill="#a21caf" />
      </svg>
    ),
    fundicion: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Fundición"
        role="img"
      >
        <rect x="14" y="28" width="20" height="8" rx="4" fill="#f59e42" />
        <ellipse cx="24" cy="24" rx="10" ry="6" fill="#a21caf" />
      </svg>
    ),
    inyeccion: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Inyección"
        role="img"
      >
        <rect x="18" y="12" width="12" height="24" rx="4" fill="#6366f1" />
        <rect x="14" y="36" width="20" height="4" fill="#f59e42" />
      </svg>
    ),
    sinterizado: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Pulvimetalurgia"
        role="img"
      >
        <circle cx="24" cy="24" r="10" fill="#a21caf" />
        <circle cx="24" cy="24" r="6" fill="#f59e42" />
      </svg>
    ),
    moldeo_arena: (
      <svg
        width="48"
        height="48"
        viewBox="0 0 48 48"
        aria-label="Diagrama de Moldeo en Arena"
        role="img"
      >
        <rect x="10" y="28" width="28" height="8" rx="4" fill="#f59e42" />
        <ellipse cx="24" cy="24" rx="12" ry="6" fill="#a21caf" />
      </svg>
    ),
  };

  // Helper for accessible tooltips and SVG diagrams
  const getProcessImage = (process: ProcessData, processId?: string) => (
    <span
      className="text-2xl flex items-center justify-center"
      title={process.name + " (diagrama)"}
      aria-label={process.name + " (diagrama)"}
      tabIndex={0}
    >
      {processSVGs[processId || ""] || process.image}
    </span>
  );

  // Loading and error UI
  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center py-24">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4" />
        <span className="text-lg text-gray-700 dark:text-gray-200">
          Cargando procesos...
        </span>
      </div>
    );
  }
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center py-24">
        <div className="text-6xl mb-4">⚠️</div>
        <h3 className="text-xl font-semibold text-red-700 dark:text-red-400 mb-2">
          {error}
        </h3>
        <button
          onClick={() => window.location.reload()}
          className="mt-4 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Reintentar
        </button>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-2 sm:px-4 md:px-8 py-8">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Category List (sidebar on desktop, top on mobile) */}
        <div className="col-span-1">
          {Object.entries(processCategories).map(([categoryId, category]) => (
            <div
              key={categoryId}
              className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden"
            >
              <button
                onClick={() => toggleCategory(categoryId)}
                className={`w-full px-6 py-4 text-left flex items-center justify-between ${category.color} text-white hover:opacity-90 transition-opacity focus:outline-none focus:ring-2 focus:ring-blue-400 focus:z-10 shadow-sm hover:shadow-lg active:scale-[0.98]`}
                aria-label={`Expandir/cerrar categoría ${category.title}`}
                tabIndex={0}
              >
                <div className="flex items-center space-x-3">
                  <span className="text-2xl" aria-hidden="true">
                    {category.icon}
                  </span>
                  <span className="font-semibold">{category.title}</span>
                </div>
                {expandedCategory === categoryId ? (
                  <ChevronDown size={20} />
                ) : (
                  <ChevronRight size={20} />
                )}
              </button>
              {/* Animate expand/collapse */}
              <div
                style={{
                  transition: "max-height 0.4s cubic-bezier(0.4,0,0.2,1)",
                  maxHeight: expandedCategory === categoryId ? 1000 : 0,
                  overflow: "hidden",
                }}
              >
                {expandedCategory === categoryId && (
                  <div className="p-4 space-y-2">
                    {Object.entries(category.processes).map(
                      ([processId, process]) => (
                        <button
                          key={processId}
                          onClick={() => selectProcess(processId)}
                          className={`w-full text-left p-3 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400 focus:z-10 shadow-sm hover:shadow-lg active:scale-[0.98] ${
                            selectedProcess === processId
                              ? "bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200"
                              : "hover:bg-gray-100 dark:hover:bg-gray-700"
                          }`}
                          aria-label={`Seleccionar proceso ${process.name}`}
                          tabIndex={0}
                        >
                          <div className="flex items-center space-x-3">
                            {getProcessImage(process)}
                            <span className="font-medium">{process.name}</span>
                            {process.simulator && (
                              <Zap
                                size={16}
                                className="text-blue-500"
                                title="Simulador disponible"
                              />
                            )}
                          </div>
                        </button>
                      )
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Process List */}
        <div className="col-span-2">
          {selectedProcessData ? (
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 animate-fade-in-up border border-blue-100 dark:border-blue-900/40">
              <div className="flex items-center space-x-4 mb-6">
                {getProcessImage(selectedProcessData, selectedProcess)}
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
                    {selectedProcessData.name}
                  </h2>
                  <div className="flex items-center space-x-2 text-blue-600 dark:text-blue-400">
                    <Info size={16} />
                    <span>Proceso Industrial</span>
                    {selectedProcessData.simulator && (
                      <span className="bg-blue-100 dark:bg-blue-900 px-2 py-1 rounded text-xs">
                        Simulador disponible
                      </span>
                    )}
                  </div>
                </div>
              </div>

              <div className="prose dark:prose-invert max-w-none">
                <h3 className="flex items-center space-x-2 text-lg font-semibold text-gray-900 dark:text-white mb-3">
                  <BookOpen size={20} />
                  <span>Descripción</span>
                </h3>
                <p className="text-gray-600 dark:text-gray-300 mb-6">
                  {selectedProcessData.description}
                </p>

                <div className="grid md:grid-cols-2 gap-6 mb-6">
                  <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
                    <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">
                      🎯 Aplicaciones Principales
                    </h4>
                    <ul className="space-y-1">
                      {selectedProcessData.applications.map((app, index) => (
                        <li
                          key={index}
                          className="text-blue-700 dark:text-blue-300"
                        >
                          • {app}
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
                    <h4 className="font-semibold text-green-800 dark:text-green-200 mb-3">
                      ⚙️ Parámetros Clave
                    </h4>
                    <ul className="space-y-1">
                      {selectedProcessData.parameters.map((param, index) => (
                        <li
                          key={index}
                          className="text-green-700 dark:text-green-300"
                        >
                          • {param}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-6 mb-6">
                  <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg">
                    <h4 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-3">
                      ✅ Ventajas
                    </h4>
                    <ul className="space-y-1">
                      {selectedProcessData.advantages.map(
                        (advantage, index) => (
                          <li
                            key={index}
                            className="text-yellow-700 dark:text-yellow-300"
                          >
                            • {advantage}
                          </li>
                        )
                      )}
                    </ul>
                  </div>

                  <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-lg">
                    <h4 className="font-semibold text-red-800 dark:text-red-200 mb-3">
                      ⚠️ Limitaciones
                    </h4>
                    <ul className="space-y-1">
                      {selectedProcessData.disadvantages.map(
                        (disadvantage, index) => (
                          <li
                            key={index}
                            className="text-red-700 dark:text-red-300"
                          >
                            • {disadvantage}
                          </li>
                        )
                      )}
                    </ul>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-6 mb-6">
                  <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
                    <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">
                      🔧 Materiales Típicos
                    </h4>
                    <ul className="space-y-1">
                      {selectedProcessData.materials.map((material, index) => (
                        <li
                          key={index}
                          className="text-purple-700 dark:text-purple-300"
                        >
                          • {material}
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div className="bg-indigo-50 dark:bg-indigo-900/20 p-4 rounded-lg">
                    <h4 className="font-semibold text-indigo-800 dark:text-indigo-200 mb-3">
                      🛠️ Herramientas y Equipos
                    </h4>
                    <ul className="space-y-1">
                      {selectedProcessData.tools.map((tool, index) => (
                        <li
                          key={index}
                          className="text-indigo-700 dark:text-indigo-300"
                        >
                          • {tool}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>

              <div className="mt-8 flex flex-wrap gap-4">
                {toolResources
                  .filter((tool) => tool.type === "simulator")
                  .map((tool) => (
                    <button
                      key={tool.id}
                      onClick={() => {
                        window.scrollTo({ top: 0, behavior: "smooth" });
                        navigate(tool.url);
                      }}
                      className="flex items-center space-x-2 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400 focus:z-10 shadow-sm hover:shadow-lg active:scale-[0.98]"
                      aria-label={`Abrir ${tool.title}`}
                      tabIndex={0}
                    >
                      <Play size={18} />
                      <span>{tool.title}</span>
                    </button>
                  ))}
                {manualResource ? (
                  <a
                    href={
                      manualResource.download_url ||
                      manualResource.view_url ||
                      "#"
                    }
                    className="flex items-center space-x-2 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-400 focus:z-10 shadow-sm hover:shadow-lg active:scale-[0.98]"
                    aria-label="Abrir manual técnico"
                    tabIndex={0}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <BookOpen size={18} />
                    <span>{manualResource.title || "Manual Técnico"}</span>
                  </a>
                ) : (
                  <a
                    href={`/manuales/${selectedProcess}.pdf`}
                    className="flex items-center space-x-2 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-400 focus:z-10 shadow-sm hover:shadow-lg active:scale-[0.98]"
                    aria-label="Abrir manual técnico"
                    tabIndex={0}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <BookOpen size={18} />
                    <span>Manual Técnico</span>
                  </a>
                )}
                {toolResources
                  .filter((tool) => tool.type === "calculator")
                  .map((tool) => (
                    <a
                      key={tool.id}
                      href={tool.url}
                      className="flex items-center space-x-2 bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-400 focus:z-10 shadow-sm hover:shadow-lg active:scale-[0.98]"
                      aria-label={`Abrir ${tool.title}`}
                      tabIndex={0}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      <Settings size={18} />
                      <span>{tool.title}</span>
                    </a>
                  ))}
              </div>
            </div>
          ) : (
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-12 text-center animate-fade-in-up">
              <div className="text-6xl mb-4">🔍</div>
              <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                Selecciona un Proceso
              </h3>
              <p className="text-gray-600 dark:text-gray-300">
                Elige un proceso de fabricación de la lista para ver información
                técnica detallada, aplicaciones industriales y herramientas
                disponibles.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProcessSection;
</file>

<file path="src/components/EvaluationSection.tsx">
import React, { useState, useEffect } from "react";
import { Target, TrendingUp, Users, Book, Brain } from "lucide-react";
import SoldaduraQuiz from "./tools/SoldaduraQuiz";
import QuizCard, { Quiz } from "./QuizCard";
import { useQuizProgress } from "../contexts/useQuizProgress";
import { useAchievements } from "../contexts/useAchievements";
import { useActivityLog } from "../contexts/ActivityLogContext";
import { supabase } from "../supabaseClient";
import { fallbackQuizzes } from "./fallbackQuizzes";

const LOCAL_STORAGE_KEY = "quizUserProgress";

const EvaluationSection: React.FC = () => {
  const [activeQuiz, setActiveQuiz] = useState<string | null>(null);
  const { userProgress, setUserProgress } = useQuizProgress();
  const { unlockAchievements } = useAchievements();
  const { logActivity } = useActivityLog();
  const [quizzes, setQuizzes] = useState<Quiz[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(userProgress));
  }, [userProgress]);

  useEffect(() => {
    async function fetchQuizzes() {
      setLoading(true);
      setError(null);
      const { data, error } = await supabase
        .from("quizzes")
        .select("id, title, description, process_id, created_at")
        .order("id");
      if (error) {
        setError(
          "No se pudieron cargar las evaluaciones. Intenta de nuevo más tarde."
        );
        setQuizzes(fallbackQuizzes); // Show all fallback quizzes if error
      } else {
        // Merge Supabase quizzes with fallback quizzes (avoid duplicates by id)
        const supabaseIds = new Set((data || []).map((q) => q.id));
        const merged = [
          ...(data || []),
          ...fallbackQuizzes.filter((q) => !supabaseIds.has(q.id)),
        ];
        setQuizzes(merged);
        console.log("Supabase connection OK. Quizzes:", data);
      }
      setLoading(false);
    }
    fetchQuizzes();
  }, []);

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center py-24">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4" />
        <span className="text-lg text-gray-700 dark:text-gray-200">
          Cargando evaluaciones...
        </span>
      </div>
    );
  }
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center py-24">
        <div className="text-6xl mb-4">⚠️</div>
        <h3 className="text-xl font-semibold text-red-700 dark:text-red-400 mb-2">
          {error}
        </h3>
        <button
          onClick={() => window.location.reload()}
          className="mt-4 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Reintentar
        </button>
      </div>
    );
  }

  if (activeQuiz) {
    // Find the quiz object for the activeQuiz id
    const quizObj = quizzes.find((q) => q.id.toString() === activeQuiz);
    if (activeQuiz === "soldadura" && quizObj && quizObj.available !== false) {
      return (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="mb-6">
            <button
              onClick={() => setActiveQuiz(null)}
              className="flex items-center space-x-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-400"
              aria-label="Volver a Evaluaciones"
            >
              <span>←</span>
              <span>Volver a Evaluaciones</span>
            </button>
          </div>
          <SoldaduraQuiz
            onComplete={(score: number) => {
              setUserProgress((prev) => ({
                ...prev,
                [activeQuiz]: {
                  completed: true,
                  bestScore:
                    typeof prev[activeQuiz]?.bestScore === "number"
                      ? Math.max(prev[activeQuiz].bestScore || 0, score)
                      : score,
                },
              }));
              unlockAchievements(activeQuiz, score, {
                ...userProgress,
                [activeQuiz]: {
                  completed: true,
                  bestScore:
                    typeof userProgress[activeQuiz]?.bestScore === "number"
                      ? Math.max(userProgress[activeQuiz].bestScore || 0, score)
                      : score,
                },
              });
              logActivity();
            }}
          />
        </div>
      );
    }
    // Not available quiz fallback
    return (
      <div className="flex flex-col items-center justify-center min-h-[400px] bg-gradient-to-br from-blue-50 via-purple-50 to-pink-100 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 rounded-2xl shadow-xl p-10 relative overflow-hidden animate-fade-in">
        {/* Animated SVG Illustration */}
        <div className="mb-6 animate-bounce-slow">
          <svg
            width="120"
            height="120"
            viewBox="0 0 120 120"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <circle cx="60" cy="60" r="54" fill="url(#grad1)" opacity="0.15" />
            <ellipse
              cx="60"
              cy="60"
              rx="38"
              ry="38"
              fill="url(#grad2)"
              opacity="0.25"
            />
            <g>
              <rect
                x="35"
                y="50"
                width="50"
                height="30"
                rx="8"
                fill="#fff"
                stroke="#a78bfa"
                strokeWidth="2"
              />
              <rect
                x="45"
                y="60"
                width="30"
                height="6"
                rx="3"
                fill="#a78bfa"
                opacity="0.7"
              />
              <circle cx="60" cy="65" r="2.5" fill="#6366f1" />
            </g>
            <defs>
              <linearGradient
                id="grad1"
                x1="0"
                y1="0"
                x2="120"
                y2="120"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#a78bfa" />
                <stop offset="1" stopColor="#f472b6" />
              </linearGradient>
              <linearGradient
                id="grad2"
                x1="22"
                y1="22"
                x2="98"
                y2="98"
                gradientUnits="userSpaceOnUse"
              >
                <stop stopColor="#6366f1" />
                <stop offset="1" stopColor="#f472b6" />
              </linearGradient>
            </defs>
          </svg>
        </div>
        <h2 className="text-3xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-500 mb-2 drop-shadow-lg animate-fade-in-up">
          Próximamente
        </h2>
        <p className="text-lg text-gray-700 dark:text-gray-300 mb-8 animate-fade-in-up delay-100 text-center max-w-md">
          El módulo de evaluación para este tema estará disponible pronto.
          <br />
          ¡Estamos trabajando para traerte nuevos desafíos!
        </p>
        <button
          onClick={() => setActiveQuiz(null)}
          className="mt-4 px-8 py-3 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold shadow-lg hover:scale-105 hover:from-purple-600 hover:to-pink-500 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400 animate-fade-in-up delay-200"
          aria-label="Volver a Evaluaciones"
        >
          ← Volver a Evaluaciones
        </button>
        {/* Subtle floating shapes for extra flair */}
        <div className="absolute top-4 left-8 w-8 h-8 bg-pink-400 opacity-20 rounded-full blur-2xl animate-float-slow" />
        <div className="absolute bottom-8 right-10 w-12 h-12 bg-purple-400 opacity-20 rounded-full blur-2xl animate-float-slower" />
      </div>
    );
  }

  // Group quizzes by process_id for card layout
  const groupedQuizzes: { [key: number]: Quiz[] } = {};
  quizzes.forEach((quiz) => {
    if (quiz.process_id) {
      if (!groupedQuizzes[quiz.process_id])
        groupedQuizzes[quiz.process_id] = [];
      groupedQuizzes[quiz.process_id].push(quiz);
    } else {
      if (!groupedQuizzes[0]) groupedQuizzes[0] = [];
      groupedQuizzes[0].push(quiz);
    }
  });

  // Example process_id to section mapping (customize as needed)
  const processSections = [
    { id: 1, label: "Módulos de Ingeniería Fundamental", icon: "🔧" },
    { id: 2, label: "Tecnologías Avanzadas y Especialización", icon: "🚀" },
    { id: 3, label: "Ciencias Aplicadas y Gestión Industrial", icon: "🔬" },
    { id: 0, label: "Otros", icon: "📝" },
  ];

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
          🏆 Centro de Evaluación Avanzado
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-300">
          Sistema integral de evaluación con {quizzes.length} módulos
          especializados en ingeniería mecánica y tecnologías industriales
          modernas.
        </p>
      </div>

      {/* Enhanced Statistics Overview */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-12">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 rounded-xl shadow-lg">
          <div className="flex items-center justify-between mb-2">
            <Book size={24} />
            <span className="text-2xl font-bold">{quizzes.length}</span>
          </div>
          <div className="text-sm opacity-90">Evaluaciones Disponibles</div>
          <div className="text-xs opacity-75 mt-1">+3 nuevas este mes</div>
        </div>

        <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-6 rounded-xl shadow-lg">
          <div className="flex items-center justify-between mb-2">
            <Users size={24} />
            <span className="text-2xl font-bold">8,450</span>
          </div>
          <div className="text-sm opacity-90">Estudiantes Evaluados</div>
          <div className="text-xs opacity-75 mt-1">+15% este trimestre</div>
        </div>

        <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-6 rounded-xl shadow-lg">
          <div className="flex items-center justify-between mb-2">
            <Target size={24} />
            <span className="text-2xl font-bold">79.2%</span>
          </div>
          <div className="text-sm opacity-90">Puntuación Promedio</div>
          <div className="text-xs opacity-75 mt-1">+2.1% vs mes anterior</div>
        </div>

        <div className="bg-gradient-to-r from-orange-500 to-orange-600 text-white p-6 rounded-xl shadow-lg">
          <div className="flex items-center justify-between mb-2">
            <TrendingUp size={24} />
            <span className="text-2xl font-bold">+22%</span>
          </div>
          <div className="text-sm opacity-90">Mejora Mensual</div>
          <div className="text-xs opacity-75 mt-1">Tendencia positiva</div>
        </div>
      </div>

      {/* Quiz Sections by process_id */}
      <div className="space-y-8">
        {processSections.map((section) =>
          groupedQuizzes[section.id] &&
          groupedQuizzes[section.id].length > 0 ? (
            <div key={section.id}>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
                <span className="text-3xl mr-3">{section.icon}</span>
                {section.label}
              </h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {groupedQuizzes[section.id].map((quiz) => (
                  <QuizCard
                    key={quiz.id}
                    quiz={quiz}
                    onStart={setActiveQuiz}
                    userProgress={userProgress[quiz.id]}
                  />
                ))}
              </div>
            </div>
          ) : null
        )}
      </div>

      {/* Enhanced Study Recommendations */}
      <div className="mt-12 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-xl p-8">
        <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center flex items-center justify-center">
          <Brain className="mr-3" size={28} />
          Sistema de Recomendaciones Inteligente
        </h3>
        <div className="grid md:grid-cols-4 gap-6">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg">
            <div className="text-3xl mb-3">🎯</div>
            <h4 className="font-semibold mb-2">Preparación Adaptativa</h4>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              El sistema analiza tu rendimiento y sugiere áreas de mejora
              específicas.
            </p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg">
            <div className="text-3xl mb-3">⏱️</div>
            <h4 className="font-semibold mb-2">Gestión Inteligente</h4>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Optimiza tu tiempo de estudio con intervalos personalizados y
              descansos programados.
            </p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg">
            <div className="text-3xl mb-3">🔄</div>
            <h4 className="font-semibold mb-2">Aprendizaje Continuo</h4>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Repaso espaciado y refuerzo de conceptos basado en curvas de
              olvido.
            </p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg">
            <div className="text-3xl mb-3">📊</div>
            <h4 className="font-semibold mb-2">Analytics Avanzado</h4>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Métricas detalladas de progreso y comparación con estándares
              industriales.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EvaluationSection;
</file>

</files>
